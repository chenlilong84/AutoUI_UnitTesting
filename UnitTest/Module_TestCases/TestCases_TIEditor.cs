using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Input;
using Newtonsoft.Json.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting.Logging;
using Castle.Components.DictionaryAdapter.Xml;
using Chroma.UnitTest.Common;
using Chroma.UnitTest.Common.AutoUI;
using OpenQA.Selenium;
using OpenQA.Selenium.Appium;
using OpenQA.Selenium.Appium.Windows;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.PageObjects;
using OpenQA.Selenium.Support.UI;

using static PP5AutoUITests.AutoUIActionHelper;
using static PP5AutoUITests.AutoUIExtension;
using static PP5AutoUITests.ThreadHelper;
using static PP5AutoUITests.ControlElementExtension;
using MyCursor;
using Appium.Interfaces.Generic.SearchContext;
using System.ComponentModel;
using SeleniumExtras.PageObjects;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TaskbarClock;
using System.Data;
using static System.Net.Mime.MediaTypeNames;
using System.Security.Cryptography;
using System.Runtime.Serialization;
using System.Collections;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using PP5AutoUITests.Model;
using System.Drawing;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using System.Diagnostics;
using System.Windows.Automation;
//using static System.Windows.Forms.VisualStyles.VisualStyleElement.ProgressBar;
//using static System.Windows.Forms.VisualStyles.VisualStyleElement.TaskbarClock;

namespace PP5AutoUITests
{
    [TestClass]
    public class TestCases_TIEditor : TestBase
    {
        //public Task currTask = null;
        [TestInitialize]
        public void TIEditor_TestMethodSetup()
        {
            //fileWatcher.watcher.SynchronizingObject = base;
            OpenNewTIEditorWindow();

            // Load the command group infos
            //lock (taskManagerLock)
            //{
                taskManager.StartNewTask("LoadCommandGroup", LoadCommandGroup);
            //}

            SharedSetting.forceRefreshPP5Window = false;

            SharedSetting.isScreenshotEnabled = false;
            if (SharedSetting.isScreenshotEnabled)
            {
                string saveFolder = Path.Combine(Directory.GetCurrentDirectory(), "TestCases_TIEditor");
                double updateInterval = 360000;
                _scrnShotTimer = new CaptureAppScreenshotTimer(CaptureApplicationScreenshot, "dotMemory.UI.64", saveFolder, updateInterval); // 60000 milliseconds = 1 minute
                _scrnShotTimer.Start();
            }
        }

        [TestCleanup]
        public void TIEditor_TestMethodCleanup()
        {
            if (_scrnShotTimer != null)
                _scrnShotTimer.Stop();

            if (TIFilePaths.Count > 0)
            {
                foreach (string path in TIFilePaths)
                {
                    string tmpTestCaseFilePath = $"C:/Temp/{Path.GetFileName(path)}";
                    if (File.Exists(tmpTestCaseFilePath))
                    {
                        File.Delete(tmpTestCaseFilePath);         // Ensure that the target does not exist.
                    }
                    File.Move(path, tmpTestCaseFilePath);   // Move the file.
                }
            }
            TIFilePaths.Clear();
        }

        /// <summary>
        /// EmptyTest
        /// </summary>
        [TestMethod("Test")]
        public void EmptyTest()
        {
            Assert.IsTrue(true);
        }

        [TestMethod]
        public void MainPanel_TIEditor_AddNewCmd_CheckSkip()
        {
            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Button "" at (13,6)
            //    Console.WriteLine("LeftClick on Button \"\" at (13,6)");
            //    string xpath_LeftClickButton_13_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE - [TI Editor]\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Button[@AutomationId=\"Expander\"]";
            //    var winElem_LeftClickButton_13_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton_13_6);
            //    if (winElem_LeftClickButton_13_6 != null)
            //    {
            //        winElem_LeftClickButton_13_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton_13_6}");
            //        return;
            //    }

            //    //Session.GeElement("@ID=startfather").Action("doubleClick" +
            //    //                                            "sendKeys[1]");
            //    //Session.GeElement("@ID=startfather").Action("sendKeys[1]");

            //    //public WindowsElement GetElementFromWebElement(string path)
            //    //{
            //    //    Session.FindEle
            //    //}

            //    // LeftDblClick on Text "ReadAC_Current" at (24,10)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (24,10)");
            //    //string xpath_LeftDblClickTextReadAC_Cur_24_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[contains=(text(), \"ReadAC_Current\")]";
            //    //var winElem_LeftDblClickTextReadAC_Cur_24_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_24_10);

            //    //if (winElem_LeftDblClickTextReadAC_Cur_24_10 != null)
            //    //{
            //    //    AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_24_10.Coordinates);
            //    //    AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    //}
            //    //else
            //    //{
            //    //    Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_24_10}");
            //    //    return;
            //    //}

            //    //int count = 0;
            //    //var cmd = desktopSession.FindElementsByAutomationId("cmdTxtBlk").Where(we => we.Text == "ReadAC_Current").FirstOrDefault();

            //    WindowsElement cmd = null;
            //    bool cmdFound = false;

            //    while (!cmdFound)
            //    {
            //        //foreach (var cmd in testcmds)
            //        //{
            //        cmd = AutoUIExecutor.FindElementByAbsoluteXPath("/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]");

            //        if (cmd != null)
            //        {
            //            cmdFound = cmd.Text == "ReadAC_Current";
            //            if (cmdFound)
            //            {
            //                PP5IDE_Session.Mouse.MouseMove(cmd.Coordinates);
            //                PP5IDE_Session.Mouse.DoubleClick(null);
            //            }
            //            else
            //            {
            //                Console.WriteLine($"Failed to find element by Automation ID & Name: \"cmdTxtBlk\" & \"ReadAC_Current\"");
            //                continue;
            //            }
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element by Automation ID: \"cmdTxtBlk\"");
            //            return;
            //        }
            //    }


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (48,17)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (48,17)");
            //    string xpath_LeftClickCustomUncheckedI_48_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_48_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_48_17);
            //    if (winElem_LeftClickCustomUncheckedI_48_17 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_48_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_48_17}");
            //        return;
            //    }

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        //Sunny

        [TestMethod]
        public void MainPanel_TIEditor_AddNewCmd_CopyAndPaste()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            //GetCommandBy(CommandName, GroupName).DoubleClick();
            AddCommandBy(cgt, CommandName);
            //AddCommandBy(GroupName, 17);

            // LeftClick on Text "ABS"
            Console.WriteLine("LeftClick on Text \"ABS\"");
            GetCellBy("PGGrid", 0, "Test Command").LeftClick();

            //// LeftClick on Text "Edit" > "Copy" > "Edit" > "Paste"
            //MenuSelect("Edit", "Copy", "Edit", "Paste");

            // Adam, 2024/2/2, new copy and paste method (not from menu)
            SelectAll();
            CopyAndPaste();

            // Check same test item command is added
            CommandName.ShouldEqualTo(GetCellBy("PGGrid", 1, "Test Command").Text);

            //WindowsElement testCmdSearchBox = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("searchBox"));
            //testCmdSearchBox.ClearContent();
            //testCmdSearchBox.SendComboKeys(CommandName, OpenQA.Selenium.Keys.Enter);

            // Store the tree view first time
            //Dictionary<string, AppiumWebElement> CommandsMap = GetCommandMap(By.ClassName("CmdTreeView"));

            // Give the CmdTreeViewID, GroupName, cmdName as tuple as key to find command element
            //((WindowsElement)CommandsMap["ABS"]).DoubleClick();

            //WindowsElement menu = CurrentDriver.GetElementFromWebElement(By.ClassName("Menu"));
            //Console.WriteLine("LeftClick on Text \"Edit\"");
            ////CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[2]")).LeftClick();
            //menu.GetElementFromWebElement(By.XPath(".//Text[@Name='Edit']")).LeftClick();

            //// LeftClick on Text "Copy"
            //Console.WriteLine("LeftClick on Text \"Copy\"");
            ////CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[5]")).LeftClick();
            //menu.GetElementFromWebElement(By.XPath(".//Text[@Name='Copy']")).LeftClick();

            //// LeftClick on Text "Edit"
            //Console.WriteLine("LeftClick on Text \"Edit\"");
            ////CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[2]")).LeftClick();
            //menu.GetElementFromWebElement(By.XPath(".//Text[@Name='Edit']")).LeftClick();

            //// LeftClick on Text "Paste"
            //Console.WriteLine("LeftClick on Text \"Paste\"");
            ////CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[6]")).LeftClick();
            //menu.GetElementFromWebElement(By.XPath(".//Text[@Name='Paste']")).LeftClick();

            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftDblClick on Text "Arithmetic" at (32,3)
            //    Console.WriteLine("LeftDblClick on Text \"Arithmetic\" at (32,3)");
            //    string xpath_LeftDblClickTextArithmetic_32_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Arithmetic\"]";
            //    var winElem_LeftDblClickTextArithmetic_32_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextArithmetic_32_3);
            //    if (winElem_LeftDblClickTextArithmetic_32_3 != null)
            //    {
            //        PP5IDE_Session.Mouse.MouseMove(winElem_LeftDblClickTextArithmetic_32_3.Coordinates);
            //        PP5IDE_Session.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextArithmetic_32_3}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ABS" at (13,3)
            //    Console.WriteLine("LeftDblClick on Text \"ABS\" at (13,3)");
            //    string xpath_LeftDblClickTextABS_13_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ABS\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextABS_13_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextABS_13_3);
            //    if (winElem_LeftDblClickTextABS_13_3 != null)
            //    {
            //        PP5IDE_Session.Mouse.MouseMove(winElem_LeftDblClickTextABS_13_3.Coordinates);
            //        PP5IDE_Session.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextABS_13_3}");
            //        return;
            //    }


            //    // LeftClick on Custom "ABS, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridR" at (18,9)
            //    Console.WriteLine("LeftClick on Custom \"ABS, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridR\" at (18,9)");
            //    string xpath_LeftClickCustomABSItemChr_18_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ABS, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridR\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomABSItemChr_18_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomABSItemChr_18_9);
            //    if (winElem_LeftClickCustomABSItemChr_18_9 != null)
            //    {
            //        winElem_LeftClickCustomABSItemChr_18_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomABSItemChr_18_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (4,2)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (4,2)");
            //    string xpath_LeftClickTextEdit_4_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_4_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_4_2);
            //    if (winElem_LeftClickTextEdit_4_2 != null)
            //    {
            //        winElem_LeftClickTextEdit_4_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_4_2}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (13,8)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (13,8)");
            //    string xpath_LeftClickTextCopy_13_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_13_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_13_8);
            //    if (winElem_LeftClickTextCopy_13_8 != null)
            //    {
            //        winElem_LeftClickTextCopy_13_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_13_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (8,5)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (8,5)");
            //    string xpath_LeftClickTextEdit_8_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_8_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_8_5);
            //    if (winElem_LeftClickTextEdit_8_5 != null)
            //    {
            //        winElem_LeftClickTextEdit_8_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_8_5}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (8,9)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (8,9)");
            //    string xpath_LeftClickTextPaste_8_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_8_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_8_9);
            //    if (winElem_LeftClickTextPaste_8_9 != null)
            //    {
            //        winElem_LeftClickTextPaste_8_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_8_9}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (271,175)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (271,175)");
            //    string xpath_LeftClickPaneDataPanel_271_175 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_271_175 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_271_175);
            //    if (winElem_LeftClickPaneDataPanel_271_175 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_271_175.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_271_175}");
            //        return;
            //    }

            //    bSuccess = true;

            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "CopyAndPaste");
            //}
        }

        //[TestMethod]

        //public void MainPanel_TIEditor_AddNewCmd_AddVariable()
        //{
        //    //MainPanel_TIEditor_OpenNewTI();
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {

        //        bSuccess = true;


        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //    }
        //}

        [TestMethod]
        public void MainPanel_TIEditor_AddNewCmd_InsertAndDelete()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;
            int CommandCountAfterInsertAndDelete = 1;

            // Add the command
            //GetCommandBy(CommandName, GroupName).DoubleClick();
            AddCommandBy(cgt, CommandName);
            //AddCommandBy(GroupName, 17);

            // LeftClick on Text "ABS"
            Console.WriteLine("LeftClick on Text \"ABS\"");
            GetCellBy("PGGrid", 0, "Test Command").LeftClick();

            // Insert and delete by clicking on the buttons (from toolbar)
            var functionBtns = CurrentDriver.GetWebElementFromWebDriver(By.ClassName("ToolBar"))
                                            .GetWebElementsFromWebElement(By.ClassName("RadioButton"));
            functionBtns[9].LeftClick();
            functionBtns[12].LeftClick();

            // Check "ABS" command counts
            //RefreshDataTable(TIDataTableAutoIDType.PGGrid);
            CommandCountAfterInsertAndDelete.ShouldEqualTo(GetRowCount(TIDataTableAutoIDType.PGGrid));

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (20,11)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (20,11)");
            //    string xpath_LeftDblClickTextACSource_20_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_20_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_20_11);
            //    if (winElem_LeftDblClickTextACSource_20_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_20_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_20_11}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (24,7)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (24,7)");
            //    string xpath_LeftDblClickTextReadAC_Cur_24_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_24_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_24_7);
            //    if (winElem_LeftDblClickTextReadAC_Cur_24_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_24_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_24_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (31,7)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (31,7)");
            //    string xpath_LeftDblClickTextReadAC_Fre_31_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_31_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_31_7);
            //    if (winElem_LeftDblClickTextReadAC_Fre_31_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_31_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_31_7}");
            //        return;
            //    }



            //    // LeftClick on Custom "ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De" at (110,7)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\" at (110,7)");
            //    string xpath_LeftClickCustomReadAC_Fre_110_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Fre_110_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Fre_110_7);
            //    if (winElem_LeftClickCustomReadAC_Fre_110_7 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Fre_110_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Fre_110_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (11,6)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (11,6)");
            //    string xpath_LeftClickTextEdit_11_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_11_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_11_6);
            //    if (winElem_LeftClickTextEdit_11_6 != null)
            //    {
            //        winElem_LeftClickTextEdit_11_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_11_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Insert" at (18,7)
            //    Console.WriteLine("LeftClick on Text \"Insert\" at (18,7)");
            //    string xpath_LeftClickTextInsert_18_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Insert\"]";
            //    var winElem_LeftClickTextInsert_18_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextInsert_18_7);
            //    if (winElem_LeftClickTextInsert_18_7 != null)
            //    {
            //        winElem_LeftClickTextInsert_18_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextInsert_18_7}");
            //        return;
            //    }


            //    // LeftClick on Custom "ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De" at (163,7)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\" at (163,7)");
            //    string xpath_LeftClickCustomReadAC_Fre_163_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Fre_163_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Fre_163_7);
            //    if (winElem_LeftClickCustomReadAC_Fre_163_7 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Fre_163_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Fre_163_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (22,2)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (22,2)");
            //    string xpath_LeftClickTextEdit_22_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_22_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_22_2);
            //    if (winElem_LeftClickTextEdit_22_2 != null)
            //    {
            //        winElem_LeftClickTextEdit_22_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_22_2}");
            //        return;
            //    }


            //    // LeftClick on Text "Delete" at (17,8)
            //    Console.WriteLine("LeftClick on Text \"Delete\" at (17,8)");
            //    string xpath_LeftClickTextDelete_17_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Delete\"]";
            //    var winElem_LeftClickTextDelete_17_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextDelete_17_8);
            //    if (winElem_LeftClickTextDelete_17_8 != null)
            //    {
            //        winElem_LeftClickTextDelete_17_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextDelete_17_8}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod]
        public void MainPanel_TIEditor_AddNewCmd_CheckRadioButton()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            //GetCommandBy(CommandName, GroupName).DoubleClick();
            AddCommandBy(cgt, 1);
            //AddCommandBy(GroupName, 17);

            // LeftClick on Text "ABS"
            Console.WriteLine("LeftClick on Text \"ABS\"");
            GetCellBy("PGGrid", 0, "Test Command").LeftClick();

            //
            GetCellBy("ParameterGrid", 0, "No").LeftClick();
            CurrentDriver.GetWebElementFromWebDriver(MobileBy.AccessibilityId("editParamAreaView"))
                         .GetWebElementFromWebElement(By.Name("Constant"))
                         .LeftClick();

            SendSingleKeys("0");
            CurrentDriver.GetWebElementFromWebDriver(MobileBy.AccessibilityId("editParamAreaView"))
                         .GetWebElementFromWebElement(By.Name("Test Condition"))
                         .LeftClick();
            CurrentDriver.GetWebElementFromWebDriver(MobileBy.AccessibilityId("editParamAreaView"))
                         .GetWebElementFromWebElement(By.Name("Test Result"))
                         .LeftClick();
            CurrentDriver.GetWebElementFromWebDriver(MobileBy.AccessibilityId("editParamAreaView"))
                         .GetWebElementFromWebElement(By.Name("Temporary Var."))
                         .LeftClick();
            CurrentDriver.GetWebElementFromWebDriver(MobileBy.AccessibilityId("editParamAreaView"))
                         .GetWebElementFromWebElement(By.Name("Global Var."))
                         .LeftClick();

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (44,1)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (44,1)");
            //    string xpath_LeftDblClickTextACSource_44_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_44_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_44_1);
            //    if (winElem_LeftDblClickTextACSource_44_1 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_44_1.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_44_1}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (33,13)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (33,13)");
            //    string xpath_LeftDblClickTextReadAC_Cur_33_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_33_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_33_13);
            //    if (winElem_LeftDblClickTextReadAC_Cur_33_13 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_33_13.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_33_13}");
            //        return;
            //    }



            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (171,14)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (171,14)");
            //    string xpath_LeftDblClickCustomItemChroma_171_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftDblClickCustomItemChroma_171_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_171_14);
            //    if (winElem_LeftDblClickCustomItemChroma_171_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_171_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_171_14}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Test Condition" at (8,9)
            //    Console.WriteLine("LeftDblClick on Text \"Test Condition\" at (8,9)");
            //    string xpath_LeftDblClickTextTestCondit_8_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Test Condition\"][@AutomationId=\"cndRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Test Condition\"]";
            //    var winElem_LeftDblClickTextTestCondit_8_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextTestCondit_8_9);
            //    if (winElem_LeftDblClickTextTestCondit_8_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextTestCondit_8_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextTestCondit_8_9}");
            //        return;
            //    }


            //    // LeftDblClick on RadioButton "Constant" at (9,9)
            //    Console.WriteLine("LeftDblClick on RadioButton \"Constant\" at (9,9)");
            //    string xpath_LeftDblClickRadioButtonConstant_9_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftDblClickRadioButtonConstant_9_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickRadioButtonConstant_9_9);
            //    if (winElem_LeftDblClickRadioButtonConstant_9_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickRadioButtonConstant_9_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickRadioButtonConstant_9_9}");
            //        return;
            //    }


            //    // LeftDblClick on RadioButton "Test Result" at (6,9)
            //    Console.WriteLine("LeftDblClick on RadioButton \"Test Result\" at (6,9)");
            //    string xpath_LeftDblClickRadioButtonTestResult_6_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Test Result\"][@AutomationId=\"rstRdoBtn\"]";
            //    var winElem_LeftDblClickRadioButtonTestResult_6_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickRadioButtonTestResult_6_9);
            //    if (winElem_LeftDblClickRadioButtonTestResult_6_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickRadioButtonTestResult_6_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickRadioButtonTestResult_6_9}");
            //        return;
            //    }


            //    // LeftDblClick on RadioButton "Temporary Var." at (8,12)
            //    Console.WriteLine("LeftDblClick on RadioButton \"Temporary Var.\" at (8,12)");
            //    string xpath_LeftDblClickRadioButtonTemporaryV_8_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Temporary Var.\"][@AutomationId=\"tmpRdoBtn\"]";
            //    var winElem_LeftDblClickRadioButtonTemporaryV_8_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickRadioButtonTemporaryV_8_12);
            //    if (winElem_LeftDblClickRadioButtonTemporaryV_8_12 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickRadioButtonTemporaryV_8_12.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickRadioButtonTemporaryV_8_12}");
            //        return;
            //    }


            //    // LeftDblClick on RadioButton "Global Var." at (5,8)
            //    Console.WriteLine("LeftDblClick on RadioButton \"Global Var.\" at (5,8)");
            //    string xpath_LeftDblClickRadioButtonGlobalVar_5_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Global Var.\"][@AutomationId=\"glbRdoBtn\"]";
            //    var winElem_LeftDblClickRadioButtonGlobalVar_5_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickRadioButtonGlobalVar_5_8);
            //    if (winElem_LeftDblClickRadioButtonGlobalVar_5_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickRadioButtonGlobalVar_5_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickRadioButtonGlobalVar_5_8}");
            //        return;
            //    }


            //    // LeftClick on Group "dockItem7" at (0,588)
            //    Console.WriteLine("LeftClick on Group \"dockItem7\" at (0,588)");
            //    string xpath_LeftClickGroupdockItem7_0_588 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]";
            //    var winElem_LeftClickGroupdockItem7_0_588 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickGroupdockItem7_0_588);
            //    if (winElem_LeftClickGroupdockItem7_0_588 != null)
            //    {
            //        winElem_LeftClickGroupdockItem7_0_588.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickGroupdockItem7_0_588}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod]
        public void MainPanel_TIEditor_AddNewCmd_MenuCheck()
        {
            bool inTradChineseWindowTitle = true;
            bool inSimpChineseWindowTitle = true;
            bool inEngWindowTitle = true;

            // LeftClick on Text "Languages" > "簡体中文"
            MenuSelect("Languages", "簡体中文");
            inSimpChineseWindowTitle.ShouldEqualTo(CheckWindowOpened("Chroma ATS IDE - [测项编辑器]"));

            // LeftClick on Text "Languages" > "繁體中文"
            MenuSelect("语言", "繁體中文");
            inTradChineseWindowTitle.ShouldEqualTo(CheckWindowOpened("Chroma ATS IDE - [測項編輯器]"));

            // LeftClick on Text "語言" > "English"
            MenuSelect("語言", "English");
            inEngWindowTitle.ShouldEqualTo(CheckWindowOpened("Chroma ATS IDE - [TI Editor]"));

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Languages" at (18,9)
            //    Console.WriteLine("LeftClick on Text \"Languages\" at (18,9)");
            //    string xpath_LeftClickTextLanguages_18_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Languages\"]";
            //    var winElem_LeftClickTextLanguages_18_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextLanguages_18_9);
            //    if (winElem_LeftClickTextLanguages_18_9 != null)
            //    {
            //        winElem_LeftClickTextLanguages_18_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextLanguages_18_9}");
            //        return;
            //    }


            //    // LeftClick on Text "繁體中文" at (46,7)
            //    Console.WriteLine("LeftClick on Text \"繁體中文\" at (46,7)");
            //    string xpath_LeftClickText繁體中文_46_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"繁體中文\"]";
            //    var winElem_LeftClickText繁體中文_46_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickText繁體中文_46_7);
            //    if (winElem_LeftClickText繁體中文_46_7 != null)
            //    {
            //        winElem_LeftClickText繁體中文_46_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickText繁體中文_46_7}");
            //        return;
            //    }


            //    // LeftClick on Text "語言" at (8,14)
            //    Console.WriteLine("LeftClick on Text \"語言\" at (8,14)");
            //    string xpath_LeftClickText語言_8_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"語言\"]";
            //    var winElem_LeftClickText語言_8_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickText語言_8_14);
            //    if (winElem_LeftClickText語言_8_14 != null)
            //    {
            //        winElem_LeftClickText語言_8_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickText語言_8_14}");
            //        return;
            //    }


            //    // LeftClick on Text "English" at (20,13)
            //    Console.WriteLine("LeftClick on Text \"English\" at (20,13)");
            //    string xpath_LeftClickTextEnglish_20_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"English\"]";
            //    var winElem_LeftClickTextEnglish_20_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEnglish_20_13);
            //    if (winElem_LeftClickTextEnglish_20_13 != null)
            //    {
            //        winElem_LeftClickTextEnglish_20_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEnglish_20_13}");
            //        return;
            //    }




            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "MenuCheck");
            //}
        }

        [TestMethod]
        public void MainPanel_TIEditor_AddNewCmd_TIDescription()
        {


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on RadioButton "TI Description" at (124,11)
            //    Console.WriteLine("LeftClick on RadioButton \"TI Description\" at (124,11)");
            //    string xpath_LeftClickRadioButtonTIDescript_124_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"SettingAeraView\"]/RadioButton[@Name=\"TI Description\"][@AutomationId=\"TIDesRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTIDescript_124_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTIDescript_124_11);
            //    if (winElem_LeftClickRadioButtonTIDescript_124_11 != null)
            //    {
            //        winElem_LeftClickRadioButtonTIDescript_124_11.Click();
            //        Assert.IsTrue(winElem_LeftClickRadioButtonTIDescript_124_11.Selected, "TI Description tab not selected yet");
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTIDescript_124_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Add Image" at (40,17)
            //    Console.WriteLine("LeftClick on Text \"Add Image\" at (40,17)");
            //    string xpath_LeftClickTextAddImage_40_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@AutomationId=\"TIDescriptionView\"]/Pane[@ClassName=\"ScrollViewer\"]/Button[@Name=\"Add Image\"][@AutomationId=\"AddBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Add Image\"]";
            //    var winElem_LeftClickTextAddImage_40_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextAddImage_40_17);
            //    if (winElem_LeftClickTextAddImage_40_17 != null)
            //    {
            //        winElem_LeftClickTextAddImage_40_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextAddImage_40_17}");
            //        return;
            //    }



            //    // LeftClick on TreeItem "桌面 (已釘選)" at (21,12)
            //    Console.WriteLine("LeftClick on TreeItem \"桌面 (已釘選)\" at (21,12)");
            //    string xpath_LeftClickTreeItem桌面已釘選_21_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"#32770\"][@Name=\"Select a picture\"]/Pane[@ClassName=\"DUIViewWndClassName\"]/Pane[@Name=\"控制主機\"][@AutomationId=\"ProperTreeHost\"]/Tree[@ClassName=\"SysTreeView32\"][@Name=\"樹狀檢視\"]/TreeItem[@Name=\"快速存取\"]/TreeItem[@Name=\"桌面 (已釘選)\"]";
            //    var winElem_LeftClickTreeItem桌面已釘選_21_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTreeItem桌面已釘選_21_12);
            //    if (winElem_LeftClickTreeItem桌面已釘選_21_12 != null)
            //    {
            //        winElem_LeftClickTreeItem桌面已釘選_21_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTreeItem桌面已釘選_21_12}");
            //        return;
            //    }


            //    // LeftClick on Edit "名稱" at (43,9)
            //    Console.WriteLine("LeftClick on Edit \"名稱\" at (43,9)");
            //    string xpath_LeftClickEdit名稱_43_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"#32770\"][@Name=\"Select a picture\"]/Pane[@ClassName=\"DUIViewWndClassName\"]/Pane[@Name=\"Shell 資料夾檢視\"][@AutomationId=\"listview\"]/List[@ClassName=\"UIItemsView\"][@Name=\"項目檢視\"]/ListItem[@ClassName=\"UIItem\"][@Name=\"未命名.png\"]/Edit[@Name=\"名稱\"][@AutomationId=\"System.ItemNameDisplay\"]";
            //    var winElem_LeftClickEdit名稱_43_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit名稱_43_9);
            //    if (winElem_LeftClickEdit名稱_43_9 != null)
            //    {
            //        winElem_LeftClickEdit名稱_43_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit名稱_43_9}");
            //        return;
            //    }


            //    // LeftClick on Button "開啟(O)" at (47,17)
            //    Console.WriteLine("LeftClick on Button \"開啟(O)\" at (47,17)");
            //    string xpath_LeftClickButton開啟O_47_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"#32770\"][@Name=\"Select a picture\"]/Button[@ClassName=\"Button\"][@Name=\"開啟(O)\"]";
            //    var winElem_LeftClickButton開啟O_47_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton開啟O_47_17);
            //    if (winElem_LeftClickButton開啟O_47_17 != null)
            //    {
            //        winElem_LeftClickButton開啟O_47_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton開啟O_47_17}");
            //        return;
            //    }


            //    // LeftClick on Image "" at (209,206)
            //    Console.WriteLine("LeftClick on Image \"\" at (209,206)");
            //    string xpath_LeftClickImage_209_206 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@AutomationId=\"TIDescriptionView\"]/Pane[@ClassName=\"ScrollViewer\"]/Image[@ClassName=\"Image\"]";
            //    var winElem_LeftClickImage_209_206 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_209_206);
            //    if (winElem_LeftClickImage_209_206 != null)
            //    {
            //        winElem_LeftClickImage_209_206.Click();

            //        // assume we have a File called refImgFile
            //        string refImgFile = @"C:\Users\adam.chen\Desktop\未命名.png";
            //        string base64EncodedImageFile = AutoUIExtension.FileToBase64(refImgFile);
            //        var imgEle = PP5IDE_Session.FindElementByImage(base64EncodedImageFile);
            //        Assert.AreEqual(imgEle.Text, refImgFile.Split('\"')[refImgFile.Split('\"').Count() - 1]);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_209_206}");
            //        return;
            //    }



            //    // LeftClick on Button "Delete" at (117,9)
            //    Console.WriteLine("LeftClick on Button \"Delete\" at (117,9)");
            //    string xpath_LeftClickButtonDelete_117_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@AutomationId=\"TIDescriptionView\"]/Pane[@ClassName=\"ScrollViewer\"]/Button[@Name=\"Delete\"][@AutomationId=\"DeleteBtn\"]";
            //    var winElem_LeftClickButtonDelete_117_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonDelete_117_9);
            //    if (winElem_LeftClickButtonDelete_117_9 != null)
            //    {
            //        winElem_LeftClickButtonDelete_117_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonDelete_117_9}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //catch (Exception ex)
            //{
            //    Console.WriteLine(ex);
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "AddPhotoAndDelete");
            //}
        }


        [TestMethod("B1-1_1")]
        [TestCategory("檔案操作(B1)")]
        public void TIEditor_CreateNewTIByTypeTIRunTypePreTest()
        {
            //// LeftClick on Text "File"
            //Console.WriteLine("LeftClick on Text \"File\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            //// LeftClick on Text "New"
            //Console.WriteLine("LeftClick on Text \"New\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "Pre Test"
            //Console.WriteLine("LeftClick on RadioButton \"Pre Test\"");
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetRdoBtnElement("Pre Test")
            //            .LeftClick();

            PP5IDEWindow.PerformClick("/ByName[New Test Item, Pre Test]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //Console.WriteLine("LeftClick on Button \"Ok\"");
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetBtnElement("Ok")
            //            .LeftClick();

            PP5IDEWindow.PerformClick("/ByName[New Test Item, Ok]", ClickType.LeftClick);
            //string TIContextInfo = PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("TitleTxtBlk")).Text;
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new TI is opened by verify the TI context label
            "TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);

            ////LogInPassTest();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    uIActionMainPanel.SwitchToWindow();
            //    //MainPanel_Session.SwitchTo();

            //    // LeftClick on Button "Test Item" at (302,39)
            //    Console.WriteLine("LeftClick on Button \"Test Item\" at (302,39)");
            //    string xpath_LeftClickButtonTestItem_302_39 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Chroma ATE - MainPanel\"][@AutomationId=\"winMainPanel\"]/Button[@Name=\"Test Item\"][@AutomationId=\"TIEditor\"]";
            //    var winElem_LeftClickButtonTestItem_302_39 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonTestItem_302_39);
            //    if (winElem_LeftClickButtonTestItem_302_39 != null)
            //    {
            //        winElem_LeftClickButtonTestItem_302_39.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonTestItem_302_39}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "New Test Item" at (7,8)
            //    Console.WriteLine("LeftClick on RadioButton \"New Test Item\" at (7,8)");
            //    string xpath_LeftClickRadioButtonNewTestIte_7_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/RadioButton[@Name=\"New Test Item\"][@AutomationId=\"rdoNew\"]";
            //    var winElem_LeftClickRadioButtonNewTestIte_7_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonNewTestIte_7_8);
            //    if (winElem_LeftClickRadioButtonNewTestIte_7_8 != null)
            //    {
            //        winElem_LeftClickRadioButtonNewTestIte_7_8.Click();
            //        Assert.IsTrue(winElem_LeftClickRadioButtonNewTestIte_7_8.Selected);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonNewTestIte_7_8}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (28,10)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (28,10)");
            //    string xpath_LeftClickButtonOk_28_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]";
            //    var winElem_LeftClickButtonOk_28_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_28_10);
            //    if (winElem_LeftClickButtonOk_28_10 != null)
            //    {
            //        winElem_LeftClickButtonOk_28_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_28_10}");
            //        return;
            //    }

            //    // LeftClick on Window "New Test Item" at (218,11)
            //    Console.WriteLine("LeftClick on Window \"New Test Item\" at (218,11)");
            //    string xpath_LeftClickWindowNewTestIte_218_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]";
            //    var winElem_LeftClickWindowNewTestIte_218_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickWindowNewTestIte_218_11);
            //    Assert.IsNotNull(winElem_LeftClickWindowNewTestIte_218_11);
            //    //if (winElem_LeftClickWindowNewTestIte_218_11 != null)
            //    //{
            //    //    winElem_LeftClickWindowNewTestIte_218_11.Click();
            //    //    Assert.AreEqual("New Test Item", winElem_LeftClickWindowNewTestIte_218_11.Text);
            //    //}
            //    //else
            //    //{
            //    //    Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickWindowNewTestIte_218_11}");
            //    //    return;
            //    //}

            //    // LeftClick on RadioButton "User-Defined TI" at (4,9)
            //    Console.WriteLine("LeftClick on RadioButton \"User-Defined TI\" at (4,9)");
            //    string xpath_LeftClickRadioButtonUserDefine_4_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"User-Defined TI\"][@AutomationId=\"UserDefineRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUserDefine_4_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUserDefine_4_9);
            //    if (winElem_LeftClickRadioButtonUserDefine_4_9 != null)
            //    {
            //        winElem_LeftClickRadioButtonUserDefine_4_9.Click();
            //        Assert.IsTrue(winElem_LeftClickRadioButtonUserDefine_4_9.Selected, "RadioButton \"User-Defined TI\" is selected");
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUserDefine_4_9}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "TI" at (5,10)
            //    Console.WriteLine("LeftClick on RadioButton \"TI\" at (5,10)");
            //    string xpath_LeftClickRadioButtonTI_5_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"TI\"][@AutomationId=\"TIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTI_5_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTI_5_10);
            //    if (winElem_LeftClickRadioButtonTI_5_10 != null)
            //    {
            //        winElem_LeftClickRadioButtonTI_5_10.Click();
            //        Assert.IsTrue(winElem_LeftClickRadioButtonTI_5_10.Selected);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTI_5_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Pre Test" at (6,7)
            //    Console.WriteLine("LeftClick on RadioButton \"Pre Test\" at (6,7)");
            //    string xpath_LeftClickRadioButtonPreTest_6_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Pre Test\"][@AutomationId=\"PreRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonPreTest_6_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPreTest_6_7);
            //    if (winElem_LeftClickRadioButtonPreTest_6_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonPreTest_6_7.Click();
            //        Assert.IsTrue(winElem_LeftClickRadioButtonPreTest_6_7.Selected);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPreTest_6_7}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (124,10)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (124,10)");
            //    string xpath_LeftClickComboBox_124_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_124_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_124_10);
            //    if (winElem_LeftClickComboBox_124_10 != null)
            //    {
            //        winElem_LeftClickComboBox_124_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_124_10}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (66,2)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (66,2)");
            //    string xpath_LeftClickTextTIAutoTest_66_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_66_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_66_2);
            //    if (winElem_LeftClickTextTIAutoTest_66_2 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_66_2.Click();
            //        Assert.AreEqual("TIAutoTest", winElem_LeftClickTextTIAutoTest_66_2.Text);
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-1_1_1");
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_66_2}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (25,8)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (25,8)");
            //    string xpath_LeftClickButtonOk_25_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_25_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_25_8);
            //    if (winElem_LeftClickButtonOk_25_8 != null)
            //    {

            //        winElem_LeftClickButtonOk_25_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_25_8}");
            //        return;
            //    }


            //    // LeftClick on Text "User-TI-TIAutoTest-UnClassified" at (547,10)
            //    Console.WriteLine("LeftClick on Text \"User-TI-TIAutoTest-UnClassified\" at (547,10)");
            //    string xpath_LeftClickTextUserTITIAu_547_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/Text[@Name=\"User-TI-TIAutoTest-UnClassified\"][@AutomationId=\"TitleTxtBlk\"]";
            //    var winElem_LeftClickTextUserTITIAu_547_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextUserTITIAu_547_10);
            //    Assert.IsNotNull(winElem_LeftClickTextUserTITIAu_547_10);
            //    Assert.AreEqual("User-TI-TIAutoTest-UnClassified", winElem_LeftClickTextUserTITIAu_547_10.Text);
            //    //if (winElem_LeftClickTextUserTITIAu_547_10 != null)
            //    //{
            //    //    winElem_LeftClickTextUserTITIAu_547_10.Click();
            //    //}
            //    //else
            //    //{
            //    //    Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextUserTITIAu_547_10}");
            //    //    return;
            //    //}

            //    bSuccess = true;

            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B1-1_1");
            //}
        }


        [TestMethod("B1-1_2")]
        [TestCategory("檔案操作(B1)")]
        //[DataRow()]
        public void TIEditor_CreateNewTIByTypeTIRunTypeUUTTest()
        {
            //// LeftClick on Text "File"
            //Console.WriteLine("LeftClick on Text \"File\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            //// LeftClick on Text "New"
            //Console.WriteLine("LeftClick on Text \"New\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "UUT Test"
            //Console.WriteLine("LeftClick on RadioButton \"UUT Test\"");
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetRdoBtnElement("UUT Test")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, UUT Test]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //Console.WriteLine("LeftClick on Button \"Ok\"");
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetBtnElement("Ok")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Ok]", ClickType.LeftClick);

            //string TIContextInfo = PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("TitleTxtBlk")).Text;
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new TI is opened by verify the TI context label
            "TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);

            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Button "Test Item" at (249,48)
            //    Console.WriteLine("LeftClick on Button \"Test Item\" at (249,48)");
            //    string xpath_LeftClickButtonTestItem_249_48 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Chroma ATE - MainPanel\"][@AutomationId=\"winMainPanel\"]/Button[@Name=\"Test Item\"][@AutomationId=\"TIEditor\"]";
            //    var winElem_LeftClickButtonTestItem_249_48 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonTestItem_249_48);
            //    if (winElem_LeftClickButtonTestItem_249_48 != null)
            //    {
            //        winElem_LeftClickButtonTestItem_249_48.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonTestItem_249_48}");
            //        return;
            //    }

            //    // LeftClick on RadioButton "New Test Item" at (7,8)
            //    Console.WriteLine("LeftClick on RadioButton \"New Test Item\" at (7,8)");
            //    string xpath_LeftClickRadioButtonNewTestIte_7_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/RadioButton[@Name=\"New Test Item\"][@AutomationId=\"rdoNew\"]";
            //    var winElem_LeftClickRadioButtonNewTestIte_7_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonNewTestIte_7_8);
            //    if (winElem_LeftClickRadioButtonNewTestIte_7_8 != null)
            //    {
            //        winElem_LeftClickRadioButtonNewTestIte_7_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonNewTestIte_7_8}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (28,10)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (28,10)");
            //    string xpath_LeftClickButtonOk_28_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]";
            //    var winElem_LeftClickButtonOk_28_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_28_10);
            //    if (winElem_LeftClickButtonOk_28_10 != null)
            //    {
            //        winElem_LeftClickButtonOk_28_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_28_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "User-Defined TI" at (7,7)
            //    Console.WriteLine("LeftClick on RadioButton \"User-Defined TI\" at (7,7)");
            //    string xpath_LeftClickRadioButtonUserDefine_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"User-Defined TI\"][@AutomationId=\"UserDefineRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUserDefine_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUserDefine_7_7);
            //    if (winElem_LeftClickRadioButtonUserDefine_7_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonUserDefine_7_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUserDefine_7_7}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "TI" at (7,12)
            //    Console.WriteLine("LeftClick on RadioButton \"TI\" at (7,12)");
            //    string xpath_LeftClickRadioButtonTI_7_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"TI\"][@AutomationId=\"TIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTI_7_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTI_7_12);
            //    if (winElem_LeftClickRadioButtonTI_7_12 != null)
            //    {
            //        winElem_LeftClickRadioButtonTI_7_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTI_7_12}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "UUT Test" at (0,7)
            //    Console.WriteLine("LeftClick on RadioButton \"UUT Test\" at (0,7)");
            //    string xpath_LeftClickRadioButtonUUTTest_0_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"UUT Test\"][@AutomationId=\"UUTRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUUTTest_0_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUUTTest_0_7);
            //    if (winElem_LeftClickRadioButtonUUTTest_0_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonUUTTest_0_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUUTTest_0_7}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (109,11)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (109,11)");
            //    string xpath_LeftClickComboBox_109_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_109_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_109_11);
            //    if (winElem_LeftClickComboBox_109_11 != null)
            //    {
            //        winElem_LeftClickComboBox_109_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_109_11}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (73,11)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (73,11)");
            //    string xpath_LeftClickTextTIAutoTest_73_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_73_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_73_11);
            //    if (winElem_LeftClickTextTIAutoTest_73_11 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_73_11.Click();
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-1_2_1");
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_73_11}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (77,7)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (77,7)");
            //    string xpath_LeftClickButtonOk_77_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_77_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_77_7);
            //    if (winElem_LeftClickButtonOk_77_7 != null)
            //    {
            //        winElem_LeftClickButtonOk_77_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_77_7}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B1-1_2");
            //}
        }

        //[TestMethod]
        //public void TTIEditor_CreateNewTIByTypeTIRunTypePostTest()
        //{
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {
        //        // LeftClick on Button "Test Item" at (249,48)
        //        Console.WriteLine("LeftClick on Button \"Test Item\" at (249,48)");
        //        string xpath_LeftClickButtonTestItem_249_48 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Chroma ATE - MainPanel\"][@AutomationId=\"winMainPanel\"]/Button[@Name=\"Test Item\"][@AutomationId=\"TIEditor\"]";
        //        var winElem_LeftClickButtonTestItem_249_48 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonTestItem_249_48);
        //        if (winElem_LeftClickButtonTestItem_249_48 != null)
        //        {
        //            winElem_LeftClickButtonTestItem_249_48.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonTestItem_249_48}");
        //            return;
        //        }

        //        // LeftClick on RadioButton "New Test Item" at (7,8)
        //        Console.WriteLine("LeftClick on RadioButton \"New Test Item\" at (7,8)");
        //        string xpath_LeftClickRadioButtonNewTestIte_7_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/RadioButton[@Name=\"New Test Item\"][@AutomationId=\"rdoNew\"]";
        //        var winElem_LeftClickRadioButtonNewTestIte_7_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonNewTestIte_7_8);
        //        if (winElem_LeftClickRadioButtonNewTestIte_7_8 != null)
        //        {
        //            winElem_LeftClickRadioButtonNewTestIte_7_8.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonNewTestIte_7_8}");
        //            return;
        //        }


        //        // LeftClick on Button "Ok" at (28,10)
        //        Console.WriteLine("LeftClick on Button \"Ok\" at (28,10)");
        //        string xpath_LeftClickButtonOk_28_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]";
        //        var winElem_LeftClickButtonOk_28_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_28_10);
        //        if (winElem_LeftClickButtonOk_28_10 != null)
        //        {
        //            winElem_LeftClickButtonOk_28_10.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_28_10}");
        //            return;
        //        }


        //        // LeftClick on RadioButton "User-Defined TI" at (7,7)
        //        Console.WriteLine("LeftClick on RadioButton \"User-Defined TI\" at (7,7)");
        //        string xpath_LeftClickRadioButtonUserDefine_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"User-Defined TI\"][@AutomationId=\"UserDefineRdoBtn\"]";
        //        var winElem_LeftClickRadioButtonUserDefine_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUserDefine_7_7);
        //        if (winElem_LeftClickRadioButtonUserDefine_7_7 != null)
        //        {
        //            winElem_LeftClickRadioButtonUserDefine_7_7.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUserDefine_7_7}");
        //            return;
        //        }


        //        // LeftClick on RadioButton "TI" at (7,12)
        //        Console.WriteLine("LeftClick on RadioButton \"TI\" at (7,12)");
        //        string xpath_LeftClickRadioButtonTI_7_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"TI\"][@AutomationId=\"TIRdoBtn\"]";
        //        var winElem_LeftClickRadioButtonTI_7_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTI_7_12);
        //        if (winElem_LeftClickRadioButtonTI_7_12 != null)
        //        {
        //            winElem_LeftClickRadioButtonTI_7_12.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTI_7_12}");
        //            return;
        //        }


        //        // LeftClick on RadioButton "Post Test" at (8,7)
        //        Console.WriteLine("LeftClick on RadioButton \"Post Test\" at (8,7)");
        //        string xpath_LeftClickRadioButtonPostTest_8_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Post Test\"][@AutomationId=\"PostRdoBtn\"]";
        //        var winElem_LeftClickRadioButtonPostTest_8_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPostTest_8_7);
        //        if (winElem_LeftClickRadioButtonPostTest_8_7 != null)
        //        {
        //            winElem_LeftClickRadioButtonPostTest_8_7.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPostTest_8_7}");
        //            return;
        //        }


        //        // LeftClick on ComboBox "" at (109,11)
        //        Console.WriteLine("LeftClick on ComboBox \"\" at (109,11)");
        //        string xpath_LeftClickComboBox_109_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
        //        var winElem_LeftClickComboBox_109_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_109_11);
        //        if (winElem_LeftClickComboBox_109_11 != null)
        //        {
        //            winElem_LeftClickComboBox_109_11.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_109_11}");
        //            return;
        //        }


        //        // LeftClick on Text "TIAutoTest" at (73,11)
        //        Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (73,11)");
        //        string xpath_LeftClickTextTIAutoTest_73_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
        //        var winElem_LeftClickTextTIAutoTest_73_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_73_11);
        //        if (winElem_LeftClickTextTIAutoTest_73_11 != null)
        //        {
        //            winElem_LeftClickTextTIAutoTest_73_11.Click();
        //            System.Threading.Thread.Sleep(2000);
        //            AutoUIExtension.TakeScreenshotPNGformat(true, "B1-1_3_1");
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_73_11}");
        //            return;
        //        }


        //        // LeftClick on Button "Ok" at (77,7)
        //        Console.WriteLine("LeftClick on Button \"Ok\" at (77,7)");
        //        string xpath_LeftClickButtonOk_77_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
        //        var winElem_LeftClickButtonOk_77_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_77_7);
        //        if (winElem_LeftClickButtonOk_77_7 != null)
        //        {
        //            winElem_LeftClickButtonOk_77_7.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_77_7}");
        //            return;
        //        }



        //        bSuccess = true;
        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //        System.Threading.Thread.Sleep(2000);
        //        AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B1-1_3");
        //    }
        //}

        [TestMethod("B1-1_3")]
        [TestCategory("檔案操作(B1)")]
        public void TIEditor_CreateNewTIByTypeSubTIRunTypeUUTTest()
        {
            //// LeftClick on Text "File"
            //Console.WriteLine("LeftClick on Text \"File\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            //// LeftClick on Text "New"
            //Console.WriteLine("LeftClick on Text \"New\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "Sub-TI"
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetRdoBtnElement("Sub-TI")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Sub-TI]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetBtnElement("Ok")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Ok]", ClickType.LeftClick);

            //string TIContextInfo = PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("TitleTxtBlk")).Text;
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new Sub TI is opened by verify the TI context label
            "Sub_TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Button "Test Item" at (249,48)
            //    Console.WriteLine("LeftClick on Button \"Test Item\" at (249,48)");
            //    string xpath_LeftClickButtonTestItem_249_48 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Chroma ATE - MainPanel\"][@AutomationId=\"winMainPanel\"]/Button[@Name=\"Test Item\"][@AutomationId=\"TIEditor\"]";
            //    var winElem_LeftClickButtonTestItem_249_48 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonTestItem_249_48);
            //    if (winElem_LeftClickButtonTestItem_249_48 != null)
            //    {
            //        winElem_LeftClickButtonTestItem_249_48.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonTestItem_249_48}");
            //        return;
            //    }

            //    // LeftClick on RadioButton "New Test Item" at (7,8)
            //    Console.WriteLine("LeftClick on RadioButton \"New Test Item\" at (7,8)");
            //    string xpath_LeftClickRadioButtonNewTestIte_7_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/RadioButton[@Name=\"New Test Item\"][@AutomationId=\"rdoNew\"]";
            //    var winElem_LeftClickRadioButtonNewTestIte_7_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonNewTestIte_7_8);
            //    if (winElem_LeftClickRadioButtonNewTestIte_7_8 != null)
            //    {
            //        winElem_LeftClickRadioButtonNewTestIte_7_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonNewTestIte_7_8}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (28,10)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (28,10)");
            //    string xpath_LeftClickButtonOk_28_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]";
            //    var winElem_LeftClickButtonOk_28_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_28_10);
            //    if (winElem_LeftClickButtonOk_28_10 != null)
            //    {
            //        winElem_LeftClickButtonOk_28_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_28_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "User-Defined TI" at (7,7)
            //    Console.WriteLine("LeftClick on RadioButton \"User-Defined TI\" at (7,7)");
            //    string xpath_LeftClickRadioButtonUserDefine_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"User-Defined TI\"][@AutomationId=\"UserDefineRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUserDefine_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUserDefine_7_7);
            //    if (winElem_LeftClickRadioButtonUserDefine_7_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonUserDefine_7_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUserDefine_7_7}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Sub-TI" at (0,5)
            //    Console.WriteLine("LeftClick on RadioButton \"Sub-TI\" at (0,5)");
            //    string xpath_LeftClickRadioButtonSubTI_0_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Sub-TI\"][@AutomationId=\"SubTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonSubTI_0_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonSubTI_0_5);
            //    if (winElem_LeftClickRadioButtonSubTI_0_5 != null)
            //    {
            //        winElem_LeftClickRadioButtonSubTI_0_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonSubTI_0_5}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "UUT Test" at (7,11)
            //    Console.WriteLine("LeftClick on RadioButton \"UUT Test\" at (7,11)");
            //    string xpath_LeftClickRadioButtonUUTTest_7_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"UUT Test\"][@AutomationId=\"UUTRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUUTTest_7_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUUTTest_7_11);
            //    if (winElem_LeftClickRadioButtonUUTTest_7_11 != null)
            //    {
            //        winElem_LeftClickRadioButtonUUTTest_7_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUUTTest_7_11}");
            //        return;
            //    }



            //    // LeftClick on ComboBox "" at (109,11)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (109,11)");
            //    string xpath_LeftClickComboBox_109_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_109_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_109_11);
            //    if (winElem_LeftClickComboBox_109_11 != null)
            //    {
            //        winElem_LeftClickComboBox_109_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_109_11}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (73,11)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (73,11)");
            //    string xpath_LeftClickTextTIAutoTest_73_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_73_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_73_11);
            //    if (winElem_LeftClickTextTIAutoTest_73_11 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_73_11.Click();
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-1_4_1");
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_73_11}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (77,7)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (77,7)");
            //    string xpath_LeftClickButtonOk_77_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_77_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_77_7);
            //    if (winElem_LeftClickButtonOk_77_7 != null)
            //    {
            //        winElem_LeftClickButtonOk_77_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_77_7}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B1-1_4");
            //}
        }

        [TestMethod("B1-1_4")]
        [TestCategory("檔案操作(B1)")]
        public void TIEditor_CreateNewTIByTypeThreadTIRunTypeUUTTest()
        {
            //// LeftClick on Text "File"
            //Console.WriteLine("LeftClick on Text \"File\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            //// LeftClick on Text "New"
            //Console.WriteLine("LeftClick on Text \"New\"");
            //CurrentDriver.GetElementFromWebElement(By.XPath("(//MenuItem)[1]")).LeftClick();

            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");


            // LeftClick on RadioButton "Thread-TI"
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetRdoBtnElement("Thread-TI")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Thread-TI]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetBtnElement("Ok")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Ok]", ClickType.LeftClick);

            //string TIContextInfo = PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("TitleTxtBlk")).Text;
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new Thread TI is opened by verify the TI context label
            "Thread_TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);

            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Button "Test Item" at (249,48)
            //    Console.WriteLine("LeftClick on Button \"Test Item\" at (249,48)");
            //    string xpath_LeftClickButtonTestItem_249_48 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Chroma ATE - MainPanel\"][@AutomationId=\"winMainPanel\"]/Button[@Name=\"Test Item\"][@AutomationId=\"TIEditor\"]";
            //    var winElem_LeftClickButtonTestItem_249_48 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonTestItem_249_48);
            //    if (winElem_LeftClickButtonTestItem_249_48 != null)
            //    {
            //        winElem_LeftClickButtonTestItem_249_48.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonTestItem_249_48}");
            //        return;
            //    }

            //    // LeftClick on RadioButton "New Test Item" at (7,8)
            //    Console.WriteLine("LeftClick on RadioButton \"New Test Item\" at (7,8)");
            //    string xpath_LeftClickRadioButtonNewTestIte_7_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/RadioButton[@Name=\"New Test Item\"][@AutomationId=\"rdoNew\"]";
            //    var winElem_LeftClickRadioButtonNewTestIte_7_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonNewTestIte_7_8);
            //    if (winElem_LeftClickRadioButtonNewTestIte_7_8 != null)
            //    {
            //        winElem_LeftClickRadioButtonNewTestIte_7_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonNewTestIte_7_8}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (28,10)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (28,10)");
            //    string xpath_LeftClickButtonOk_28_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]";
            //    var winElem_LeftClickButtonOk_28_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_28_10);
            //    if (winElem_LeftClickButtonOk_28_10 != null)
            //    {
            //        winElem_LeftClickButtonOk_28_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_28_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "User-Defined TI" at (7,7)
            //    Console.WriteLine("LeftClick on RadioButton \"User-Defined TI\" at (7,7)");
            //    string xpath_LeftClickRadioButtonUserDefine_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"User-Defined TI\"][@AutomationId=\"UserDefineRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUserDefine_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUserDefine_7_7);
            //    if (winElem_LeftClickRadioButtonUserDefine_7_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonUserDefine_7_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUserDefine_7_7}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Thread-TI" at (10,13)
            //    Console.WriteLine("LeftClick on RadioButton \"Thread-TI\" at (10,13)");
            //    string xpath_LeftClickRadioButtonThreadTI_10_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Thread-TI\"][@AutomationId=\"ThreadTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonThreadTI_10_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonThreadTI_10_13);
            //    if (winElem_LeftClickRadioButtonThreadTI_10_13 != null)
            //    {
            //        winElem_LeftClickRadioButtonThreadTI_10_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonThreadTI_10_13}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "UUT Test" at (5,11)
            //    Console.WriteLine("LeftClick on RadioButton \"UUT Test\" at (5,11)");
            //    string xpath_LeftClickRadioButtonUUTTest_5_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"UUT Test\"][@AutomationId=\"UUTRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUUTTest_5_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUUTTest_5_11);
            //    if (winElem_LeftClickRadioButtonUUTTest_5_11 != null)
            //    {
            //        winElem_LeftClickRadioButtonUUTTest_5_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUUTTest_5_11}");
            //        return;
            //    }



            //    // LeftClick on ComboBox "" at (109,11)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (109,11)");
            //    string xpath_LeftClickComboBox_109_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_109_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_109_11);
            //    if (winElem_LeftClickComboBox_109_11 != null)
            //    {
            //        winElem_LeftClickComboBox_109_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_109_11}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (73,11)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (73,11)");
            //    string xpath_LeftClickTextTIAutoTest_73_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_73_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_73_11);
            //    if (winElem_LeftClickTextTIAutoTest_73_11 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_73_11.Click();
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-1_5_1");
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_73_11}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (77,7)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (77,7)");
            //    string xpath_LeftClickButtonOk_77_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"][@Name=\"Chroma ATS IDE\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_77_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_77_7);
            //    if (winElem_LeftClickButtonOk_77_7 != null)
            //    {
            //        winElem_LeftClickButtonOk_77_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_77_7}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B1-1_5");
            //}
        }


        [TestMethod("B1-2_1")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-2_1")]
        //B1-2_1
        public void TIEditor_OpenTIByTypeTIRunTypePreTest(string TIName)
        {
            //// ti name
            //TIName = "B1-2_1";

            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "TI", "PreTest", TIName + ".tix");

            //string baseDirectory = "C:\\Program Files (x86)\\Chroma\\PowerPro5";
            //TIFilePath = Path.Combine(PowerPro5Config.ReleaseFolder, "TestItem", "UserDefined", "TI", "PreTest", TIName + ".tix");
            TIFilePath = GetTIFilePath(TIName, runType: TestItemRunType.Pre);

            //// Open New TI (TI, Pre Test)
            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "Pre Test"
            //Console.WriteLine("LeftClick on RadioButton \"Pre Test\"");
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetRdoBtnElement("Pre Test")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Pre Test]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //Console.WriteLine("LeftClick on Button \"Ok\"");
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetBtnElement("Ok")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Ok]", ClickType.LeftClick);

            // Save the TI
            SaveAsNewTI(TIName);
            //Thread.Sleep(2000);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            //PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("CloseButton")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[CloseButton]", ClickType.LeftClick);

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, TestItemType.TI, TestItemRunType.Pre);

            //string TIContextInfo = PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("TitleTxtBlk")).Text;
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new TI is opened by verify the TI context label
            "TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (16,10)
            //    Console.WriteLine("LeftClick on Text \"File\" at (16,10)");
            //    string xpath_LeftClickTextFile_16_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_16_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_16_10);
            //    if (winElem_LeftClickTextFile_16_10 != null)
            //    {
            //        winElem_LeftClickTextFile_16_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_16_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (15,5)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (15,5)");
            //    string xpath_LeftClickTextOpen_15_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_15_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_15_5);
            //    if (winElem_LeftClickTextOpen_15_5 != null)
            //    {
            //        winElem_LeftClickTextOpen_15_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_15_5}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Pre Test" at (10,9)
            //    Console.WriteLine("LeftClick on RadioButton \"Pre Test\" at (10,9)");
            //    string xpath_LeftClickRadioButtonPreTest_10_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Pre Test\"][@AutomationId=\"PreRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonPreTest_10_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPreTest_10_9);
            //    if (winElem_LeftClickRadioButtonPreTest_10_9 != null)
            //    {
            //        winElem_LeftClickRadioButtonPreTest_10_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPreTest_10_9}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (41,9)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (41,9)");
            //    string xpath_LeftClickComboBox_41_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_41_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_41_9);
            //    if (winElem_LeftClickComboBox_41_9 != null)
            //    {
            //        winElem_LeftClickComboBox_41_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_41_9}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (53,12)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (53,12)");
            //    string xpath_LeftClickTextTIAutoTest_53_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_53_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_53_12);
            //    if (winElem_LeftClickTextTIAutoTest_53_12 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_53_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_53_12}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0" at (196,15)
            //    Console.WriteLine("LeftClick on Custom \"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\" at (196,15)");
            //    string xpath_LeftClickCustomB12ItemUse_196_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2\"]/Custom[@Name=\"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\"][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12ItemUse_196_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12ItemUse_196_15);
            //    if (winElem_LeftClickCustomB12ItemUse_196_15 != null)
            //    {
            //        winElem_LeftClickCustomB12ItemUse_196_15.Click();
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_1_1");
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12ItemUse_196_15}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (29,10)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (29,10)");
            //    string xpath_LeftClickButtonOk_29_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_29_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_29_10);
            //    if (winElem_LeftClickButtonOk_29_10 != null)
            //    {
            //        winElem_LeftClickButtonOk_29_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_29_10}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_1");

            //}
        }

        [TestMethod("B1-2_2")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-2_2")]
        //B1-2_2
        public void TIEditor_OpenTIByTypeTIRunTypeUUTTest(string TIName)
        {
            //// ti name
            //string TIName = "B1-2_2";

            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "TI", "UUTTest", TIName + ".tix");

            //string baseDirectory = "C:\\Program Files (x86)\\Chroma\\PowerPro5";
            //TIFilePath = Path.Combine(PowerPro5Config.ReleaseFolder, "TestItem", "UserDefined", "TI", "UUTTest", TIName + ".tix");
            TIFilePath = GetTIFilePath(TIName, runType: TestItemRunType.UUT);

            //// Open New TI (TI, UUT Test)
            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");


            // LeftClick on RadioButton "UUT Test"
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetRdoBtnElement("UUT Test")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, UUT Test]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
            //            .GetBtnElement("Ok")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[New Test Item, Ok]", ClickType.LeftClick);

            // Save the TI
            SaveAsNewTI(TIName);
            //Thread.Sleep(2000);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            //PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("CloseButton")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[CloseButton]", ClickType.LeftClick);

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, TestItemType.TI, TestItemRunType.UUT);

            //string TIContextInfo = PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("TitleTxtBlk")).Text;
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new TI is opened by verify the TI context label
            "TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (11,6)
            //    Console.WriteLine("LeftClick on Text \"File\" at (11,6)");
            //    string xpath_LeftClickTextFile_11_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_11_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_11_6);
            //    if (winElem_LeftClickTextFile_11_6 != null)
            //    {
            //        winElem_LeftClickTextFile_11_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_11_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (14,8)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (14,8)");
            //    string xpath_LeftClickTextOpen_14_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_14_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_14_8);
            //    if (winElem_LeftClickTextOpen_14_8 != null)
            //    {
            //        winElem_LeftClickTextOpen_14_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_14_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "UUT Test" at (5,12)
            //    Console.WriteLine("LeftClick on RadioButton \"UUT Test\" at (5,12)");
            //    string xpath_LeftClickRadioButtonUUTTest_5_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"UUT Test\"][@AutomationId=\"UUTRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUUTTest_5_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUUTTest_5_12);
            //    if (winElem_LeftClickRadioButtonUUTTest_5_12 != null)
            //    {
            //        winElem_LeftClickRadioButtonUUTTest_5_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUUTTest_5_12}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (104,17)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (104,17)");
            //    string xpath_LeftClickComboBox_104_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_104_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_104_17);
            //    if (winElem_LeftClickComboBox_104_17 != null)
            //    {
            //        winElem_LeftClickComboBox_104_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_104_17}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (55,6)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (55,6)");
            //    string xpath_LeftClickTextTIAutoTest_55_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_55_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_55_6);
            //    if (winElem_LeftClickTextTIAutoTest_55_6 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_55_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_55_6}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0" at (71,7)
            //    Console.WriteLine("LeftClick on Custom \"B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0\" at (71,7)");
            //    string xpath_LeftClickCustomB12_2ItemU_71_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2_2\"]/Custom[starts-with(@Name,\"B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0\")][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12_2ItemU_71_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12_2ItemU_71_7);
            //    if (winElem_LeftClickCustomB12_2ItemU_71_7 != null)
            //    {
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_2_1");
            //        winElem_LeftClickCustomB12_2ItemU_71_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12_2ItemU_71_7}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (62,12)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (62,12)");
            //    string xpath_LeftClickButtonOk_62_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_62_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_62_12);
            //    if (winElem_LeftClickButtonOk_62_12 != null)
            //    {
            //        winElem_LeftClickButtonOk_62_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_62_12}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_2");
            //}
        }

        [TestMethod("B1-2_3")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-2_3")]
        //B1-2_3
        public void TIEditor_OpenTIByTypeTIRunTypePostTest(string TIName)
        {
            //// ti name
            //string TIName = "B1-2_3";

            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "TI", "PostTest", TIName + ".tix");

            //string baseDirectory = "C:\\Program Files (x86)\\Chroma\\PowerPro5";
            //string TIFilePath = Path.Combine(baseDirectory, "TestItem", "UserDefined", "TI", "PostTest", TIName + ".tix");
            TIFilePath = GetTIFilePath(TIName, runType: TestItemRunType.Post);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            //// Open New TI (TI, Post Test)
            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "Post Test"
            //Console.WriteLine("LeftClick on RadioButton \"Post Test\"");
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("PostRdoBtn")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[LoginDialog, PostRdoBtn]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            Console.WriteLine("LeftClick on Button \"Ok\"");
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("OkBtn")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[LoginDialog, OkBtn]", ClickType.LeftClick);

            // Save the TI
            SaveAsNewTI(TIName);
            Thread.Sleep(2000);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
            //                                        MobileBy.AccessibilityId("CloseButton")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[CloseButton]", ClickType.LeftClick);

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, TestItemType.TI, TestItemRunType.Post);

            //string TIContextInfo = CurrentDriver.GetExtendedElementBySingleWithRetry(PP5By.ClassName("PGGridAeraView"))
            //                                    .GetFirstTextContent();
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new TI is opened by verify the TI context label
            "TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (19,7)
            //    Console.WriteLine("LeftClick on Text \"File\" at (19,7)");
            //    string xpath_LeftClickTextFile_19_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_19_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_19_7);
            //    if (winElem_LeftClickTextFile_19_7 != null)
            //    {
            //        winElem_LeftClickTextFile_19_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_19_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (21,9)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (21,9)");
            //    string xpath_LeftClickTextOpen_21_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_21_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_21_9);
            //    if (winElem_LeftClickTextOpen_21_9 != null)
            //    {
            //        winElem_LeftClickTextOpen_21_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_21_9}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "User-Defined TI" at (14,7)
            //    Console.WriteLine("LeftClick on RadioButton \"User-Defined TI\" at (14,7)");
            //    string xpath_LeftClickRadioButtonUserDefine_14_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"User-Defined TI\"][@AutomationId=\"UserDefineRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUserDefine_14_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUserDefine_14_7);
            //    if (winElem_LeftClickRadioButtonUserDefine_14_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonUserDefine_14_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUserDefine_14_7}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "TI" at (9,14)
            //    Console.WriteLine("LeftClick on RadioButton \"TI\" at (9,14)");
            //    string xpath_LeftClickRadioButtonTI_9_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"TI\"][@AutomationId=\"TIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTI_9_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTI_9_14);
            //    if (winElem_LeftClickRadioButtonTI_9_14 != null)
            //    {
            //        winElem_LeftClickRadioButtonTI_9_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTI_9_14}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Post Test" at (5,10)
            //    Console.WriteLine("LeftClick on RadioButton \"Post Test\" at (5,10)");
            //    string xpath_LeftClickRadioButtonPostTest_5_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Post Test\"][@AutomationId=\"PostRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonPostTest_5_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPostTest_5_10);
            //    if (winElem_LeftClickRadioButtonPostTest_5_10 != null)
            //    {
            //        winElem_LeftClickRadioButtonPostTest_5_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPostTest_5_10}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (145,4)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (145,4)");
            //    string xpath_LeftClickComboBox_145_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_145_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_145_4);
            //    if (winElem_LeftClickComboBox_145_4 != null)
            //    {
            //        winElem_LeftClickComboBox_145_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_145_4}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (77,8)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (77,8)");
            //    string xpath_LeftClickTextTIAutoTest_77_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_77_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_77_8);
            //    if (winElem_LeftClickTextTIAutoTest_77_8 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_77_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_77_8}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2_3, Item: User-TI-TIAutoTest-B1-2_3, Column Display Index: 0" at (219,11)
            //    Console.WriteLine("LeftClick on Custom \"B1-2_3, Item: User-TI-TIAutoTest-B1-2_3, Column Display Index: 0\" at (219,11)");
            //    string xpath_LeftClickCustomB12_3ItemU_219_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2_3\"]/Custom[starts-with(@Name,\"B1-2_3, Item: User-TI-TIAutoTest-B1-2_3, Column Display Index: 0\")][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12_3ItemU_219_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12_3ItemU_219_11);
            //    if (winElem_LeftClickCustomB12_3ItemU_219_11 != null)
            //    {
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_3_1");
            //        winElem_LeftClickCustomB12_3ItemU_219_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12_3ItemU_219_11}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (77,7)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (77,7)");
            //    string xpath_LeftClickButtonOk_77_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_77_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_77_7);
            //    if (winElem_LeftClickButtonOk_77_7 != null)
            //    {
            //        winElem_LeftClickButtonOk_77_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_77_7}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_3");
            //}
        }

        [TestMethod("B1-2_4")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-2_4")]
        //B1-2_4
        public void TIEditor_OpenTIByTypeSubTIRunTypeUUTTest(string TIName)
        {            
            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "SubTI", TIName + ".tix");

            //string baseDirectory = "C:\\Program Files (x86)\\Chroma\\PowerPro5";
            //string TIFilePath = Path.Combine(baseDirectory, "TestItem", "UserDefined", "SubTI", TIName + ".tix");
            TIFilePath = GetTIFilePath(TIName, itemType: TestItemType.SubTI);

            //// Open New TI (SubTI)
            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "Sub-TI"
            //Console.WriteLine("LeftClick on RadioButton \"Sub-TI\"");
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("SubTIRdoBtn")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[LoginDialog, SubTIRdoBtn]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //Console.WriteLine("LeftClick on Button \"Ok\"");
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("OkBtn")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[LoginDialog, OkBtn]", ClickType.LeftClick);

            // Save the TI
            SaveAsNewTI(TIName);
            Thread.Sleep(2000);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            PP5IDEWindow.PerformClick("/ById[CloseButton]", ClickType.LeftClick);

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, TestItemType.SubTI, TestItemRunType.UUT);

            //string TIContextInfo = CurrentDriver.GetExtendedElementBySingleWithRetry(PP5By.ClassName("PGGridAeraView"))
            //                                    .GetFirstTextContent();
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new TI is opened by verify the TI context label
            "Sub_TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (11,10)
            //    Console.WriteLine("LeftClick on Text \"File\" at (11,10)");
            //    string xpath_LeftClickTextFile_11_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_11_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_11_10);
            //    if (winElem_LeftClickTextFile_11_10 != null)
            //    {
            //        winElem_LeftClickTextFile_11_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_11_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (21,9)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (21,9)");
            //    string xpath_LeftClickTextOpen_21_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_21_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_21_9);
            //    if (winElem_LeftClickTextOpen_21_9 != null)
            //    {
            //        winElem_LeftClickTextOpen_21_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_21_9}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Sub-TI" at (5,10)
            //    Console.WriteLine("LeftClick on RadioButton \"Sub-TI\" at (5,10)");
            //    string xpath_LeftClickRadioButtonSubTI_5_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Sub-TI\"][@AutomationId=\"SubTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonSubTI_5_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonSubTI_5_10);
            //    if (winElem_LeftClickRadioButtonSubTI_5_10 != null)
            //    {
            //        winElem_LeftClickRadioButtonSubTI_5_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonSubTI_5_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "UUT Test" at (6,11)
            //    Console.WriteLine("LeftClick on RadioButton \"UUT Test\" at (6,11)");
            //    string xpath_LeftClickRadioButtonUUTTest_6_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"UUT Test\"][@AutomationId=\"UUTRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUUTTest_6_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUUTTest_6_11);
            //    if (winElem_LeftClickRadioButtonUUTTest_6_11 != null)
            //    {
            //        winElem_LeftClickRadioButtonUUTTest_6_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUUTTest_6_11}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (105,10)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (105,10)");
            //    string xpath_LeftClickComboBox_105_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_105_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_105_10);
            //    if (winElem_LeftClickComboBox_105_10 != null)
            //    {
            //        winElem_LeftClickComboBox_105_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_105_10}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (81,5)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (81,5)");
            //    string xpath_LeftClickTextTIAutoTest_81_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_81_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_81_5);
            //    if (winElem_LeftClickTextTIAutoTest_81_5 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_81_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_81_5}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2_4, Item: User-Sub_TI-TIAutoTest-B1-2_4, Column Display Inde" at (193,8)
            //    Console.WriteLine("LeftClick on Custom \"B1-2_4, Item: User-Sub_TI-TIAutoTest-B1-2_4, Column Display Inde\" at (193,8)");
            //    string xpath_LeftClickCustomB12_4ItemU_193_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-Sub_TI-TIAutoTest-B1-2_4\"]/Custom[starts-with(@Name,\"B1-2_4, Item: User-Sub_TI-TIAutoTest-B1-2_4, Column Display Inde\")][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12_4ItemU_193_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12_4ItemU_193_8);
            //    if (winElem_LeftClickCustomB12_4ItemU_193_8 != null)
            //    {
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_4_1");
            //        winElem_LeftClickCustomB12_4ItemU_193_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12_4ItemU_193_8}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (27,13)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (27,13)");
            //    string xpath_LeftClickButtonOk_27_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_27_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_27_13);
            //    if (winElem_LeftClickButtonOk_27_13 != null)
            //    {
            //        winElem_LeftClickButtonOk_27_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_27_13}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_4");
            //}
        }

        [TestMethod("B1-2_5")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-2_5")]
        //B1-2_5
        public void TIEditor_OpenTIByTypeThreadTIRunTypeUUTTest(string TIName)
        {
            //// ti name
            //string TIName = "B1-2_5";

            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "ThreadTI", TIName + ".tix");

            //string baseDirectory = "C:\\Program Files (x86)\\Chroma\\PowerPro5";
            //string TIFilePath = Path.Combine(baseDirectory, "TestItem", "UserDefined", "ThreadTI", TIName + ".tix");
            TIFilePath = GetTIFilePath(TIName, itemType: TestItemType.ThreadTI);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            //// Open New TI (ThreadTI)
            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "Thread-TI"
            //Console.WriteLine("LeftClick on RadioButton \"Thread-TI\"");
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("ThreadTIRdoBtn")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[LoginDialog, ThreadTIRdoBtn]", ClickType.LeftClick);

            // LeftClick on Button "Ok"
            //Console.WriteLine("LeftClick on Button \"Ok\"");
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("OkBtn")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[LoginDialog, OkBtn]", ClickType.LeftClick);

            // Save the TI
            SaveAsNewTI(TIName);
            Thread.Sleep(2000);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
            //                                        MobileBy.AccessibilityId("CloseButton")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[CloseButton]", ClickType.LeftClick);

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, TestItemType.ThreadTI, TestItemRunType.UUT);

            //string TIContextInfo = CurrentDriver.GetExtendedElementBySingleWithRetry(PP5By.ClassName("PGGridAeraView"))
            //                                    .GetFirstTextContent();
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new TI is opened by verify the TI context label
            "Thread_TI".ShouldEqualTo(TIContextInfo.Split('-')[1]);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (20,6)
            //    Console.WriteLine("LeftClick on Text \"File\" at (20,6)");
            //    string xpath_LeftClickTextFile_20_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_20_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_20_6);
            //    if (winElem_LeftClickTextFile_20_6 != null)
            //    {
            //        winElem_LeftClickTextFile_20_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_20_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (50,12)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (50,12)");
            //    string xpath_LeftClickTextOpen_50_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_50_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_50_12);
            //    if (winElem_LeftClickTextOpen_50_12 != null)
            //    {
            //        winElem_LeftClickTextOpen_50_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_50_12}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Thread-TI" at (3,5)
            //    Console.WriteLine("LeftClick on RadioButton \"Thread-TI\" at (3,5)");
            //    string xpath_LeftClickRadioButtonThreadTI_3_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Thread-TI\"][@AutomationId=\"ThreadTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonThreadTI_3_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonThreadTI_3_5);
            //    if (winElem_LeftClickRadioButtonThreadTI_3_5 != null)
            //    {
            //        winElem_LeftClickRadioButtonThreadTI_3_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonThreadTI_3_5}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "UUT Test" at (15,7)
            //    Console.WriteLine("LeftClick on RadioButton \"UUT Test\" at (15,7)");
            //    string xpath_LeftClickRadioButtonUUTTest_15_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"UUT Test\"][@AutomationId=\"UUTRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonUUTTest_15_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonUUTTest_15_7);
            //    if (winElem_LeftClickRadioButtonUUTTest_15_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonUUTTest_15_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonUUTTest_15_7}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (124,14)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (124,14)");
            //    string xpath_LeftClickComboBox_124_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_124_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_124_14);
            //    if (winElem_LeftClickComboBox_124_14 != null)
            //    {
            //        winElem_LeftClickComboBox_124_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_124_14}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (75,8)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (75,8)");
            //    string xpath_LeftClickTextTIAutoTest_75_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_75_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_75_8);
            //    if (winElem_LeftClickTextTIAutoTest_75_8 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_75_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_75_8}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2_5, Item: User-Thread_TI-TIAutoTest-B1-2_5, Column Display I" at (180,4)
            //    Console.WriteLine("LeftClick on Custom \"B1-2_5, Item: User-Thread_TI-TIAutoTest-B1-2_5, Column Display I\" at (180,4)");
            //    string xpath_LeftClickCustomB12_5ItemU_180_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-Thread_TI-TIAutoTest-B1-2_5\"]/Custom[starts-with(@Name,\"B1-2_5, Item: User-Thread_TI-TIAutoTest-B1-2_5, Column Display I\")][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12_5ItemU_180_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12_5ItemU_180_4);
            //    if (winElem_LeftClickCustomB12_5ItemU_180_4 != null)
            //    {
            //        System.Threading.Thread.Sleep(2000);
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_5_1");
            //        winElem_LeftClickCustomB12_5ItemU_180_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12_5ItemU_180_4}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (66,15)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (66,15)");
            //    string xpath_LeftClickButtonOk_66_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_66_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_66_15);
            //    if (winElem_LeftClickButtonOk_66_15 != null)
            //    {
            //        winElem_LeftClickButtonOk_66_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_66_15}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-2_5_1");
            //}
        }

        //save file
        //B1-3
        [TestMethod("B1-3")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-3")]
        public void TIEditor_SaveTI(string TIName)
        {
            //// ti name
            //string TIName = "B1-3";

            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "TI", "UUTTest", TIName + ".tix");

            //string baseDirectory = "C:\\Program Files (x86)\\Chroma\\PowerPro5";
            //string TIFilePath = Path.Combine(baseDirectory, "TestItem", "UserDefined", "TI", "UUTTest", TIName + ".tix");
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);
            
            SaveAsNewTI(TIName);

            //// Edit the TI (Add a new Temp variable: Showname: "a", CallName: "a", Data Type: "Float" ), then Save the TI
            // LeftClick on RadioButton "Temp"
            Console.WriteLine("LeftClick on RadioButton \"Temp\"");
            VariableTabNavi(VariableTabType.Temp);

            GetCellBy("TmpGrid", 0, "Show Name").DoubleClick();

            // Input "a" in Show Name cell
            GetCellBy("TmpGrid", 0, "Show Name").LeftClick();
            GetCellBy("TmpGrid", 0, "Show Name").SendKeys("a");

            // Input "a" in Call Name cell
            GetCellBy("TmpGrid", 0, "Call Name").LeftClick();
            GetCellBy("TmpGrid", 0, "Call Name").SendKeys("a");

            // Input "Float" in Data Type cell
            GetCellBy("TmpGrid", 0, "Data Type").LeftClick();
            GetCellBy("TmpGrid", 0, "Data Type").SendKeys("Float");
            GetCellBy("TmpGrid", 0, "Data Type").LeftClick();

            // LeftClick on Text "File" > "Save"
            MenuSelect("File", "Save");

            //// Close TI, reopen it
            // Left Click TI window Close Button
            CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
                                                    MobileBy.AccessibilityId("CloseButton")).LeftClick();

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName);

            // Check edited values are same
            Assert.AreEqual("a", GetCellValue("TmpGrid", 0, "Show Name"));
            Assert.AreEqual("a", GetCellValue("TmpGrid", 0, "Call Name"));
            Assert.AreEqual("Float", GetCellValue("TmpGrid", 0, "Data Type"));

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (7,10)
            //    Console.WriteLine("LeftClick on Text \"File\" at (7,10)");
            //    string xpath_LeftClickTextFile_7_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_7_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_7_10);
            //    if (winElem_LeftClickTextFile_7_10 != null)
            //    {
            //        winElem_LeftClickTextFile_7_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_7_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (20,9)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (20,9)");
            //    string xpath_LeftClickTextOpen_20_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_20_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_20_9);
            //    if (winElem_LeftClickTextOpen_20_9 != null)
            //    {
            //        winElem_LeftClickTextOpen_20_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_20_9}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Thread-TI" at (2,10)
            //    Console.WriteLine("LeftClick on RadioButton \"Thread-TI\" at (2,10)");
            //    string xpath_LeftClickRadioButtonThreadTI_2_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Thread-TI\"][@AutomationId=\"ThreadTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonThreadTI_2_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonThreadTI_2_10);
            //    if (winElem_LeftClickRadioButtonThreadTI_2_10 != null)
            //    {
            //        winElem_LeftClickRadioButtonThreadTI_2_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonThreadTI_2_10}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (136,8)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (136,8)");
            //    string xpath_LeftClickComboBox_136_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_136_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_136_8);
            //    if (winElem_LeftClickComboBox_136_8 != null)
            //    {
            //        winElem_LeftClickComboBox_136_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_136_8}");
            //        return;
            //    }



            //    // LeftClick on Text "TIAutoTest" at (47,7)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (47,7)");
            //    string xpath_LeftClickTextTIAutoTest_47_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_47_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_47_7);
            //    if (winElem_LeftClickTextTIAutoTest_47_7 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_47_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_47_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (16,19)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (16,19)");
            //    string xpath_LeftClickTextOk_16_19 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_16_19 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_16_19);
            //    if (winElem_LeftClickTextOk_16_19 != null)
            //    {
            //        winElem_LeftClickTextOk_16_19.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_16_19}");
            //        return;
            //    }


            //    // LeftClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C" at (102,6)
            //    Console.WriteLine("LeftClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\" at (102,6)");
            //    string xpath_LeftClickCustomconditionI_102_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomconditionI_102_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomconditionI_102_6);
            //    if (winElem_LeftClickCustomconditionI_102_6 != null)
            //    {
            //        winElem_LeftClickCustomconditionI_102_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomconditionI_102_6}");
            //        return;
            //    }



            //    // LeftDblClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C" at (128,10)
            //    Console.WriteLine("LeftDblClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\" at (128,10)");
            //    string xpath_LeftDblClickCustomconditionI_128_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomconditionI_128_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomconditionI_128_10);
            //    if (winElem_LeftDblClickCustomconditionI_128_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomconditionI_128_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomconditionI_128_10}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""name"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"name\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftDblClickCustomconditionI_128_10.SendKeys("name");


            //    // LeftClick on Custom "temp,result,condition, Item: Chroma.TestItemEditor.ComposedEleme" at (178,11)
            //    Console.WriteLine("LeftClick on Custom \"temp,result,condition, Item: Chroma.TestItemEditor.ComposedEleme\" at (178,11)");
            //    string xpath_LeftClickCustomtempresult_178_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"temp,result,condition, Item: Chroma.TestItemEditor.ComposedEleme\")][@AutomationId=\"DisplayedParameters\"]";
            //    var winElem_LeftClickCustomtempresult_178_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomtempresult_178_11);
            //    if (winElem_LeftClickCustomtempresult_178_11 != null)
            //    {
            //        winElem_LeftClickCustomtempresult_178_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomtempresult_178_11}");
            //        return;
            //    }


            //    // LeftDblClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (34,14)
            //    Console.WriteLine("LeftDblClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (34,14)");
            //    string xpath_LeftDblClickCustomconditionI_34_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftDblClickCustomconditionI_34_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomconditionI_34_14);
            //    if (winElem_LeftDblClickCustomconditionI_34_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomconditionI_34_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomconditionI_34_14}");
            //        return;
            //    }


            //    // LeftClick on Text "name" at (24,8)
            //    Console.WriteLine("LeftClick on Text \"name\" at (24,8)");
            //    string xpath_LeftClickTextname_24_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"name\"]/Text[@ClassName=\"TextBlock\"][@Name=\"name\"]";
            //    var winElem_LeftClickTextname_24_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextname_24_8);
            //    if (winElem_LeftClickTextname_24_8 != null)
            //    {
            //        winElem_LeftClickTextname_24_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextname_24_8}");
            //        return;
            //    }


            //    // LeftClick on Text "File" at (15,10)
            //    Console.WriteLine("LeftClick on Text \"File\" at (15,10)");
            //    string xpath_LeftClickTextFile_15_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_15_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_15_10);
            //    if (winElem_LeftClickTextFile_15_10 != null)
            //    {
            //        winElem_LeftClickTextFile_15_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_15_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Save" at (21,13)
            //    Console.WriteLine("LeftClick on Text \"Save\" at (21,13)");
            //    string xpath_LeftClickTextSave_21_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save\"]";
            //    var winElem_LeftClickTextSave_21_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSave_21_13);
            //    if (winElem_LeftClickTextSave_21_13 != null)
            //    {
            //        winElem_LeftClickTextSave_21_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSave_21_13}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B1-3");
            //}
        }

        //save as
        [TestMethod("B1-4")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-4")]
        //B1-4
        public void TIEditor_SaveAsTIByTypeTIRunTypeUUTTest(string TIName)
        {
            //// Set TI name
            //TIName = "B1-4";

            // If ti file is created before, delete it first
            TIFilePath = GetTIFilePath(TIName, TestItemSourceType.UserDefined, TestItemType.TI, TestItemRunType.UUT);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            SaveAsNewTI(TIName);

            //string TIContextInfo = CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, By.ClassName("PGGridAeraView"), By.TagName("Text")).Text;
            string TIContextInfo = PP5IDEWindow.PerformGetElement("/ById[TitleTxtBlk]").GetText();

            // Check new Sub TI is opened by verify the TI context label
            //Assert.AreEqual(TIName, TIContextInfo.Split('-').Last());
            StringAssert.Contains(TIContextInfo, TIName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (7,9)
            //    Console.WriteLine("LeftClick on Text \"File\" at (7,9)");
            //    string xpath_LeftClickTextFile_7_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_7_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_7_9);
            //    if (winElem_LeftClickTextFile_7_9 != null)
            //    {
            //        winElem_LeftClickTextFile_7_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_7_9}");
            //        return;
            //    }


            //    // LeftClick on Text "New" at (17,10)
            //    Console.WriteLine("LeftClick on Text \"New\" at (17,10)");
            //    string xpath_LeftClickTextNew_17_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"New\"]";
            //    var winElem_LeftClickTextNew_17_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextNew_17_10);
            //    if (winElem_LeftClickTextNew_17_10 != null)
            //    {
            //        winElem_LeftClickTextNew_17_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextNew_17_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Pre Test" at (10,9)
            //    Console.WriteLine("LeftClick on RadioButton \"Pre Test\" at (10,9)");
            //    string xpath_LeftClickRadioButtonPreTest_10_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Pre Test\"][@AutomationId=\"PreRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonPreTest_10_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPreTest_10_9);
            //    if (winElem_LeftClickRadioButtonPreTest_10_9 != null)
            //    {
            //        winElem_LeftClickRadioButtonPreTest_10_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPreTest_10_9}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (38,7)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (38,7)");
            //    string xpath_LeftClickComboBox_38_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_38_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_38_7);
            //    if (winElem_LeftClickComboBox_38_7 != null)
            //    {
            //        winElem_LeftClickComboBox_38_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_38_7}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (42,5)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (42,5)");
            //    string xpath_LeftClickTextTIAutoTest_42_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_42_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_42_5);
            //    if (winElem_LeftClickTextTIAutoTest_42_5 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_42_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_42_5}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (18,11)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (18,11)");
            //    string xpath_LeftClickButtonOk_18_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_18_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_18_11);
            //    if (winElem_LeftClickButtonOk_18_11 != null)
            //    {
            //        winElem_LeftClickButtonOk_18_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_18_11}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B1-4");
            //}
        }

        //group, description
        [TestMethod("B1-5_1")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-5_1")]
        //B1-5_1
        public void TIEditor_SaveAsTIAndChangeDescription(string TIName)
        {
            // Set TI name
            //string TIName = "B1-5_1";
            string descExpected = "ChangeDescription";

            // If ti file is created before, delete it first
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            SaveAsNewTI(TIName, isInputDescription: true, descExpected);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
            //                                        MobileBy.AccessibilityId("CloseButton")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[CloseButton]", ClickType.LeftClick);

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, out string descActual);

            // Check description is changed to new value
            //Assert.AreEqual(descExpected, descActual);
            descExpected.ShouldEqualTo(descActual);

            // LeftClick on Button "Cancel"
            //Console.WriteLine("LeftClick on Button \"Cancel\"");
            //CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("CancelBtn")).LeftClick();
            PP5IDEWindow.PerformClick("/ById[LoginDialog, CancelBtn]", ClickType.LeftClick);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (9,13)
            //    Console.WriteLine("LeftClick on Text \"File\" at (9,13)");
            //    string xpath_LeftClickTextFile_9_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_9_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_9_13);
            //    if (winElem_LeftClickTextFile_9_13 != null)
            //    {
            //        winElem_LeftClickTextFile_9_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_9_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Open..." at (11,8)
            //    Console.WriteLine("LeftDblClick on Text \"Open...\" at (11,8)");
            //    string xpath_LeftDblClickTextOpen_11_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftDblClickTextOpen_11_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextOpen_11_8);
            //    if (winElem_LeftDblClickTextOpen_11_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextOpen_11_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextOpen_11_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Pre Test" at (7,7)
            //    Console.WriteLine("LeftClick on RadioButton \"Pre Test\" at (7,7)");
            //    string xpath_LeftClickRadioButtonPreTest_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Pre Test\"][@AutomationId=\"PreRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonPreTest_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPreTest_7_7);
            //    if (winElem_LeftClickRadioButtonPreTest_7_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonPreTest_7_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPreTest_7_7}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0" at (42,14)
            //    Console.WriteLine("LeftClick on Custom \"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\" at (42,14)");
            //    string xpath_LeftClickCustomB12ItemUse_42_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2\"]/Custom[@Name=\"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\"][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12ItemUse_42_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12ItemUse_42_14);
            //    if (winElem_LeftClickCustomB12ItemUse_42_14 != null)
            //    {
            //        winElem_LeftClickCustomB12ItemUse_42_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12ItemUse_42_14}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (8,7)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (8,7)");
            //    string xpath_LeftClickTextOk_8_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_8_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_8_7);
            //    if (winElem_LeftClickTextOk_8_7 != null)
            //    {
            //        winElem_LeftClickTextOk_8_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_8_7}");
            //        return;
            //    }


            //    // LeftClick on Text "File" at (4,6)
            //    Console.WriteLine("LeftClick on Text \"File\" at (4,6)");
            //    string xpath_LeftClickTextFile_4_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_4_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_4_6);
            //    if (winElem_LeftClickTextFile_4_6 != null)
            //    {
            //        winElem_LeftClickTextFile_4_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_4_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Save As..." at (29,10)
            //    Console.WriteLine("LeftClick on Text \"Save As...\" at (29,10)");
            //    string xpath_LeftClickTextSaveAs_29_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save As...\"]";
            //    var winElem_LeftClickTextSaveAs_29_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSaveAs_29_10);
            //    if (winElem_LeftClickTextSaveAs_29_10 != null)
            //    {
            //        winElem_LeftClickTextSaveAs_29_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSaveAs_29_10}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0" at (190,15)
            //    Console.WriteLine("LeftClick on Custom \"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\" at (190,15)");
            //    string xpath_LeftClickCustomB12ItemUse_190_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2\"]/Custom[@Name=\"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\"][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12ItemUse_190_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12ItemUse_190_15);
            //    if (winElem_LeftClickCustomB12ItemUse_190_15 != null)
            //    {
            //        winElem_LeftClickCustomB12ItemUse_190_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12ItemUse_190_15}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (92,15)
            //    Console.WriteLine("LeftClick on Edit \"\" at (92,15)");
            //    string xpath_LeftClickEdit_92_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"DesTxtBox\"]";
            //    var winElem_LeftClickEdit_92_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_92_15);
            //    if (winElem_LeftClickEdit_92_15 != null)
            //    {
            //        winElem_LeftClickEdit_92_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_92_15}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.VK_OEM_COMMA + Keys.VK_OEM_COMMAKeys.Space + Keys.Space"change"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.VK_OEM_COMMA + Keys.VK_OEM_COMMAKeys.Space + Keys.Space\"change\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_92_15.SendKeys(Keys.Space + Keys.Space);
            //    winElem_LeftClickEdit_92_15.SendKeys("change");



            //    // LeftClick on Edit "" at (48,19)
            //    Console.WriteLine("LeftClick on Edit \"\" at (48,19)");
            //    string xpath_LeftClickEdit_48_19 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftClickEdit_48_19 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_48_19);
            //    if (winElem_LeftClickEdit_48_19 != null)
            //    {
            //        winElem_LeftClickEdit_48_19.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_48_19}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.Backspace + Keys.Backspace"5"Keys.LeftShift + "-" + Keys.LeftShift"1"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.Backspace + Keys.Backspace\"5\"Keys.LeftShift + \"-\" + Keys.LeftShift\"1\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_48_19.SendKeys(Keys.Backspace);
            //    winElem_LeftClickEdit_48_19.SendKeys("5");
            //    winElem_LeftClickEdit_48_19.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickEdit_48_19.SendKeys("1");


            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-5_1");
            //    System.Threading.Thread.Sleep(3000);

            //    // LeftClick on Button "Ok" at (19,9)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (19,9)");
            //    string xpath_LeftClickButtonOk_19_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_19_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_19_9);
            //    if (winElem_LeftClickButtonOk_19_9 != null)
            //    {
            //        winElem_LeftClickButtonOk_19_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_19_9}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B1-5_2")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-5_2")]
        //B1-5_2
        public void TIEditor_SaveAsTIAndChangeGroup(string TIName)
        {
            // Set TI name
            //string TIName = "B1-5_2";
            string groupExpected = "UnClassified";

            // If ti file is created before, delete it first
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            ChangeGroupAndSaveAsNewTI(TIName, groupExpected);

            //// Open window: Load Test Item, check TI saved in the new group
            // Left Click Menu item: File > Open...
            MenuSelect("File", "Open...");

            ComboBoxSelectByName("GroupCmb", groupExpected);
            //RefreshDataTable(TIDataTableAutoIDType.LoginGrid);
            //List<string> existingTINames = GetSingleColumnValues(TIDataTableAutoIDType.LoginGrid, "Test Item Name", excludeLastRow: false);
            //if (!existingTINames.Contains(TIName))
            //    Assert.Fail($"No TI existed with given TI Name: {TIName}");
            //else
            //    Console.WriteLine($"TI is saved in group: {groupExpected}");

            // LeftClick on Button "Cancel"
            //Console.WriteLine("LeftClick on Button \"Cancel\"");
            //CurrentDriver.GetElementFromWebElement(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("CancelBtn")).LeftClick();
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Load Test Item"))
            //            .GetBtnElement("Cancel")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Load Test Item, Cancel]", ClickType.LeftClick);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (9,13)
            //    Console.WriteLine("LeftClick on Text \"File\" at (9,13)");
            //    string xpath_LeftClickTextFile_9_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_9_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_9_13);
            //    if (winElem_LeftClickTextFile_9_13 != null)
            //    {
            //        winElem_LeftClickTextFile_9_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_9_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Open..." at (11,8)
            //    Console.WriteLine("LeftDblClick on Text \"Open...\" at (11,8)");
            //    string xpath_LeftDblClickTextOpen_11_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftDblClickTextOpen_11_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextOpen_11_8);
            //    if (winElem_LeftDblClickTextOpen_11_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextOpen_11_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextOpen_11_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Pre Test" at (7,7)
            //    Console.WriteLine("LeftClick on RadioButton \"Pre Test\" at (7,7)");
            //    string xpath_LeftClickRadioButtonPreTest_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Pre Test\"][@AutomationId=\"PreRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonPreTest_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPreTest_7_7);
            //    if (winElem_LeftClickRadioButtonPreTest_7_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonPreTest_7_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPreTest_7_7}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0" at (42,14)
            //    Console.WriteLine("LeftClick on Custom \"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\" at (42,14)");
            //    string xpath_LeftClickCustomB12ItemUse_42_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2\"]/Custom[@Name=\"B1-2, Item: User-TI-TIAutoTest-B1-2, Column Display Index: 0\"][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12ItemUse_42_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12ItemUse_42_14);
            //    if (winElem_LeftClickCustomB12ItemUse_42_14 != null)
            //    {
            //        winElem_LeftClickCustomB12ItemUse_42_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12ItemUse_42_14}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (8,7)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (8,7)");
            //    string xpath_LeftClickTextOk_8_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_8_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_8_7);
            //    if (winElem_LeftClickTextOk_8_7 != null)
            //    {
            //        winElem_LeftClickTextOk_8_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_8_7}");
            //        return;
            //    }


            //    // LeftClick on Text "File" at (15,4)
            //    Console.WriteLine("LeftClick on Text \"File\" at (15,4)");
            //    string xpath_LeftClickTextFile_15_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_15_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_15_4);
            //    if (winElem_LeftClickTextFile_15_4 != null)
            //    {
            //        winElem_LeftClickTextFile_15_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_15_4}");
            //        return;
            //    }


            //    // LeftClick on Text "Save As..." at (24,7)
            //    Console.WriteLine("LeftClick on Text \"Save As...\" at (24,7)");
            //    string xpath_LeftClickTextSaveAs_24_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save As...\"]";
            //    var winElem_LeftClickTextSaveAs_24_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSaveAs_24_7);
            //    if (winElem_LeftClickTextSaveAs_24_7 != null)
            //    {
            //        winElem_LeftClickTextSaveAs_24_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSaveAs_24_7}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (56,9)
            //    Console.WriteLine("LeftClick on Edit \"\" at (56,9)");
            //    string xpath_LeftClickEdit_56_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftClickEdit_56_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_56_9);
            //    if (winElem_LeftClickEdit_56_9 != null)
            //    {
            //        winElem_LeftClickEdit_56_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_56_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.Backspace + Keys.Backspace"5"Keys.LeftShift + "-" + Keys.LeftShift"2"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.Backspace + Keys.Backspace\"5\"Keys.LeftShift + \"-\" + Keys.LeftShift\"2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_56_9.SendKeys(Keys.Backspace);
            //    winElem_LeftClickEdit_56_9.SendKeys("5");
            //    winElem_LeftClickEdit_56_9.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickEdit_56_9.SendKeys("2");


            //    // LeftClick on ComboBox "" at (149,13)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (149,13)");
            //    string xpath_LeftClickComboBox_149_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_149_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_149_13);
            //    if (winElem_LeftClickComboBox_149_13 != null)
            //    {
            //        winElem_LeftClickComboBox_149_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_149_13}");
            //        return;
            //    }


            //    // LeftClick on Text "UnClassified" at (114,12)
            //    Console.WriteLine("LeftClick on Text \"UnClassified\" at (114,12)");
            //    string xpath_LeftClickTextUnClassifi_114_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"UnClassified\"]/Text[@ClassName=\"TextBlock\"][@Name=\"UnClassified\"]";
            //    var winElem_LeftClickTextUnClassifi_114_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextUnClassifi_114_12);
            //    if (winElem_LeftClickTextUnClassifi_114_12 != null)
            //    {
            //        winElem_LeftClickTextUnClassifi_114_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextUnClassifi_114_12}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-5_2");
            //    System.Threading.Thread.Sleep(3000);

            //    // LeftClick on Button "Ok" at (79,9)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (79,9)");
            //    string xpath_LeftClickButtonOk_79_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_79_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_79_9);
            //    if (winElem_LeftClickButtonOk_79_9 != null)
            //    {
            //        winElem_LeftClickButtonOk_79_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_79_9}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        //open file by searching
        [TestMethod("B1-6_NotFound")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-6_NotFound")]
        //B1-6_NotFound
        public void TIEditor_OpenFileBySearchNotFound(string TIName)
        {
            // Set TI name
            //string TIName = "B1-6_NotFound";

            // If ti file is created before, delete it first
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            //// Open window: Load Test Item, search TI name that not listed in grid table
            // Left Click Menu item: File > Open...
            MenuSelect("File", "Open...");

            // Search TI by TIName
            IWebElement TISearchBox = CurrentDriver.GetWebElementFromWebDriver(5000, MobileBy.AccessibilityId("LoginDialog"), 
                                                                                     MobileBy.AccessibilityId("searchBox"));
            TISearchBox.ClearContent();
            TISearchBox.SendComboKeys(TIName, Keys.Enter);

            // Check TI not found warning message box popuped
            Executor.GetInstance().SwitchTo(SessionType.Desktop);
            Assert.AreEqual("Search Result", CurrentDriver.GetWebElementFromWebDriver(MobileBy.AccessibilityId("MessageBoxExDialog")).Text);

            // Close the warning message box
            CurrentDriver.GetWebElementFromWebDriver(MobileBy.AccessibilityId("MessageBoxExDialog"))
                         .GetWebElementFromWebElement(By.Name("No"))
                         .LeftClick();

            // LeftClick on Button "Cancel"
            Console.WriteLine("LeftClick on Button \"Cancel\"");
            CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
                                                    MobileBy.AccessibilityId("CancelBtn")).LeftClick();

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (16,7)
            //    Console.WriteLine("LeftClick on Text \"File\" at (16,7)");
            //    string xpath_LeftClickTextFile_16_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_16_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_16_7);
            //    if (winElem_LeftClickTextFile_16_7 != null)
            //    {
            //        winElem_LeftClickTextFile_16_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_16_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (21,10)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (21,10)");
            //    string xpath_LeftClickTextOpen_21_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_21_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_21_10);
            //    if (winElem_LeftClickTextOpen_21_10 != null)
            //    {
            //        winElem_LeftClickTextOpen_21_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_21_10}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (89,1)
            //    Console.WriteLine("LeftClick on Edit \"\" at (89,1)");
            //    string xpath_LeftClickEdit_89_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
            //    var winElem_LeftClickEdit_89_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_89_1);
            //    if (winElem_LeftClickEdit_89_1 != null)
            //    {
            //        winElem_LeftClickEdit_89_1.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_89_1}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""inn"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"inn\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_89_1.SendKeys("inn");


            //    // LeftClick on Image "" at (7,7)
            //    Console.WriteLine("LeftClick on Image \"\" at (7,7)");
            //    string xpath_LeftClickImage_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]/Image[@ClassName=\"Image\"]";
            //    var winElem_LeftClickImage_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_7_7);
            //    if (winElem_LeftClickImage_7_7 != null)
            //    {
            //        winElem_LeftClickImage_7_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_7_7}");
            //        return;
            //    }



            //    // LeftClick on Button "No" at (26,9)
            //    Console.WriteLine("LeftClick on Button \"No\" at (26,9)");
            //    string xpath_LeftClickButtonNo_26_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Search Result\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"No\"][@AutomationId=\"btnNo\"]";
            //    var winElem_LeftClickButtonNo_26_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonNo_26_9);
            //    if (winElem_LeftClickButtonNo_26_9 != null)
            //    {
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-6_NotFound");
            //        winElem_LeftClickButtonNo_26_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonNo_26_9}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B1-6_Found")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-6_Found")]
        //B1-6_Found
        public void TIEditor_OpenFileBySearchFound(string TIName)
        {
            //// Set TI name
            //string TIName = "B1-6_Found";

            // If ti file is created before, delete it first
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            SaveAsNewTI(TIName);

            //// Close TI, Open window: Load Test Item, search TI name that not listed in grid table
            // Left Click TI window Close Button
            CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
                                                    MobileBy.AccessibilityId("CloseButton")).LeftClick();

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file by searching the TI name
            PerformLoadTIBySearchingTIName(TIName);

            // Check TI searched is opened by verify the TI context label
            string TIContextInfo = CurrentDriver.GetWebElementFromWebDriver(timeOut: 5000, By.ClassName("PGGridAeraView"), 
                                                                           By.TagName("Text")).Text;

            //string input = "User-TI-UnClassified-B1-3";
            string pattern = $@"{TIName}$";

            // Use Regex.Match to extract the matched substring at the end of the input string
            Match match = Regex.Match(TIContextInfo, pattern);

            if (match.Success)
            {
                string matchedSubstring = match.Value;
                //Assert.AreEqual(TIName, matchedSubstring);
                TIName.ShouldEqualTo(matchedSubstring);
                Console.WriteLine($"Matched substring at the end: {matchedSubstring}");
            }
            else
            {
                Console.WriteLine($"Pattern '{pattern}' not found at the end of the input string.");
            }

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (19,6)
            //    Console.WriteLine("LeftClick on Text \"File\" at (19,6)");
            //    string xpath_LeftClickTextFile_19_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_19_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_19_6);
            //    if (winElem_LeftClickTextFile_19_6 != null)
            //    {
            //        winElem_LeftClickTextFile_19_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_19_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (19,4)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (19,4)");
            //    string xpath_LeftClickTextOpen_19_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_19_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_19_4);
            //    if (winElem_LeftClickTextOpen_19_4 != null)
            //    {
            //        winElem_LeftClickTextOpen_19_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_19_4}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (80,9)
            //    Console.WriteLine("LeftClick on Edit \"\" at (80,9)");
            //    string xpath_LeftClickEdit_80_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
            //    var winElem_LeftClickEdit_80_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_80_9);
            //    if (winElem_LeftClickEdit_80_9 != null)
            //    {
            //        winElem_LeftClickEdit_80_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_80_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""un"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"un\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_80_9.SendKeys("un");


            //    // LeftClick on Image "" at (0,6)
            //    Console.WriteLine("LeftClick on Image \"\" at (0,6)");
            //    string xpath_LeftClickImage_0_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]/Image[@ClassName=\"Image\"]";
            //    var winElem_LeftClickImage_0_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_0_6);
            //    if (winElem_LeftClickImage_0_6 != null)
            //    {
            //        winElem_LeftClickImage_0_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_0_6}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (73,16)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (73,16)");
            //    string xpath_LeftClickButtonOk_73_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_73_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_73_16);
            //    if (winElem_LeftClickButtonOk_73_16 != null)
            //    {
            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B1-6_Found");
            //        winElem_LeftClickButtonOk_73_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_73_16}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B1-7")]
        [TestCategory("檔案操作(B1)")]
        [DataRow(true)]
        //B1-7
        public void TIEditor_LaunchTIEditor(bool ShouldTIEnterWindowShown)
        {
            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            bool IsTIEnterWindowShown = WaitUntil(() => PP5IDEWindow.GetWebElementFromWebElement(By.Name("Enter Point")) != null);

            ShouldTIEnterWindowShown.ShouldEqualTo(IsTIEnterWindowShown);

            // Close the Enter Point window
            PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Enter Point"))
                        .GetBtnElement("Cancel")
                        .LeftClick();
        }

        [TestMethod("B1-8")]
        [TestCategory("檔案操作(B1)")]
        [DataRow(TestItemType.SubTI, true)]
        [DataRow(TestItemType.ThreadTI, true)]
        //B1-8
        public void TIEditor_SetTypeOptionExceptTI_InLoadTIWindow(TestItemType tiType, bool ShouldRunTypeOptionsDisabled)
        {
            // Left Click Menu item: File > Open...
            MenuSelect("File", "Open...");

            // Left click the Type option by tiType
            PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Load Test Item"))
                        .GetRdoBtnElement(tiType.GetDescription())
                        .LeftClick();

            bool IsPreTestRdoBtnDisabled = !PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Load Test Item"))
                                                        .GetRdoBtnElement(TestItemRunType.Pre.GetDescription()).Enabled;
            bool IsPostTestRdoBtnDisabled = !PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Load Test Item"))
                                                         .GetRdoBtnElement(TestItemRunType.Post.GetDescription()).Enabled;

            ShouldRunTypeOptionsDisabled.ShouldEqualTo(IsPreTestRdoBtnDisabled);
            ShouldRunTypeOptionsDisabled.ShouldEqualTo(IsPostTestRdoBtnDisabled);

            // Close the Load Test Item window
            PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Load Test Item"))
                        .GetBtnElement("Cancel")
                        .LeftClick();
        }

        [TestMethod("B1-9")]
        [TestCategory("檔案操作(B1)")]
        [DataRow(true)]
        //B1-9
        public void TIEditor_CreateNewTI_InNewTIWindow(bool ShouldSystemTIOptionDisabled)
        {
            // Left Click Menu item: File > New
            MenuSelect("File", "New");

            // Wait for the New Test Item shown
            WaitUntil(() => PP5IDEWindow.GetWebElementFromWebElement(By.Name("New Test Item")) != null);
            

            bool IsSystemTIOptionDisabled = !PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
                                                         .GetRdoBtnElement("System TI")
                                                         .Enabled;

            ShouldSystemTIOptionDisabled.ShouldEqualTo(IsSystemTIOptionDisabled);

            // Close the New Test Item window
            PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
                        .GetBtnElement("Cancel")
                        .LeftClick();
        }

        [TestMethod("B1-10")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-10", false)]
        //B1-10
        public void TIEditor_SaveTIThenCloseTIWindow_NoSaveDialogShown(string TIName, bool ShouldSaveDialogShown)
        {
            // Get TI Testcase path
            TIFilePath = GetTIFilePath(TIName);

            SaveAsNewTI(TIName);

            // Close the TI window, check no Save Dialog Shown
            bool IsSaveDialogShown = PP5IDEWindow.GetWebElementFromWebElement(By.Name("Exit")) != null;
            ShouldSaveDialogShown.ShouldEqualTo(IsSaveDialogShown);
        }


        [TestMethod("B1-11")]
        [TestCategory("檔案操作(B1)")]
        [DataRow(true)]
        //B1-11
        public void TIEditor_OpenNewTIAfterEditingExistingTI_SaveDialogShouldShown(bool ShouldSaveDialogShown)
        {
            // Edit any part of the Existing TI
            VariableTabNavi(VariableTabType.Condition);
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,2]", ClickType.LeftClick, ClickType.LeftDoubleClick);
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Id("PGGrid"))
            //            .GetCellBy(1, 2)
            //            .LeftClick();

            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Id("PGGrid"))
            //            .GetCellBy(1, 2)
            //            .DoubleClick();


            // Left Click Menu item: File > New
            MenuSelect("File", "New");

            // Close the TI window, check Save Dialog is Shown
            bool IsSaveDialogShown = PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Exit")) != null;
            ShouldSaveDialogShown.ShouldEqualTo(IsSaveDialogShown);

            // Close the Save Dialog
            PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Exit"))
                        .GetBtnElement("Close")
                        .LeftClick();

            // Close the New Test Item window
            PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("New Test Item"))
                        .GetBtnElement("Close")
                        .LeftClick();
        }


        [TestMethod("B1-12")]
        [TestCategory("檔案操作(B1)")]
        [DataRow(true)]
        //B1-12
        public void TIEditor_LoadTIAfterEditingExistingTI_SaveDialogShouldShown(bool ShouldSaveDialogShown)
        {
            // Edit any part of the Existing TI
            VariableTabNavi(VariableTabType.Condition);
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,2]", ClickType.LeftClick, ClickType.LeftDoubleClick);
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Id("PGGrid"))
            //            .GetCellBy(1, 2)
            //            .LeftClick();

            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Id("PGGrid"))
            //            .GetCellBy(1, 2)
            //            .DoubleClick();

            // Left Click Menu item: File > Open...
            MenuSelect("File", "Open...");

            // Close the TI window, check Save Dialog is Shown
            bool IsSaveDialogShown = PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Exit")) != null;
            ShouldSaveDialogShown.ShouldEqualTo(IsSaveDialogShown);

            // Close the Save Dialog
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Exit"))
            //            .GetBtnElement("Close")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Exit]/Button[Close]", ClickType.LeftClick);
            // Close the Load Test Item window
            //PP5IDEWindow.GetExtendedElementBySingleWithRetry(PP5By.Name("Load Test Item"))
            //            .GetBtnElement("Close")
            //            .LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Load Test Item]/Button[Close]", ClickType.LeftClick);
        }


        [TestMethod("B1-13")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-13")]
        //B1-13
        public void TIEditor_SaveFileByCompileError(string TIName)
        {
            // Set TI name
            //string TIName = "B1-13";

            // If ti file is created before, delete it first
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            SaveAsNewTI(TIName);

            // Left Click TI window Close Button
            //PP5IDEWindow.GetElementFromWebElement(MobileBy.AccessibilityId("CloseButton")).LeftClick();
            PP5IDEWindow.PerformClick("/ByIdOrName[CloseButton]", ClickType.LeftClick); // Close the TI window

            TIExecuteAction(TIAction.SetTIActive, TIName);

            ////// Goto Management > TI/TP, set the TI active to true
            //// Menu selection: "Functions" > "Management"
            //MenuSelect("Functions", "Management");

            //// Close time consuming message box (Debug Mode)
            //// If save TI window message box popup, click No
            ////CurrentDriver.GetElementFromWebElement(timeOut: 15000, MobileBy.AccessibilityId("MessageBoxExDialog"),
            ////                                         By.Name("OK")).LeftClick();

            //// Click on TP/TI button
            ////PP5IDEWindow.GetToolbarElement((e) => e.isElementVisible())
            ////            .GetRdoBtnElement(1).LeftClick();
            //PP5IDEWindow.PerformClick("/ByCondition#ToolBar[Visible]/RadioButton[1]", ClickType.LeftClick);

            //// Click on Test Item tab
            ////IWebElement mainTab = PP5IDEWindow.GetTabControlElement("mainTab");
            ////IWebElement TestItemTabItem = mainTab.TabSelect(1, "Test Item");
            //IWebElement mainTab = PP5IDEWindow.PerformGetElement("/Tab[mainTab]");
            //IWebElement TestItemTabItem = mainTab.TabSelect(1, "Test Item");

            //// Switch to TP then back to TI
            //mainTab.TabSelect(1, "Test Program");
            //mainTab.TabSelect(1, "Test Item");

            //// Search the TI with name
            ////IWebElement testItemSearchBox = TestItemTabItem.GetElementFromWebElement(5000, MobileBy.AccessibilityId("TestItemSearchBox"), 
            ////                                                                 MobileBy.AccessibilityId("searchText"));
            ////TestItemTabItem.GetElementFromWebElement(MobileBy.AccessibilityId("searchText")).SendText(TIName);
            //TestItemTabItem.PerformInput("/ByIdOrName[searchText]", InputType.SendText, TIName);
            //Press(Keys.Enter);

            //// The datagrid AutomationID
            //string DataGridAutomationID = "TestItem_DataGrid";

            ////TestItemTabItem.GetSelectedRow(DataGridAutomationID)
            ////               .GetCellBy(3/*Active*/)
            ////               .LeftClick();
            //PP5IDEWindow.PerformClick("/ByCell@TestItem_DataGrid[3]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByDataGrid@TestItem_DataGrid[3,3]/RadioButton[1]", ClickType.LeftClick);

            //// Switch back to TI Editor, edit parameter without the correct values, and save the TI
            // Menu selection: "Functions" > "TI Editor"
            MenuSelect("Functions", "TI Editor");

            LoadOldTI(TIName);

            // Add command "SET"
            AddCommandBy(TestCmdGroupType.Arithmetic, "SET");

            // Menu selection: "File" > "Save"
            MenuSelect("File", "Save");

            // Save the TI without setting the parameters in SET command
            //PP5IDEWindow.GetElementFromWebElement(By.Name("Compiler Error")).GetBtnElement("OK").LeftClick();
            //PP5IDEWindow.GetElementFromWebElement(By.Name("Error")).GetBtnElement("Yes").LeftClick();
            
            AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformClick("/ByNameOrId[Compiler Error]/ByName[OK]", ClickType.LeftClick);
            AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformClick("/ByNameOrId[Error]/ByName[Yes]", ClickType.LeftClick);

            // Wait until save button as enabled (saving completed)
            //WaitUntil(() => PP5IDEWindow.GetToolbarElement((e) => e.isElementVisible())
            //                            .GetRdoBtnElement(3).Enabled);
            WaitUntil(() => PP5IDEWindow.PerformGetElement("/ByCondition#ToolBar[Visible]/RadioButton[3]").Enabled);

            //Thread.Sleep(2000);

            //// Switch back to Management, check TI Valid is "N"
            // Menu selection: "Windows" > "Management"
            MenuSelect("Windows", "Management");

            // Get The selected row again, then get the "Valid" Label
            //IWebElement TIValidLabel = TestItemTabItem.GetCellElementByColumnIndex(DataGridAutomationID, 1)
            //                                          .GetChildElements().Single();
            //IWebElement TIActiveCkbx = TestItemTabItem.GetSelectedRow(DataGridAutomationID)
            //                                          .GetCellBy(3/*Active*/);
            IElement TIActiveCkbx = PP5IDEWindow.PerformGetElement("/ByCell@TestItem_DataGrid[3]");

            // Active state of TI should be false
            bool TIActiveStateExpected = false;
            TIActiveStateExpected.ShouldEqualTo(TIActiveCkbx.isElementChecked());

            // should be "N"
            //string TIValidLabelExpected = "N";
            //Assert.IsTrue(TIValidLabel.Text.Equals("N"));
            //TIValidLabelExpected.ShouldEqualTo(TIValidLabel.GetFirstTextContent(ElementSearchType.DFS));

            //CurrentDriver.SwitchTo().ActiveElement().Click();
            //SendComboKeys(Keys.Tab, Keys.Enter);
            //new Actions(CurrentDriver).KeyDown(Keys.Control).SendKeys(Keys.Enter).KeyUp(Keys.Control).Perform();

            //CurrentDriver.SwitchTo().ActiveElement().Click();
            //SendComboKeys(Keys.Tab, Keys.Tab);
            //SendSingleKeys(Keys.Enter);
            //new Actions(CurrentDriver).KeyDown(Keys.Control).SendKeys(Keys.Enter).KeyUp(Keys.Control).Perform();

            //CurrentDriver.GetElementFromWebElement(5000, By.Name("Error"), By.Name("Ok")).LeftClick();
            //CurrentDriver.GetElementFromWebElement(5000, By.Name("Error"), By.Name("Yes")).LeftClick();

            //HeaderPanel = TestItemTabItem.GetElementFromWebElement(MobileBy.AccessibilityId(DataGridAutomationID))
            //                             .GetElementFromWebElement(By.ClassName("DataGridColumnHeadersPresenter"));

            //rows = TestItemTabItem.GetElementFromWebElement(MobileBy.AccessibilityId(DataGridAutomationID))
            //                      .GetElements(By.ClassName("DataGridRow"));

            //var selectedRow1 = rows.ToList().Find(r => r.Selected).GetElements(By.XPath("*/*")).ToList();
            //selectedRow1 = selectedRow1.Where(r => r.GetAttribute("GridItem.Column") != null).ToList();

            //var selectedRowUp = rows.ToList().Find(r => r.Selected).GetChildElements()
            //                   .Where(r => r.GetAttribute("IsGridItemPatternAvailable") == true.ToString()).ToList();

            //List<IWebElement> rows = TestItemTabItem.GetDataTableRows(DataGridAutomationID);
            //List<IWebElement> selectedRow = rows.GetSelectedRow();

            //// Get The selected row again
            //List<IWebElement> selectedRowCellElementsUp = TestItemTabItem.GetSelectedRowCellElements(DataGridAutomationID);

            //// Get TI "Valid" Label
            //IWebElement TIValidLabel = selectedRowCellElementsUp.GetCellElementByColumnIndex(1)
            //                                                    .GetChildElements().Single();

            //string ToggleState = TIActiveCheckBox.GetAttribute("Toggle.ToggleState");
            //Assert.IsTrue(TIActiveCheckBox.GetAttribute("Toggle.ToggleState") == "0");

            //RefreshDataTable("")

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Windows" at (51,8)
            //    Console.WriteLine("LeftClick on Text \"Windows\" at (51,8)");
            //    string xpath_LeftClickTextWindows_51_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Windows\"]";
            //    var winElem_LeftClickTextWindows_51_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextWindows_51_8);
            //    if (winElem_LeftClickTextWindows_51_8 != null)
            //    {
            //        winElem_LeftClickTextWindows_51_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextWindows_51_8}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (71,16)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (71,16)");
            //    string xpath_LeftClickTextTIEditor_71_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_71_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_71_16);
            //    if (winElem_LeftClickTextTIEditor_71_16 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_71_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_71_16}");
            //        return;
            //    }


            //    // LeftClick on Text "File" at (11,15)
            //    Console.WriteLine("LeftClick on Text \"File\" at (11,15)");
            //    string xpath_LeftClickTextFile_11_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_11_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_11_15);
            //    if (winElem_LeftClickTextFile_11_15 != null)
            //    {
            //        winElem_LeftClickTextFile_11_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_11_15}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (33,8)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (33,8)");
            //    string xpath_LeftClickTextOpen_33_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_33_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_33_8);
            //    if (winElem_LeftClickTextOpen_33_8 != null)
            //    {
            //        winElem_LeftClickTextOpen_33_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_33_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Post Test" at (18,15)
            //    Console.WriteLine("LeftClick on RadioButton \"Post Test\" at (18,15)");
            //    string xpath_LeftClickRadioButtonPostTest_18_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Post Test\"][@AutomationId=\"PostRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonPostTest_18_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonPostTest_18_15);
            //    if (winElem_LeftClickRadioButtonPostTest_18_15 != null)
            //    {
            //        winElem_LeftClickRadioButtonPostTest_18_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonPostTest_18_15}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2_3, Item: User-TI-TIAutoTest-B1-2_3, Column Display Index: 0" at (240,14)
            //    Console.WriteLine("LeftClick on Custom \"B1-2_3, Item: User-TI-TIAutoTest-B1-2_3, Column Display Index: 0\" at (240,14)");
            //    string xpath_LeftClickCustomB12_3ItemU_240_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2_3\"]/Custom[starts-with(@Name,\"B1-2_3, Item: User-TI-TIAutoTest-B1-2_3, Column Display Index: 0\")][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12_3ItemU_240_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12_3ItemU_240_14);
            //    if (winElem_LeftClickCustomB12_3ItemU_240_14 != null)
            //    {
            //        winElem_LeftClickCustomB12_3ItemU_240_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12_3ItemU_240_14}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (64,16)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (64,16)");
            //    string xpath_LeftClickButtonOk_64_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_64_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_64_16);
            //    if (winElem_LeftClickButtonOk_64_16 != null)
            //    {
            //        winElem_LeftClickButtonOk_64_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_64_16}");
            //        return;
            //    }


            //    // LeftDblClick on Text "AC Source" at (47,14)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (47,14)");
            //    string xpath_LeftDblClickTextACSource_47_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_47_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_47_14);
            //    if (winElem_LeftDblClickTextACSource_47_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_47_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_47_14}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (56,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (56,11)");
            //    string xpath_LeftDblClickTextReadAC_Cur_56_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_56_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_56_11);
            //    if (winElem_LeftDblClickTextReadAC_Cur_56_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_56_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_56_11}");
            //        return;
            //    }



            //    // LeftClick on Text "File" at (7,12)
            //    Console.WriteLine("LeftClick on Text \"File\" at (7,12)");
            //    string xpath_LeftClickTextFile_7_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_7_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_7_12);
            //    if (winElem_LeftClickTextFile_7_12 != null)
            //    {
            //        winElem_LeftClickTextFile_7_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_7_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Save" at (24,8)
            //    Console.WriteLine("LeftClick on Text \"Save\" at (24,8)");
            //    string xpath_LeftClickTextSave_24_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save\"]";
            //    var winElem_LeftClickTextSave_24_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSave_24_8);
            //    if (winElem_LeftClickTextSave_24_8 != null)
            //    {
            //        winElem_LeftClickTextSave_24_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSave_24_8}");
            //        return;
            //    }


            //    // LeftClick on Button "OK" at (39,11)
            //    Console.WriteLine("LeftClick on Button \"OK\" at (39,11)");
            //    string xpath_LeftClickButtonOK_39_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Compiler Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"OK\"][@AutomationId=\"btnOK\"]";
            //    var winElem_LeftClickButtonOK_39_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOK_39_11);
            //    if (winElem_LeftClickButtonOK_39_11 != null)
            //    {
            //        winElem_LeftClickButtonOK_39_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOK_39_11}");
            //        return;
            //    }


            //    // LeftClick on Button "Yes" at (87,6)
            //    Console.WriteLine("LeftClick on Button \"Yes\" at (87,6)");
            //    string xpath_LeftClickButtonYes_87_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"Yes\"][@AutomationId=\"btnYes\"]";
            //    var winElem_LeftClickButtonYes_87_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonYes_87_6);
            //    if (winElem_LeftClickButtonYes_87_6 != null)
            //    {
            //        winElem_LeftClickButtonYes_87_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonYes_87_6}");
            //        return;
            //    }

            //    System.Threading.Thread.Sleep(3000);

            //    // LeftClick on Text "Windows" at (40,7)
            //    Console.WriteLine("LeftClick on Text \"Windows\" at (40,7)");
            //    string xpath_LeftClickTextWindows_40_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Windows\"]";
            //    var winElem_LeftClickTextWindows_40_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextWindows_40_7);
            //    if (winElem_LeftClickTextWindows_40_7 != null)
            //    {
            //        winElem_LeftClickTextWindows_40_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextWindows_40_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Management" at (53,9)
            //    Console.WriteLine("LeftClick on Text \"Management\" at (53,9)");
            //    string xpath_LeftClickTextManagement_53_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Management\"]";
            //    var winElem_LeftClickTextManagement_53_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextManagement_53_9);
            //    if (winElem_LeftClickTextManagement_53_9 != null)
            //    {
            //        winElem_LeftClickTextManagement_53_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextManagement_53_9}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-13");
            //}
        }

        [TestMethod("B1-14")]
        [TestCategory("檔案操作(B1)")]
        //B1-14
        public void TIEditor_KeyProNotFound_CheckErrorWindowMessage()
        {
            PP5IDEWindow.PerformClick("/ByIdOrName[CloseButton]", ClickType.LeftClick); // Close the TI window
            bool result = DllHelper.ActivateDevice(false, DeviceType.KeyPro);           // Disable the KeyPro
            Assert.IsTrue(result);

            MenuSelect("Functions", "TI Editor");                                       // Open New TI

            //Window[@Name =\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Pane[@ClassName=\"ScrollViewer\"][@Name=\"Protection key not found!\"]/Edit[@AutomationId=\"txtBlockMsg\"]"
            var msgElement = PP5IDEWindow.PerformClick("/Window[Error]/Edit[txtBlockMsg]", ClickType.None);        // Check KeyPro not found error message is: "Protection key not found!"
            "Protection key not found!".ShouldEqualTo(msgElement.GetCellValue());

            PP5IDEWindow.PerformClick("/Window[Error]/Button[Ok]", ClickType.LeftClick);          // Click OK
            DllHelper.ActivateDevice(true, DeviceType.KeyPro);                          // ReEnable the KeyPro
        }

        [TestMethod("B1-18_Save")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-18_Save")]
        //B1-18_Save
        public void TIEditor_SaveFileBySaveWrongFile(string TIName)
        {
            // Set TI name
            //string TIName = "B1-18_Save";

            // If ti file is created before, delete it first
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            SaveAsNewTI(TIName);

            // Parameter: Condition, Add a new empty row
            VariableTabNavi(VariableTabType.Condition);
            GetCellBy("CndGrid", 1, "Show Name").DoubleClick();

            // Menu selection: "File" > "Save"
            MenuSelect("File", "Save");

            // SaveWrongFile
            //PP5IDEWindow.GetElementFromWebElement(By.Name("Error")).GetBtnElement("Ok").LeftClick();
            //PP5IDEWindow.GetElementFromWebElement(By.Name("Error")).GetBtnElement("Yes").LeftClick();
            PP5IDEWindow.PerformClick("/ByNameOrId[Error]/ByName[Ok]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByNameOrId[Error]/ByName[Yes]", ClickType.LeftClick);

            // Go to management, check the TI Valid is "N"
            MenuSelect("Functions", "Management");

            //WaitUntil(() => !GetMainMenuListItemNames().ContainsAllItems(new string[] { "File", "Edit", "Utility" }));
            // Wait until Management window is opened
            WaitUntil(() => CheckPP5WindowIsOpened(WindowType.Management));

            // Click on TP/TI button
            //PP5IDEWindow.GetToolbarElement((e) => e.isElementVisible())
            //            .GetRdoBtnElement(1).LeftClick();
            PP5IDEWindow.PerformClick("/ByCondition#ToolBar[Visible]/RadioButton[1]", ClickType.LeftClick);

            // Click on Test Item tab
            //IWebElement mainTab = PP5IDEWindow.GetTabControlElement("mainTab");
            IElement mainTab = PP5IDEWindow.PerformGetElement("/Tab[mainTab]");
            IElement TestItemTabItem = mainTab.TabSelect(1, "Test Item");
            

            // Switch to TP then back to TI
            mainTab.TabSelect(1, "Test Program");
            mainTab.TabSelect(1, "Test Item");

            // Search the TI with name
            //TestItemTabItem.GetEditElement("searchText").SendText(TIName);
            TestItemTabItem.PerformInput("/Edit[searchText]", InputType.SendContent, TIName);
            Press(Keys.Enter);

            //IWebElement TIValidLabel = TestItemTabItem.GetSelectedRow(DataGridAutomationID: "TestItem_DataGrid")
            //                                          .GetCellBy(2/*Valid*/);
            IElement TIValidLabel = TestItemTabItem.PerformGetElement("/ByCell@TestItem_DataGrid[2]");

            // should be "N"
            string TIValidLabelExpected = "N";
            //TIValidLabelExpected.ShouldEqualTo(TIValidLabel.GetFirstTextContent(ElementSearchType.DFS));
            TIValidLabelExpected.ShouldEqualTo(TIValidLabel.PerformGetElement("/Text[0]").Text);

            //// Close the TI window, if can close directly, this TI is saved
            //// Left Click TI window Close Button
            //PP5IDEWindow.GetElementFromWebElement(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
            //                                        MobileBy.AccessibilityId("CloseButton")).LeftClick();

            //// Check main window title is "Chroma ATS IDE"
            //Assert.IsTrue(CurrentDriver.CheckWindowTitle(PowerPro5Config.IDEWindowName));

            //// Check Save Button's state, if disabled, save action is executed
            //// Menu selection: "File", check if "Save" item is changed to disabled state
            //Assert.IsFalse(IsMenuItemEnabled("File", "Save"));

            //// Switch to desktop driver, inspect the error tooltip: "CallName can not be empty"
            //GetCellBy("CndGrid", 0, "Call Name").MoveToElement();
            //Executor.GetInstance().SwitchTo(SessionType.Desktop);
            //string errorToolTip = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("Popup"), By.ClassName("ToolTip"))
            //                                   .GetElementFromWebElement(By.TagName("Text")).Text;

            //Assert.AreEqual("CallName can not be empty", errorToolTip);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (6,6)
            //    Console.WriteLine("LeftClick on Text \"File\" at (6,6)");
            //    string xpath_LeftClickTextFile_6_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_6_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_6_6);
            //    if (winElem_LeftClickTextFile_6_6 != null)
            //    {
            //        winElem_LeftClickTextFile_6_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_6_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (12,9)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (12,9)");
            //    string xpath_LeftClickTextOpen_12_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_12_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_12_9);
            //    if (winElem_LeftClickTextOpen_12_9 != null)
            //    {
            //        winElem_LeftClickTextOpen_12_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_12_9}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0" at (82,12)
            //    Console.WriteLine("LeftClick on Custom \"B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0\" at (82,12)");
            //    string xpath_LeftClickCustomB12_2ItemU_82_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2_2\"]/Custom[starts-with(@Name,\"B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0\")][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12_2ItemU_82_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12_2ItemU_82_12);
            //    if (winElem_LeftClickCustomB12_2ItemU_82_12 != null)
            //    {
            //        winElem_LeftClickCustomB12_2ItemU_82_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12_2ItemU_82_12}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (15,7)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (15,7)");
            //    string xpath_LeftClickButtonOk_15_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_15_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_15_7);
            //    if (winElem_LeftClickButtonOk_15_7 != null)
            //    {
            //        winElem_LeftClickButtonOk_15_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_15_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "AC Source" at (7,10)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (7,10)");
            //    string xpath_LeftDblClickTextACSource_7_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_7_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_7_10);
            //    if (winElem_LeftDblClickTextACSource_7_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_7_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_7_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (24,10)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (24,10)");

            //    WindowsElement cmd = null;
            //    bool cmdFound = false;

            //    while (!cmdFound)
            //    {
            //        //foreach (var cmd in testcmds)
            //        //{
            //        cmd = AutoUIExecutor.FindElementByAbsoluteXPath("/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]");

            //        if (cmd != null)
            //        {
            //            cmdFound = cmd.Text == "ReadAC_Current";
            //            if (cmdFound)
            //            {
            //                AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(cmd.Coordinates);
            //                AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //            }
            //            else
            //            {
            //                Console.WriteLine($"Failed to find element by Automation ID & Name: \"cmdTxtBlk\" & \"ReadAC_Current\"");
            //                continue;
            //            }
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element by Automation ID: \"cmdTxtBlk\"");
            //            return;
            //        }
            //    }


            //    // LeftClick on Text "File" at (3,2)
            //    Console.WriteLine("LeftClick on Text \"File\" at (3,2)");
            //    string xpath_LeftClickTextFile_3_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_3_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_3_2);
            //    if (winElem_LeftClickTextFile_3_2 != null)
            //    {
            //        winElem_LeftClickTextFile_3_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_3_2}");
            //        return;
            //    }


            //    // LeftClick on Text "Save" at (22,3)
            //    Console.WriteLine("LeftClick on Text \"Save\" at (22,3)");
            //    string xpath_LeftClickTextSave_22_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save\"]";
            //    var winElem_LeftClickTextSave_22_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSave_22_3);
            //    if (winElem_LeftClickTextSave_22_3 != null)
            //    {
            //        winElem_LeftClickTextSave_22_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSave_22_3}");
            //        return;
            //    }


            //    // LeftClick on Button "OK" at (92,15)
            //    Console.WriteLine("LeftClick on Button \"OK\" at (92,15)");
            //    string xpath_LeftClickButtonOK_92_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Compiler Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"OK\"][@AutomationId=\"btnOK\"]";
            //    var winElem_LeftClickButtonOK_92_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOK_92_15);
            //    if (winElem_LeftClickButtonOK_92_15 != null)
            //    {
            //        winElem_LeftClickButtonOK_92_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOK_92_15}");
            //        return;
            //    }


            //    // LeftClick on Button "Yes" at (106,9)
            //    Console.WriteLine("LeftClick on Button \"Yes\" at (106,9)");
            //    string xpath_LeftClickButtonYes_106_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"Yes\"][@AutomationId=\"btnYes\"]";
            //    var winElem_LeftClickButtonYes_106_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonYes_106_9);
            //    if (winElem_LeftClickButtonYes_106_9 != null)
            //    {
            //        winElem_LeftClickButtonYes_106_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonYes_106_9}");
            //        return;
            //    }
            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-18");
            //}
        }

        [TestMethod("B1-18_NotSave")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-18_NotSave")]
        //B1-18_NotSave
        public void TIEditor_SaveFileByNotSaveWrongFile(string TIName)
        {
            // Get TI Testcase path
            TIFilePath = GetTIFilePath(TIName);

            SaveAsNewTI(TIName);

            // Parameter: Condition, Add a new empty row
            VariableTabNavi(VariableTabType.Condition);
            PP5IDEWindow.PerformClick("/ByCell@CndGrid[1,@Show Name]", ClickType.LeftDoubleClick);
            //GetCellBy("CndGrid", 1, "Show Name").DoubleClick();

            // Menu selection: "File" > "Save"
            MenuSelect("File", "Save");

            // Save the file while still has error, Check error window is shown
            //bool errorWindowShown = WaitUntil(() => PP5IDEWindow.GetElementFromWebElement(By.Name("Error")) != null);
            bool errorWindowShown = WaitUntil(() => PP5IDEWindow.PerformGetElement("/ByNameOrId[Error]") != null);
            true.ShouldEqualTo(errorWindowShown);

            //PP5IDEWindow.GetElementFromWebElement(By.Name("Error")).GetBtnElement("Ok").LeftClick();
            //PP5IDEWindow.GetElementFromWebElement(By.Name("Error")).GetBtnElement("No").LeftClick();
            PP5IDEWindow.PerformClick("/ByNameOrId[Error]/ByName[Ok]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByNameOrId[Error]/ByName[No]", ClickType.LeftClick);

            //// Close the TI window, if message box: Do you want to save TestItem? popup, this TI is not saved yet
            //// Left Click TI window Close Button
            //CurrentDriver.GetElementFromWebElement(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
            //                                        MobileBy.AccessibilityId("CloseButton")).LeftClick();

            //// Check main window title is "Chroma ATS IDE - [TI Editor]"
            //Assert.IsTrue(CurrentDriver.CheckWindowTitle(PowerPro5Config.IDE_TIEditorWindowName));

            //// Check Save Button is state, if enabled, save action is not executed
            //// Menu selection: "File" check if "Save" item is still enabled
            //Assert.IsTrue(IsMenuItemEnabled("File", "Save"));

            //// Switch to desktop driver, inspect the error tooltip: "CallName can not be empty"
            //GetCellBy("CndGrid", 0, "Call Name").MoveToElement();
            //Executor.GetInstance().SwitchTo(SessionType.Desktop);
            //string errorToolTip = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("Popup"), By.ClassName("ToolTip"))
            //                                   .GetElementFromWebElement(By.TagName("Text")).Text;

            //Assert.AreEqual("CallName can not be empty", errorToolTip);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "File" at (6,6)
            //    Console.WriteLine("LeftClick on Text \"File\" at (6,6)");
            //    string xpath_LeftClickTextFile_6_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_6_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_6_6);
            //    if (winElem_LeftClickTextFile_6_6 != null)
            //    {
            //        winElem_LeftClickTextFile_6_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_6_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Open..." at (12,9)
            //    Console.WriteLine("LeftClick on Text \"Open...\" at (12,9)");
            //    string xpath_LeftClickTextOpen_12_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Open...\"]";
            //    var winElem_LeftClickTextOpen_12_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOpen_12_9);
            //    if (winElem_LeftClickTextOpen_12_9 != null)
            //    {
            //        winElem_LeftClickTextOpen_12_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOpen_12_9}");
            //        return;
            //    }


            //    // LeftClick on Custom "B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0" at (82,12)
            //    Console.WriteLine("LeftClick on Custom \"B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0\" at (82,12)");
            //    string xpath_LeftClickCustomB12_2ItemU_82_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/DataGrid[@AutomationId=\"LoginGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[@Name=\"User-TI-TIAutoTest-B1-2_2\"]/Custom[starts-with(@Name,\"B1-2_2, Item: User-TI-TIAutoTest-B1-2_2, Column Display Index: 0\")][@AutomationId=\"RowData.Row.Name\"]";
            //    var winElem_LeftClickCustomB12_2ItemU_82_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomB12_2ItemU_82_12);
            //    if (winElem_LeftClickCustomB12_2ItemU_82_12 != null)
            //    {
            //        winElem_LeftClickCustomB12_2ItemU_82_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomB12_2ItemU_82_12}");
            //        return;
            //    }


            //    // LeftClick on Button "Ok" at (15,7)
            //    Console.WriteLine("LeftClick on Button \"Ok\" at (15,7)");
            //    string xpath_LeftClickButtonOk_15_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Load Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]";
            //    var winElem_LeftClickButtonOk_15_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_15_7);
            //    if (winElem_LeftClickButtonOk_15_7 != null)
            //    {
            //        winElem_LeftClickButtonOk_15_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_15_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "AC Source" at (7,10)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (7,10)");
            //    string xpath_LeftDblClickTextACSource_7_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_7_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_7_10);
            //    if (winElem_LeftDblClickTextACSource_7_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_7_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_7_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (24,10)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (24,10)");

            //    WindowsElement cmd = null;
            //    bool cmdFound = false;

            //    while (!cmdFound)
            //    {
            //        //foreach (var cmd in testcmds)
            //        //{
            //        cmd = AutoUIExecutor.FindElementByAbsoluteXPath("/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]");

            //        if (cmd != null)
            //        {
            //            cmdFound = cmd.Text == "ReadAC_Current";
            //            if (cmdFound)
            //            {
            //                AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(cmd.Coordinates);
            //                AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //            }
            //            else
            //            {
            //                Console.WriteLine($"Failed to find element by Automation ID & Name: \"cmdTxtBlk\" & \"ReadAC_Current\"");
            //                continue;
            //            }
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element by Automation ID: \"cmdTxtBlk\"");
            //            return;
            //        }
            //    }


            //    // LeftClick on Text "File" at (3,2)
            //    Console.WriteLine("LeftClick on Text \"File\" at (3,2)");
            //    string xpath_LeftClickTextFile_3_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_3_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_3_2);
            //    if (winElem_LeftClickTextFile_3_2 != null)
            //    {
            //        winElem_LeftClickTextFile_3_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_3_2}");
            //        return;
            //    }


            //    // LeftClick on Text "Save" at (22,3)
            //    Console.WriteLine("LeftClick on Text \"Save\" at (22,3)");
            //    string xpath_LeftClickTextSave_22_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save\"]";
            //    var winElem_LeftClickTextSave_22_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSave_22_3);
            //    if (winElem_LeftClickTextSave_22_3 != null)
            //    {
            //        winElem_LeftClickTextSave_22_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSave_22_3}");
            //        return;
            //    }


            //    // LeftClick on Button "OK" at (90,15)
            //    Console.WriteLine("LeftClick on Button \"OK\" at (90,15)");
            //    string xpath_LeftClickButtonOK_90_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Compiler Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"OK\"][@AutomationId=\"btnOK\"]";
            //    var winElem_LeftClickButtonOK_90_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOK_90_15);
            //    if (winElem_LeftClickButtonOK_90_15 != null)
            //    {
            //        winElem_LeftClickButtonOK_90_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOK_90_15}");
            //        return;
            //    }


            //    // LeftClick on Button "No" at (29,16)
            //    Console.WriteLine("LeftClick on Button \"No\" at (29,16)");
            //    string xpath_LeftClickButtonNo_29_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"No\"][@AutomationId=\"btnNo\"]";
            //    var winElem_LeftClickButtonNo_29_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonNo_29_16);
            //    if (winElem_LeftClickButtonNo_29_16 != null)
            //    {
            //        winElem_LeftClickButtonNo_29_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonNo_29_16}");
            //        return;
            //    }




            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-18-2");
            //}
        }

        [TestMethod("B1-21_DLL")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-21_DLL")]
        //B1-21_DLL
        public void TIEditor_SaveFileByUsingDLL(string TIName)
        {
            // Arrange
            bool SkipStateExpected = true;
            string labelExpected = "DllLabel";
            string descriptionExpected = "DllDescription";
            string autoIDCommandEditTable = TIDataTableAutoIDType.PGGrid.ToString();

            //// ti name
            //string TIName = "B1-21_DLL";

            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "TI", "UUTTest", TIName + ".tix");
            
            // Get TI Testcase path
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            //// Open New TI (TI, UUT Test)
            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "UUT Test"
            Console.WriteLine("LeftClick on RadioButton \"UUT Test\"");
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
                                                                                MobileBy.AccessibilityId("UUTRdoBtn")).LeftClick();

            // LeftClick on Button "Ok"
            Console.WriteLine("LeftClick on Button \"Ok\"");
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
                                                                                MobileBy.AccessibilityId("OkBtn")).LeftClick();

            // Add Dll Command and edit on:  Skip、Label、Description
            AddCommandBy(TestCmdGroupType.Dll, cmdNumber: 1);
            //RefreshDataTable(TIDataTableAutoIDType.PGGrid);
            GetCellBy(autoIDCommandEditTable, 1, "Skip").LeftClick();
            GetCellBy(autoIDCommandEditTable, 1, "Label").SendSingleKeys(labelExpected);
            GetCellBy(autoIDCommandEditTable, 1, "Description").SendSingleKeys(descriptionExpected);
            GetCellBy(autoIDCommandEditTable, 1, "No").LeftClick();

            // Save the TI
            SaveAsNewTI(TIName);
            Thread.Sleep(2000);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
                                                                                MobileBy.AccessibilityId("CloseButton")).LeftClick();

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, TestItemType.TI, TestItemRunType.UUT);

            IElement cmdDataGrid = PP5IDEWindow.GetDataGridElement(autoIDCommandEditTable);

            // Check the TI has matched Skip、Label、Description as previous edited
            SkipStateExpected.ShouldEqualTo(cmdDataGrid.GetCellBy(1, 2).isElementChecked());
            labelExpected.ShouldEqualTo(cmdDataGrid.GetCellBy(1, 3).Text);
            descriptionExpected.ShouldEqualTo(cmdDataGrid.GetCellBy(1, 7).Text);

            //SkipStateExpected.ShouldEqualTo(GetCellBy(autoIDCommandEditTable, 1, "Skip").isElementChecked());
            //labelExpected.ShouldEqualTo(GetCellBy(autoIDCommandEditTable, 1, "Label").Text);
            //descriptionExpected.ShouldEqualTo(GetCellBy(autoIDCommandEditTable, 1, "Description").Text);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "Dll" at (8,5)
            //    Console.WriteLine("LeftDblClick on Text \"Dll\" at (8,5)");
            //    string xpath_LeftDblClickTextDll_8_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Dll\"]";
            //    var winElem_LeftDblClickTextDll_8_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDll_8_5);
            //    if (winElem_LeftDblClickTextDll_8_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDll_8_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDll_8_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "TrapezoidalIntegration" at (20,1)
            //    Console.WriteLine("LeftDblClick on Text \"TrapezoidalIntegration\" at (20,1)");
            //    string xpath_LeftDblClickTextTrapezoida_20_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"TrapezoidalIntegration\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextTrapezoida_20_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextTrapezoida_20_1);
            //    if (winElem_LeftDblClickTextTrapezoida_20_1 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextTrapezoida_20_1.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextTrapezoida_20_1}");
            //        return;
            //    }


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (20,6)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (20,6)");
            //    string xpath_LeftClickCustomUncheckedI_20_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_20_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_20_6);
            //    if (winElem_LeftClickCustomUncheckedI_20_6 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_20_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_20_6}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (27,5)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (27,5)");
            //    string xpath_LeftClickCustomItemChroma_27_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Label\"]";
            //    var winElem_LeftClickCustomItemChroma_27_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_27_5);
            //    if (winElem_LeftClickCustomItemChroma_27_5 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_27_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_27_5}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""ttt"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"ttt\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_27_5.SendKeys("ttt");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (23,6)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (23,6)");
            //    string xpath_LeftClickCustomItemChroma_23_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Description\"]";
            //    var winElem_LeftClickCustomItemChroma_23_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_23_6);
            //    if (winElem_LeftClickCustomItemChroma_23_6 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_23_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_23_6}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""dll"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"dll\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_23_6.SendKeys("dll");


            //    // LeftClick on Text "File" at (7,3)
            //    Console.WriteLine("LeftClick on Text \"File\" at (7,3)");
            //    string xpath_LeftClickTextFile_7_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_7_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_7_3);
            //    if (winElem_LeftClickTextFile_7_3 != null)
            //    {
            //        winElem_LeftClickTextFile_7_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_7_3}");
            //        return;
            //    }


            //    // LeftClick on Text "Save As..." at (23,16)
            //    Console.WriteLine("LeftClick on Text \"Save As...\" at (23,16)");
            //    string xpath_LeftClickTextSaveAs_23_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save As...\"]";
            //    var winElem_LeftClickTextSaveAs_23_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSaveAs_23_16);
            //    if (winElem_LeftClickTextSaveAs_23_16 != null)
            //    {
            //        winElem_LeftClickTextSaveAs_23_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSaveAs_23_16}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (7,12)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (7,12)");
            //    string xpath_LeftClickTextOk_7_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOK\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_7_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_7_12);
            //    if (winElem_LeftClickTextOk_7_12 != null)
            //    {
            //        winElem_LeftClickTextOk_7_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_7_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Yes" at (14,10)
            //    Console.WriteLine("LeftClick on Text \"Yes\" at (14,10)");
            //    string xpath_LeftClickTextYes_14_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"Yes\"][@AutomationId=\"btnYes\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Yes\"]";
            //    var winElem_LeftClickTextYes_14_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextYes_14_10);
            //    if (winElem_LeftClickTextYes_14_10 != null)
            //    {
            //        winElem_LeftClickTextYes_14_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextYes_14_10}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (152,7)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (152,7)");
            //    string xpath_LeftClickComboBox_152_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_152_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_152_7);
            //    if (winElem_LeftClickComboBox_152_7 != null)
            //    {
            //        winElem_LeftClickComboBox_152_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_152_7}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (42,7)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (42,7)");
            //    string xpath_LeftClickTextTIAutoTest_42_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_42_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_42_7);
            //    if (winElem_LeftClickTextTIAutoTest_42_7 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_42_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_42_7}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (56,8)
            //    Console.WriteLine("LeftClick on Edit \"\" at (56,8)");
            //    string xpath_LeftClickEdit_56_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftClickEdit_56_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_56_8);
            //    if (winElem_LeftClickEdit_56_8 != null)
            //    {
            //        winElem_LeftClickEdit_56_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_56_8}");
            //        return;
            //    }


            //    // LeftDblClick on Edit "" at (95,14)
            //    Console.WriteLine("LeftDblClick on Edit \"\" at (95,14)");
            //    string xpath_LeftDblClickEdit_95_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftDblClickEdit_95_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickEdit_95_14);
            //    if (winElem_LeftDblClickEdit_95_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickEdit_95_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickEdit_95_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "b" + Keys.LeftShift"1-21"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"b\" + Keys.LeftShift\"1-21\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_56_8.SendKeys(Keys.LeftShift + "b" + Keys.LeftShift);
            //    winElem_LeftClickEdit_56_8.SendKeys("1-21");


            //    // LeftClick on Text "OK" at (6,16)
            //    Console.WriteLine("LeftClick on Text \"OK\" at (6,16)");
            //    string xpath_LeftClickTextOK_6_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"OK\"][@AutomationId=\"btnOK\"]/Text[@ClassName=\"TextBlock\"][@Name=\"OK\"]";
            //    var winElem_LeftClickTextOK_6_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOK_6_16);
            //    if (winElem_LeftClickTextOK_6_16 != null)
            //    {
            //        winElem_LeftClickTextOK_6_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOK_6_16}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (63,11)
            //    Console.WriteLine("LeftClick on Edit \"\" at (63,11)");
            //    string xpath_LeftClickEdit_63_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftClickEdit_63_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_63_11);
            //    if (winElem_LeftClickEdit_63_11 != null)
            //    {
            //        winElem_LeftClickEdit_63_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_63_11}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""1"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"1\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_63_11.SendKeys("1");


            //    // LeftClick on Text "Ok" at (6,13)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (6,13)");
            //    string xpath_LeftClickTextOk_6_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_6_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_6_13);
            //    if (winElem_LeftClickTextOk_6_13 != null)
            //    {
            //        winElem_LeftClickTextOk_6_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_6_13}");
            //        return;
            //    }


            //    // LeftClick on Custom "HeaderPanel" at (877,586)
            //    Console.WriteLine("LeftClick on Custom \"HeaderPanel\" at (877,586)");
            //    string xpath_LeftClickCustomHeaderPane_877_586 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Custom[@Name=\"HeaderPanel\"][@AutomationId=\"HeaderPanel\"]";
            //    var winElem_LeftClickCustomHeaderPane_877_586 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomHeaderPane_877_586);
            //    if (winElem_LeftClickCustomHeaderPane_877_586 != null)
            //    {
            //        winElem_LeftClickCustomHeaderPane_877_586.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomHeaderPane_877_586}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-21_DDL");
            //}
        }

        [TestMethod("B1-21_Python")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-21_Python")]
        //B1-21_Python
        public void TIEditor_SaveFileByUsingPython(string TIName)
        {
            // Arrange
            bool SkipStateExpected = true;
            string labelExpected = "PythonLabel";
            string descriptionExpected = "PythonDescription";
            string autoIDCommandEditTable = TIDataTableAutoIDType.PGGrid.ToString();

            //// ti name
            //string TIName = "B1-21_Python";

            // If ti file is created before, delete it first
            //string assemblyPath = Assembly.GetExecutingAssembly().Location;
            //string assemblyDirectory = Path.GetDirectoryName(assemblyPath);
            //string baseDirectory = Directory.GetParent(assemblyDirectory).Parent.Parent.Parent.FullName;
            //string TIFilePath = Path.Combine(baseDirectory, "Debug", "TestItem", "UserDefined", "TI", "UUTTest", TIName + ".tix");
            
            // Get TI Testcase path
            TIFilePath = GetTIFilePath(TIName);

            //if (File.Exists(TIFilePath))
            //    File.Delete(TIFilePath);

            //// Open New TI (TI, UUT Test)
            // LeftClick on Text "File" > "New"
            MenuSelect("File", "New");

            // LeftClick on RadioButton "UUT Test"
            Console.WriteLine("LeftClick on RadioButton \"UUT Test\"");
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
                                                                                MobileBy.AccessibilityId("UUTRdoBtn")).LeftClick();

            // LeftClick on Button "Ok"
            Console.WriteLine("LeftClick on Button \"Ok\"");
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
                                                                                MobileBy.AccessibilityId("OkBtn")).LeftClick();

            // Add Python Command and edit on:  Skip、Label、Description
            AddCommandBy(TestCmdGroupType.Python, cmdNumber: 1);
            //RefreshDataTable(TIDataTableAutoIDType.PGGrid);
            GetCellBy(autoIDCommandEditTable, 1, "Skip").LeftClick();
            GetCellBy(autoIDCommandEditTable, 1, "Label").SendSingleKeys(labelExpected);
            GetCellBy(autoIDCommandEditTable, 1, "Description").SendSingleKeys(descriptionExpected);
            GetCellBy(autoIDCommandEditTable, 1, "No").LeftClick();

            // Save the TI
            SaveAsNewTI(TIName);
            Thread.Sleep(2000);

            //// Close TI, reopen it
            // Left Click TI window Close Button
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
                                                                                MobileBy.AccessibilityId("CloseButton")).LeftClick();

            // Left Click Menu item: Functions > TI Editor
            MenuSelect("Functions", "TI Editor");

            // Load TI file again
            LoadOldTI(TIName, TestItemType.TI, TestItemRunType.UUT);

            IElement cmdDataGrid = PP5IDEWindow.GetDataGridElement(autoIDCommandEditTable);

            // Check the TI has matched Skip、Label、Description as previous edited
            SkipStateExpected.ShouldEqualTo(cmdDataGrid.GetCellBy(1, 2).isElementChecked());
            labelExpected.ShouldEqualTo(cmdDataGrid.GetCellBy(1, 3).Text);
            descriptionExpected.ShouldEqualTo(cmdDataGrid.GetCellBy(1, 7).Text);

            //SkipStateExpected.ShouldEqualTo(GetCellBy(autoIDCommandEditTable, 1, "Skip").isElementChecked());
            //labelExpected.ShouldEqualTo(GetCellBy(autoIDCommandEditTable, 1, "Label").Text);
            //descriptionExpected.ShouldEqualTo(GetCellBy(autoIDCommandEditTable, 1, "Description").Text);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "Python" at (8,12)
            //    Console.WriteLine("LeftDblClick on Text \"Python\" at (8,12)");
            //    string xpath_LeftDblClickTextPython_8_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Python\"]";
            //    var winElem_LeftDblClickTextPython_8_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextPython_8_12);
            //    if (winElem_LeftDblClickTextPython_8_12 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextPython_8_12.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextPython_8_12}");
            //        return;
            //    }


            //    // LeftDblClick on Text "trapezoidal_integration" at (37,8)
            //    Console.WriteLine("LeftDblClick on Text \"trapezoidal_integration\" at (37,8)");
            //    string xpath_LeftDblClickTexttrapezoida_37_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"trapezoidal_integration\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTexttrapezoida_37_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTexttrapezoida_37_8);
            //    if (winElem_LeftDblClickTexttrapezoida_37_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTexttrapezoida_37_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTexttrapezoida_37_8}");
            //        return;
            //    }


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (17,6)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (17,6)");
            //    string xpath_LeftClickCustomUncheckedI_17_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_17_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_17_6);
            //    if (winElem_LeftClickCustomUncheckedI_17_6 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_17_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_17_6}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (20,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (20,9)");
            //    string xpath_LeftClickCustomItemChroma_20_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Label\"]";
            //    var winElem_LeftClickCustomItemChroma_20_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_20_9);
            //    if (winElem_LeftClickCustomItemChroma_20_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_20_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_20_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""ppp"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"ppp\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_20_9.SendKeys("ppp");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (17,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (17,8)");
            //    string xpath_LeftClickCustomItemChroma_17_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Description\"]";
            //    var winElem_LeftClickCustomItemChroma_17_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_17_8);
            //    if (winElem_LeftClickCustomItemChroma_17_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_17_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_17_8}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""python"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"python\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_17_8.SendKeys("python");


            //    // LeftClick on Text "File" at (18,11)
            //    Console.WriteLine("LeftClick on Text \"File\" at (18,11)");
            //    string xpath_LeftClickTextFile_18_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"File\"]";
            //    var winElem_LeftClickTextFile_18_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFile_18_11);
            //    if (winElem_LeftClickTextFile_18_11 != null)
            //    {
            //        winElem_LeftClickTextFile_18_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFile_18_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Save As..." at (21,6)
            //    Console.WriteLine("LeftClick on Text \"Save As...\" at (21,6)");
            //    string xpath_LeftClickTextSaveAs_21_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Save As...\"]";
            //    var winElem_LeftClickTextSaveAs_21_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextSaveAs_21_6);
            //    if (winElem_LeftClickTextSaveAs_21_6 != null)
            //    {
            //        winElem_LeftClickTextSaveAs_21_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextSaveAs_21_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (9,11)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (9,11)");
            //    string xpath_LeftClickTextOk_9_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOK\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_9_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_9_11);
            //    if (winElem_LeftClickTextOk_9_11 != null)
            //    {
            //        winElem_LeftClickTextOk_9_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_9_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Yes" at (16,6)
            //    Console.WriteLine("LeftClick on Text \"Yes\" at (16,6)");
            //    string xpath_LeftClickTextYes_16_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"Yes\"][@AutomationId=\"btnYes\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Yes\"]";
            //    var winElem_LeftClickTextYes_16_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextYes_16_6);
            //    if (winElem_LeftClickTextYes_16_6 != null)
            //    {
            //        winElem_LeftClickTextYes_16_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextYes_16_6}");
            //        return;
            //    }


            //    // LeftClick on ComboBox "" at (75,15)
            //    Console.WriteLine("LeftClick on ComboBox \"\" at (75,15)");
            //    string xpath_LeftClickComboBox_75_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/ComboBox[@AutomationId=\"GroupCmb\"]";
            //    var winElem_LeftClickComboBox_75_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickComboBox_75_15);
            //    if (winElem_LeftClickComboBox_75_15 != null)
            //    {
            //        winElem_LeftClickComboBox_75_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickComboBox_75_15}");
            //        return;
            //    }


            //    // LeftClick on Text "TIAutoTest" at (25,8)
            //    Console.WriteLine("LeftClick on Text \"TIAutoTest\" at (25,8)");
            //    string xpath_LeftClickTextTIAutoTest_25_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Window[@ClassName=\"Popup\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"TIAutoTest\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TIAutoTest\"]";
            //    var winElem_LeftClickTextTIAutoTest_25_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIAutoTest_25_8);
            //    if (winElem_LeftClickTextTIAutoTest_25_8 != null)
            //    {
            //        winElem_LeftClickTextTIAutoTest_25_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIAutoTest_25_8}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (100,3)
            //    Console.WriteLine("LeftClick on Edit \"\" at (100,3)");
            //    string xpath_LeftClickEdit_100_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftClickEdit_100_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_100_3);
            //    if (winElem_LeftClickEdit_100_3 != null)
            //    {
            //        winElem_LeftClickEdit_100_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_100_3}");
            //        return;
            //    }


            //    // LeftDblClick on Edit "" at (108,14)
            //    Console.WriteLine("LeftDblClick on Edit \"\" at (108,14)");
            //    string xpath_LeftDblClickEdit_108_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftDblClickEdit_108_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickEdit_108_14);
            //    if (winElem_LeftDblClickEdit_108_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickEdit_108_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickEdit_108_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "b" + Keys.LeftShift"1-2"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"b\" + Keys.LeftShift\"1-2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_100_3.SendKeys(Keys.LeftShift + "b" + Keys.LeftShift);
            //    winElem_LeftClickEdit_100_3.SendKeys("1-2");


            //    // LeftClick on Text "OK" at (7,7)
            //    Console.WriteLine("LeftClick on Text \"OK\" at (7,7)");
            //    string xpath_LeftClickTextOK_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"OK\"][@AutomationId=\"btnOK\"]/Text[@ClassName=\"TextBlock\"][@Name=\"OK\"]";
            //    var winElem_LeftClickTextOK_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOK_7_7);
            //    if (winElem_LeftClickTextOK_7_7 != null)
            //    {
            //        winElem_LeftClickTextOK_7_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOK_7_7}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (109,18)
            //    Console.WriteLine("LeftClick on Edit \"\" at (109,18)");
            //    string xpath_LeftClickEdit_109_18 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftClickEdit_109_18 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_109_18);
            //    if (winElem_LeftClickEdit_109_18 != null)
            //    {
            //        winElem_LeftClickEdit_109_18.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_109_18}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""1"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"1\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_109_18.SendKeys("1");


            //    // LeftClick on Text "OK" at (3,6)
            //    Console.WriteLine("LeftClick on Text \"OK\" at (3,6)");
            //    string xpath_LeftClickTextOK_3_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@Name=\"Error\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"OK\"][@AutomationId=\"btnOK\"]/Text[@ClassName=\"TextBlock\"][@Name=\"OK\"]";
            //    var winElem_LeftClickTextOK_3_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOK_3_6);
            //    if (winElem_LeftClickTextOK_3_6 != null)
            //    {
            //        winElem_LeftClickTextOK_3_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOK_3_6}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (187,11)
            //    Console.WriteLine("LeftClick on Edit \"\" at (187,11)");
            //    string xpath_LeftClickEdit_187_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Edit[@AutomationId=\"TINameTxtBox\"]";
            //    var winElem_LeftClickEdit_187_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_187_11);
            //    if (winElem_LeftClickEdit_187_11 != null)
            //    {
            //        winElem_LeftClickEdit_187_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_187_11}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "-" + Keys.LeftShift"2"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"-\" + Keys.LeftShift\"2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_187_11.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickEdit_187_11.SendKeys("2");


            //    // LeftClick on Text "Ok" at (6,12)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (6,12)");
            //    string xpath_LeftClickTextOk_6_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Save Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_6_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_6_12);
            //    if (winElem_LeftClickTextOk_6_12 != null)
            //    {
            //        winElem_LeftClickTextOk_6_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_6_12}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (862,237)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (862,237)");
            //    string xpath_LeftClickPaneDataPanel_862_237 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_862_237 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_862_237);
            //    if (winElem_LeftClickPaneDataPanel_862_237 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_862_237.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_862_237}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    System.Threading.Thread.Sleep(2000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B1-21_Python");
            //}
        }

        [TestMethod("B1-22")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-22")]
        //B1-22
        public void TIEditor_OpenTIHasFixingFiles_CheckRebuildWindowNotShowingUp(string TIName)
        {
            // Arrange
            string testCmdName;
            string testCmdNameChanged;
            string cmdTable = TIDataTableAutoIDType.PGGrid.ToString();
            string paramTable = TIDataTableAutoIDType.ParameterGrid.ToString();

            //// Step 1. 
            TIFilePath = GetTIFilePath(TIName);                                         // Get TI Testcase path       
            AddCommandBy(TestCmdGroupType.Dll, cmdNumber: 1);                                          // Add Dll Command in 1st place
            PP5IDEWindow.GetDataGridElement(cmdTable).SelectDataGridItemByRowIndex(0);  // Select the command
            PP5IDEWindow.GetDataGridElement(paramTable).GetCellBy(1, 3).LeftClick();    // Fill Up Parameters
            PP5IDEWindow.GetRdoBtnElement("glbRdoBtn").LeftClick();
            PP5IDEWindow.GetDataGridElement(paramTable).GetCellBy(2, 3).LeftClick();
            PP5IDEWindow.GetRdoBtnElement("glbRdoBtn").LeftClick();
            PP5IDEWindow.GetDataGridElement(paramTable).GetCellBy(3, 3).LeftClick();
            PP5IDEWindow.GetRdoBtnElement("glbRdoBtn").LeftClick();

            // TODO: FillUpParameters(int[] paramNums, ParamType[] paramType) method:
            // integrate the above actions into a single method

            testCmdName = GetCellValue(cmdTable, 1, "Test Command");      // Get the test command name
            testCmdNameChanged = testCmdName + "1";

            SaveAsNewTI(TIName);                                                        // Save the TI
            Thread.Sleep(2000);
                                                                                        // Close the TI
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
                                                                                MobileBy.AccessibilityId("CloseButton")).LeftClick();
            /*
            ////// Open New TI (TI, UUT Test)
            //// LeftClick on Text "File" > "New"
            //MenuSelect("File", "New");

            //// LeftClick on RadioButton "UUT Test"
            //Console.WriteLine("LeftClick on RadioButton \"UUT Test\"");
            //PP5IDEWindow.GetElementFromWebElement(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("UUTRdoBtn")).LeftClick();

            //// LeftClick on Button "Ok"
            //Console.WriteLine("LeftClick on Button \"Ok\"");
            //PP5IDEWindow.GetElementFromWebElement(timeOut: 5000, MobileBy.AccessibilityId("LoginDialog"),
            //                                        MobileBy.AccessibilityId("OkBtn")).LeftClick();
            */

            //// Step 2. 
            MenuSelect("Functions", "Management");                                                          // Open management
            WaitUntil(() => PP5IDEWindow.Text == PowerPro5Config.IDE_ManagementWindowName, 10000);
            PP5IDEWindow.ToolBarSelect(4/*Ex-Function*/);
            IElement DllTabPage = PP5IDEWindow.GetTabControlElement("mainTab")
                                                 .TabSelect(4/*Ex-Function*/, "DLL");                       // Tabselect "Ex-Function, DLL"
            DllTabPage.GetDataGridElement("DllDataGrid")                                                    // Select the row whose Test command alias = {testCmdName}
                      .GetRowByName(3, testCmdName)
                      .LeftClick();                                                                         
            DllTabPage.GetWebElementFromWebElement(By.Name("Edit")).LeftClick();                                             // Click on "Edit" button
            PP5IDEWindow.GetWindowElement("Notice")                                                         // 警告視窗跳出，按Yes
                        .GetBtnElement("Yes")
                        .LeftClick();

            
            AutoUIExecutor.SwitchTo(SessionType.Desktop).GetExtendedElementBySingleWithRetry(PP5By.Name("Edit DLL - Unmanaged"))        // Alias (command) 修改為: {testCmdName{1}}
                                                        .GetDataGridElement("TopDataGrid")
                                                        .GetCellBy(1, 3)
                                                        .SendText(testCmdNameChanged);

            AutoUIExecutor.SwitchTo(SessionType.Desktop).GetExtendedElementBySingleWithRetry(PP5By.Name("Edit DLL - Unmanaged"))        // 按OK
                                                        .GetBtnElement("OK")
                                                        .LeftClick();
            Thread.Sleep(1000);
            AutoUIExecutor.SwitchTo(SessionType.Desktop).GetExtendedElementBySingleWithRetry(PP5By.Name("Check files to be fixed"))     // 連動修復視窗，按OK進行修復
                                                        .GetBtnElement("OK")
                                                        .LeftClick();

            PP5IDEWindowRefresh();

            //SharedSetting.forceRefreshPP5Window = true;
            PP5IDEWindow.GetWindowElement("Notice")                                                         // 警告視窗跳出，按OK確定進行修復動作
                        .GetBtnElement("OK")
                        .LeftClick();
            //SharedSetting.forceRefreshPP5Window = false;

            WaitUntil(() => testCmdNameChanged == DllTabPage.GetCellValue("DllDataGrid", 2/*Alias(Command)*/));

            //PP5IDEWindow.GetWindowElement("TI Editor - [{TIName}]")                                            // 確認修復視窗跳出，按OK
            //            .GetBtnElement("OK")
            //            .LeftClick();
            //// Step 3.
            MenuSelect("Functions", "TI Editor");                                   // 開啟TI視窗                   
            LoadOldTI(TIName, TestItemType.TI, TestItemRunType.UUT);         // Load TI file that just finished fixing files

            //PP5IDEWindow.GetWindowElement("TI Editor - [{TIName}]")                    // 確認修復視窗跳出，按OK
            //            .GetBtnElement("OK")
            //            .LeftClick();

            IElement cmdDataGrid = PP5IDEWindow.GetDataGridElement(cmdTable);

            // Check Rebuild window not showing up // 確認是否要 Rebuild的提醒視窗沒有跳出
            // Check Datagrid value on row: 1, column: "Test Command" is {testCmdNameChanged}
            // 檢查TI的內容是否已經更新
            testCmdNameChanged.ShouldEqualTo(cmdDataGrid.GetCellValue(1, 5));
        }

        [TestMethod("B1-23")]
        [TestCategory("檔案操作(B1)")]
        [DataRow("B1-23")]
        //B1-23
        public void TIEditor_OpenTINoFixingFiles_CheckRebuildWindowIsShowingUp(string TIName)
        {
            // Arrange
            string testCmdName;
            string testCmdNameChanged;
            string cmdTable = TIDataTableAutoIDType.PGGrid.ToString();
            string paramTable = TIDataTableAutoIDType.ParameterGrid.ToString();

            //// Step 1. 
            TIFilePath = GetTIFilePath(TIName);                                         // Get TI Testcase path       
            AddCommandBy(TestCmdGroupType.Dll, cmdNumber: 1);                                          // Add Dll Command in 1st place
            PP5IDEWindow.GetDataGridElement(cmdTable).SelectDataGridItemByRowIndex(0);  // Select the command
            PP5IDEWindow.GetDataGridElement(paramTable).GetCellBy(1, 3).LeftClick();    // Fill Up Parameters
            PP5IDEWindow.GetRdoBtnElement("glbRdoBtn").LeftClick();
            PP5IDEWindow.GetDataGridElement(paramTable).GetCellBy(2, 3).LeftClick();
            PP5IDEWindow.GetRdoBtnElement("glbRdoBtn").LeftClick();
            PP5IDEWindow.GetDataGridElement(paramTable).GetCellBy(3, 3).LeftClick();
            PP5IDEWindow.GetRdoBtnElement("glbRdoBtn").LeftClick();

            // TODO: FillUpParameters(int[] paramNums, ParamType[] paramType) method:
            // integrate the above actions into a single method

            testCmdName = GetCellValue(cmdTable, 1, "Test Command");      // Get the test command name
            testCmdNameChanged = testCmdName + "1";

            SaveAsNewTI(TIName);                                                        // Save the TI
            Thread.Sleep(2000);
            // Close the TI
            PP5IDEWindow.GetElementWithRetry<IElement, IElement>(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),
                                                                                MobileBy.AccessibilityId("CloseButton")).LeftClick();

            //// Step 2. 
            MenuSelect("Functions", "Management");                                                          // Open management
            WaitUntil(() => PP5IDEWindow.Text == PowerPro5Config.IDE_ManagementWindowName, 10000);
            PP5IDEWindow.ToolBarSelect(4/*Ex-Function*/);
            IElement DllTabPage = PP5IDEWindow.GetTabControlElement("mainTab")
                                              .TabSelect(4/*Ex-Function*/, "DLL");                       // Tabselect "Ex-Function, DLL"
            DllTabPage.GetDataGridElement("DllDataGrid")                                                    // Select the row whose Test command alias = {testCmdName}
                      .GetRowByName(3, testCmdName)
                      .LeftClick();
            DllTabPage.GetWebElementFromWebElement(By.Name("Edit")).LeftClick();                                             // Click on "Edit" button
            PP5IDEWindow.GetWindowElement("Notice")                                                         // 警告視窗跳出，按Yes
                        .GetBtnElement("Yes")
                        .LeftClick();


            AutoUIExecutor.SwitchTo(SessionType.Desktop).GetExtendedElementBySingleWithRetry(PP5By.Name("Edit DLL - Unmanaged"))        // Alias (command) 修改為: {testCmdName{1}}
                                                        .GetDataGridElement("TopDataGrid")
                                                        .GetCellBy(1, 3)
                                                        .SendText(testCmdNameChanged);

            AutoUIExecutor.SwitchTo(SessionType.Desktop).GetExtendedElementBySingleWithRetry(PP5By.Name("Edit DLL - Unmanaged"))        // 按OK
                                                        .GetBtnElement("OK")
                                                        .LeftClick();
            Thread.Sleep(1000);

            AutoUIExecutor.SwitchTo(SessionType.Desktop).GetExtendedElementBySingleWithRetry(PP5By.Name("Check files to be fixed"))     // 連動修復視窗，取消選取該TI，按OK不進行修復
                                                        .GetBtnElement("Uncheck all")
                                                        .LeftClick();
            AutoUIExecutor.SwitchTo(SessionType.Desktop).GetExtendedElementBySingleWithRetry(PP5By.Name("Check files to be fixed"))
                                                        .GetBtnElement("OK")
                                                        .LeftClick();

            PP5IDEWindowRefresh();

            //SharedSetting.forceRefreshPP5Window = true;
            PP5IDEWindow.GetWindowElement("Notice")                                                         // 警告視窗跳出，按OK確定進行修復動作
                        .GetBtnElement("OK")
                        .LeftClick();
            //SharedSetting.forceRefreshPP5Window = false;

            WaitUntil(() => testCmdNameChanged == DllTabPage.GetCellValue("DllDataGrid", 2/*Alias(Command)*/));

            //PP5IDEWindow.GetWindowElement("TI Editor - [B1-22]")                                            // 確認修復視窗跳出，按OK
            //            .GetBtnElement("OK")
            //            .LeftClick();

            //// Step 3.
            MenuSelect("Functions", "TI Editor");                                   // 開啟TI視窗                   
            LoadOldTI(TIName, TestItemType.TI, TestItemRunType.UUT);         // Load TI file that just finished fixing files

            //PP5IDEWindow.GetWindowElement($"TI Editor - [{TIName}]")                    // 確認修復視窗跳出，按OK
            //            .GetBtnElement("Ok")
            //            .LeftClick();

            // Check Rebuild window not showing up // 確認是否要 Rebuild的提醒視窗有跳出
            Assert.IsNotNull(PP5IDEWindow.GetWindowElement("Rebuild"));
            PP5IDEWindow.GetWindowElement("Rebuild").GetBtnElement("OK").LeftClick();

            // Check Datagrid value on row: 1, column: "Test Command" is {testCmdName}
            // 檢查TI的內容保持為原本內容
            IElement cmdDataGrid = PP5IDEWindow.GetDataGridElement(cmdTable);
            testCmdName.ShouldEqualTo(cmdDataGrid.GetCellValue(1, 5));
        }

        [TestMethod("B2-1")]
        [TestCategory("測試命令列表(B2)")]
        //[DataRow("B2-1")]
        public void TIEditor_AddCommandInCmdGrpList_CheckCommandIsAdded()
        {
            // Arrange
            string cmdName = "AAA_B2-1";            // prefix name: AAA to let command show up on the first in the group list
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;
            string groupName = GetGroupNameByEnum(cgt);
            bool isCmdUpdatedExpected = true;
            bool isCmdUpdated = AddCommandInCGIList(groupName, cmdName);
            isCmdUpdatedExpected.ShouldEqualTo(isCmdUpdated);

            // Action
            // Close TI window and re-open it (reload the cgi list)
            //PP5IDEWindow.GetElementFromWebElement(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),         // Close the TI
            //                                       MobileBy.AccessibilityId("CloseButton")).LeftClick();

            //MenuSelect("Functions", "TI Editor");
            //WaitUntil(() => GetPP5Window() != null);
            PerformOpenNewTI();

            // Check the command is inserted in the command group in TI Editor
            IElement commandAdded = GetCommandBy(cgt, cmdName);
            commandAdded.ShouldNotBeNull();

            // Delete the added command
            int CGIListIdx = GetGroupNames().IndexOf(groupName);
            FileProcessingExtension.JsonDeleteNode(filePath: GetTmpCommandFileFullPath(),
                                                   nodePath: $"CommandGroupInfos[{CGIListIdx}]/Commands[-1]");
        }

        [TestMethod("B2-2")]
        [TestCategory("測試命令列表(B2)")]
        [DataRow(Colors.NavyBlue, Colors.DarkMagenta2, typeof(object), DisplayName = "B2-2")]
        //[DataRow(Colors.White, Colors.Green)]
        //B2-2
        public void TIEditor_ChangeBgFgColorOfTestCommand_VerifyTestCommandColorSame(Colors colorFont, Colors colorBackground, object dummy)
        {
            //colorTabItem.LeftClick();
            MenuSelect("Functions", "Management");                                                          // Open management
            WaitUntil(() => PP5IDEWindow.Text == PowerPro5Config.IDE_ManagementWindowName, 10000);
            PP5IDEWindow.ToolBarSelect(2/*System Setup*/);
            IElement colorTabPage = PP5IDEWindow.GetTabControlElement("mainTab")
                                                .TabSelect("Color");                  // Tabselect "System Setup, Color"

            #region Set font color and bg color
            //string colorCodeFont = "#Navy";                                                             
            //string colorCodeBg = "#FF00FF00";
            SelectColorSettingItem(colorTabPage, ColorSettingPageType.TestCommand, TestCmdGroupType.AC_Source, 1);         // Select the first command of group: "AC Source"
            SetColor(colorTabPage, ColorSettingType.Font, colorFont);
            SetColor(colorTabPage, ColorSettingType.Background, colorBackground);
                                                                                // Get screenshot of the test command (yellow grid) before changing the color
            Screenshot scTestCmdInMgntBeforeSet = GetColorSettingItem(colorTabPage, ColorSettingPageType.TestCommand, TestCmdGroupType.AC_Source, 1)
                                                              .GetFirstTextElement()
                                                              .GetElementImageFromScreenshot();
            
            PP5IDEWindow.GetWebElementFromWebElement(By.Name("OK")).LeftClick();                 // click OK to confirm the setting

                                                                                // If the color is set, testcommand color will change
            Func<bool> getTcTextEleMgFunc = (() => !GetColorSettingItem(colorTabPage, ColorSettingPageType.TestCommand, TestCmdGroupType.AC_Source, 1)
                                                                .GetFirstTextElement()
                                                                .GetElementImageFromScreenshot()
                                                                .Compare(scTestCmdInMgntBeforeSet));
        
            WaitUntil(getTcTextEleMgFunc);                                      // Wait until command color is changed                   
            
                                                                                // Gets the screenshot of test command element in Management window
            Screenshot scTestCmdInMgnt = GetColorSettingItem(colorTabPage, ColorSettingPageType.TestCommand, TestCmdGroupType.AC_Source, 1)
                                                     .GetFirstTextElement()
                                                     .GetElementImageFromScreenshot();
            #endregion

            MenuSelect("Windows", "TI Editor");                                                             // Back to TI window

                                                                                                            
            IWebElement textTestCmdInTI = GetCommandBy(TestCmdGroupType.AC_Source,                          // Get test command textblock (with color)
                                                        "ReadAC_Current", 
                                                        collapseTreeView: false).GetFirstTextElement();
                                                                                                            
            Screenshot scTestCmdInTI = textTestCmdInTI.GetElementImageFromScreenshot();                     // Gets the screenshot of test command element in TestItem window

            scTestCmdInMgntBeforeSet.SaveAsFile(Path.Combine(Environment.CurrentDirectory, "scTestCmdInMgntBeforeSet.png"));
            scTestCmdInMgnt.SaveAsFile(Path.Combine(Environment.CurrentDirectory, "scTestCmdInMgnt.png"));
            scTestCmdInTI.SaveAsFile(Path.Combine(Environment.CurrentDirectory, "scTestCmdInTI.png"));
            //Console.WriteLine($"scTestCmdInMgnt.AsBase64EncodedString:{scTestCmdInMgnt.AsBase64EncodedString}");
            //Console.WriteLine($"scTestCmdInTI.AsBase64EncodedString:{scTestCmdInTI.AsBase64EncodedString}");

            scTestCmdInMgnt.AsBase64EncodedString.ShouldEqualTo(scTestCmdInTI.AsBase64EncodedString);       // Compare the color of the element screenshot by Base64-encoded string property

            #region Restore the color to default
            MenuSelect("Windows", "Management");

            SelectColorSettingItem(colorTabPage, ColorSettingPageType.TestCommand, TestCmdGroupType.AC_Source, 1);          // Select the first command of group: "AC Source"
            SetColor(colorTabPage, ColorSettingType.Font, "default");                                                       // set Font color to "default"
            SetColor(colorTabPage, ColorSettingType.Background, "default");                                                 // set Background color to "default"

            PP5IDEWindow.GetWebElementFromWebElement(By.Name("OK")).LeftClick();                                            // click OK to confirm the setting
            
            //var testresults = TestResultCollection.Results;
            #endregion
        }

        [TestMethod("B2-3")]
        [TestCategory("測試命令列表(B2)")]
        //[DataRow("B2-3")]
        public void TIEditor_AddDeviceRelatedCommandInCmdGrpList_CheckIsDeviceCommandIsAdded()
        {
            // Arrange
            string cmdName = "AAA_B2-3";        // prefix name: AAA to let command show up on the first in the group list
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string groupName = GetGroupNameByEnum(cgt);
            bool isCmdUpdatedExpected = true;
            bool isCmdUpdated = AddCommandInCGIList(groupName, cmdName);
            isCmdUpdatedExpected.ShouldEqualTo(isCmdUpdated);

            // Action
            // Close TI window and re-open it (reload the cgi list)
            //PP5IDEWindow.GetElementFromWebElement(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),         // Close the TI
            //                                       MobileBy.AccessibilityId("CloseButton")).LeftClick();

            //MenuSelect("Functions", "TI Editor");
            //WaitUntil(() => GetPP5Window() != null);
            PerformOpenNewTI();

            // Assert                                                        
            // Check the command is inserted in the command group in TI Editor
            IWebElement commandAdded = GetCommandBy(cgt, cmdName);
            commandAdded.ShouldNotBeNull();

            // Delete the added command
            int CGIListIdx = GetGroupNames().IndexOf(groupName);
            FileProcessingExtension.JsonDeleteNode(filePath: GetTmpCommandFileFullPath(),
                                                   nodePath: $"CommandGroupInfos[{CGIListIdx}]/Commands[-1]");
        }

        [TestMethod("B2-4")]
        [TestCategory("測試命令列表(B2)")]
        //[DataRow("B2-4")]
        public void TIEditor_AddDeviceUnrelatedCommandInCmdGrpList_CheckSystemCommandIsAdded()
        {
            // Arrange
            string cmdName = "AAA_B2-4";                // prefix name: AAA to let command show up on the first in the group list
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;
            string groupName = GetGroupNameByEnum(cgt);
            bool isCmdUpdatedExpected = true;
            bool isCmdUpdated = AddCommandInCGIList(groupName, cmdName);
            isCmdUpdatedExpected.ShouldEqualTo(isCmdUpdated);

            // Action
            // Close TI window and re-open it (reload the cgi list)
            //PP5IDEWindow.GetElementFromWebElement(timeOut: 5000, By.Name(PowerPro5Config.IDE_TIEditorWindowName),         // Close the TI
            //                                       MobileBy.AccessibilityId("CloseButton")).LeftClick();

            //MenuSelect("Functions", "TI Editor");                                                           // Open New TI window
            //WaitUntil(() => GetPP5Window() != null);
            PerformOpenNewTI();

            // Assert
            // Check the command is inserted in the command group in TI Editor
            IWebElement commandAdded = GetCommandBy(cgt, cmdName);
            commandAdded.ShouldNotBeNull();

            // Delete the added command
            int CGIListIdx = GetGroupNames().IndexOf(groupName);
            FileProcessingExtension.JsonDeleteNode(filePath: GetTmpCommandFileFullPath(),
                                                   nodePath: $"CommandGroupInfos[{CGIListIdx}]/Commands[-1]");
        }

        [TestMethod("B2-5_Python")]
        [TestCategory("測試命令列表(B2)")]
        //[DataRow("B2-5_Python")]
        public void TIEditor_ModifyPythonCommandNameInManagement_CheckPythonCommandIsUpdated()
        {
            // Arrange
            //// Step 1. Create a new python command with name: "AAA_B2-5_Python"
            string cmdName = "AAA_B2-5_Python";                                                             // prefix name: AAA to let command show up on the first in the group list
            string cmdNameChanged = "AAA_B2-5_Python1";
            TestCmdGroupType cgt = TestCmdGroupType.Python;
            string groupName = GetGroupNameByEnum(cgt);
            string dummyPythonPath = Path.Combine(Environment.CurrentDirectory, cmdName + ".py");

            File.Create(dummyPythonPath).Close();
            Logger.LogMessage($"Dummy Python generated at: {dummyPythonPath}");
            
            //bool isCmdUpdatedExpected = true;
            //bool isCmdUpdated = AddEmptyCommandInCGIList(groupName, cmdName);
            //isCmdUpdatedExpected.ShouldEqualTo(isCmdUpdated);

            // Action
            // Step 2-1. Create a new python command with name: "AAA_B2-5_Python"
            MenuSelect("Functions", "Management");                                                          // Open management
            WaitUntil(() => PP5IDEWindow.Text == PowerPro5Config.IDE_ManagementWindowName, SharedSetting.LONG_TIMEOUT);
            PP5IDEWindow.ToolBarSelect(4/*Ex-Function*/);
            IElement PythonTabPage = PP5IDEWindow.GetTabControlElement("mainTab")
                                                 .TabSelect("Python");                                      // Tabselect "Ex-Function, Python"
            var pythonTable = PythonTabPage.GetDataGridElement("PythonDataGrid");                           // Select the row whose Test command alias is "AAA_B2-5_Python"

            PythonTabPage.PerformClick("/ByName[Add]", ClickType.LeftClick);                                // Add the DLL
            var fileDialog = PP5IDEWindow.GetExtendedElement(PP5By.Name("Document"));
            Logger.LogMessage($"fileDialog windowName: {fileDialog.ControlType.ToString()}");
            fileDialog.GetExtendedElement(PP5By.ClassName("Address Band Root"))
                      .GetExtendedElement(PP5By.Id("1001"))
                      .SelectItem(Environment.CurrentDirectory);

            fileDialog.GetExtendedElement(PP5By.Name("項目檢視"))
                      .SelectItem(cmdName + ".py");
            fileDialog.GetWebElementFromWebElement(By.Name("開啟(O)"))
                      .LeftClick();
            /// List[@ClassName =\"UIItemsView\"][@Name=\"項目檢視\"]/ListItem[@ClassName=\"UIItem\"][@Name=\"testdll.dll\"]/Edit[@Name=\"名稱\"][@AutomationId=\"System.ItemNameDisplay\"]"
            //]\"]/Window[@ClassName=\"#32770\"][@Name=\"Document\"]/Button[@ClassName=\"Button\"][@Name=\"開啟(O)\"]"

            Thread.Sleep(SharedSetting.SHORT_TIMEOUT);
            var AddPythonWindow = AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformGetElement("/ByName[Add Python]");
            
            AddPythonWindow.PerformInput("/ByCell@TopDataGrid[1,1]", InputType.SendContent, cmdName);    // Input the command name
            Press(Keys.Enter);
            AddPythonWindow.PerformClick("/ByName[OK]", ClickType.LeftClick);                               // 按OK
            Thread.Sleep(5000);
            PP5IDEWindowRefresh();
            WaitUntil(() => cmdName == PP5IDEWindow.GetCellValue("PythonDataGrid", 3/*Alias(Command)*/));

            // create a filewatcher to monitor the Python file changes (watch all Python files in all Python related folders)
            string filePath = string.Format(PowerPro5Config.SubPathPattern, PowerPro5Config.ReleaseFolder, "Python");
            string fileExtName = "py";
            FileSystemWatcherWrapper fileWatcher = new FileSystemWatcherWrapper();
            NotifyFilters notifyFilters = NotifyFilters.LastWrite | NotifyFilters.CreationTime;
            fileWatcher.CreateFileWatcher(filePath, notifyFilters, fileExtName);
            fileWatcher.FileChanged += FileWatcher_UpdateDllOrPythonInfos;

            // Step 2-2. In management, change the command name to "AAA_B2-5_Python1"
            pythonTable.GetRowByName(3, cmdName)
                       .LeftClick();
            PythonTabPage.PerformClick("/ByName[Edit]", ClickType.LeftClick);                                           // Click on "Edit" button

            AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformGetElement("/ByName[Edit Python]")                      // Alias (command)欄位修改command name: "AAA_B2-5_Python" > "AAA_B2-5_Python1"
                                                        .GetDataGridElement("TopDataGrid")
                                                        .GetCellBy(1, 3)
                                                        .SendText(cmdNameChanged);

            AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformGetElement("/ByName[Edit Python]")                      // 按OK
                                                        .PerformClick("/ByName[OK]", ClickType.LeftClick);

            Thread.Sleep(SharedSetting.NORMAL_TIMEOUT);
            PP5IDEWindowRefresh();

            WaitUntil(() => cmdNameChanged == PP5IDEWindow.GetCellValue("PythonDataGrid", 3/*Alias(Command)*/));        // 檢查欄位是否已更新到datatable

            // Step 3. Switch back to TI Editor, check command name is updated to "AAA_B2-5_Python1"
            MenuSelect("Windows", "TI Editor");
            PP5IDEWindowRefresh();

            // Assert
            // Check the command is updated to the newname in TI Editor
            IWebElement commandAdded = GetCommandBy(cgt, cmdNameChanged);
            commandAdded.ShouldNotBeNull();

            // Delete the added command
            DeleteTIorTPorCommand(MngtDataTableAutoIDType.PythonDataGrid, cmdNameChanged);
            //MenuSelect("Windows", "Management");
            //PP5IDEWindow.GetSelectedRow("PythonDataGrid")
            //            .GetCellBy(2/*Active*/).GetFirstCheckBoxElement()
            //            .UnTickCheckBox();

            //if (PP5IDEWindow.PerformGetElement("/ByName[Error]") != null)
            //    PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //PP5IDEWindow.PerformClick("/Button[Delete]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Yes]", ClickType.LeftClick);

            // Delete the added command
            int CGIListIdx = GetGroupNames().IndexOf(groupName);
            FileProcessingExtension.JsonDeleteNode(filePath: GetTmpCommandFileFullPath(),
                                                   nodePath: $"CommandGroupInfos[{CGIListIdx}]/Commands[-1]");

            fileWatcher.FileChanged -= FileWatcher_UpdateDllOrPythonInfos;
        }

        [TestMethod("B2-5_Dll")]
        [TestCategory("測試命令列表(B2)")]
        //[DataRow("B2-5_Dll")]
        public void TIEditor_ModifyDllCommandNameInManagement_CheckDllCommandIsUpdated()
        {
            // Arrange
            //// Step 1. Create a new Dll command with name: "AAA_B2-5_Dll", and add the command into PP5
            string cmdName = "AAA_B2-5_Dll";                                                                                // prefix name: AAA to let command show up on the first in the group list
            string cmdNameChanged = "AAA_B2-5_Dll1";
            TestCmdGroupType cgt = TestCmdGroupType.Dll;
            
            //bool isCmdUpdatedExpected = true;
            //bool isCmdUpdated = AddEmptyCommandInCGIList(groupName, cmdName);
            //isCmdUpdatedExpected.ShouldEqualTo(isCmdUpdated);

            DllHelper.DummyDllGenerator.GenerateDummyDll(dllName: cmdName, dllClassName:cmdName, dllFunctionName:cmdName);  // Generate the dummy DLL    
            Logger.LogMessage($"Dummy DLL generated at: {Path.Combine(Environment.CurrentDirectory, cmdName)}");

            // Action
            // 2.1 Switch to management, add the dll command "AAA_B2-5_Dll"
            MenuSelect("Functions", "Management");                                                          // Open management
            WaitUntil(() => PP5IDEWindow.Text == PowerPro5Config.IDE_ManagementWindowName, SharedSetting.LONG_TIMEOUT);
            PP5IDEWindow.ToolBarSelect(4/*Ex-Function*/);
            IElement DllTabPage = PP5IDEWindow.GetTabControlElement("mainTab")
                                              .TabSelect("DLL");                            // Tabselect "Ex-Function, DLL"

            DllTabPage.PerformClick("/ByName[Add]", ClickType.LeftClick);                   // Add the DLL
            var fileDialog = PP5IDEWindow.GetExtendedElement(PP5By.Name("Document"));
            Logger.LogMessage($"fileDialog windowName: {fileDialog.ControlType.ToString()}");
            fileDialog.GetExtendedElement(PP5By.ClassName("Address Band Root"))
                      .GetExtendedElement(PP5By.Id("1001"))
                      .SelectItem(Environment.CurrentDirectory);

            fileDialog.GetExtendedElement(PP5By.Name("項目檢視"))
                      .SelectItem(cmdName + ".dll");
            fileDialog.GetWebElementFromWebElement(By.Name("開啟(O)"))
                      .LeftClick();
            /// List[@ClassName =\"UIItemsView\"][@Name=\"項目檢視\"]/ListItem[@ClassName=\"UIItem\"][@Name=\"testdll.dll\"]/Edit[@Name=\"名稱\"][@AutomationId=\"System.ItemNameDisplay\"]"
            //]\"]/Window[@ClassName=\"#32770\"][@Name=\"Document\"]/Button[@ClassName=\"Button\"][@Name=\"開啟(O)\"]"

            Thread.Sleep(SharedSetting.SHORT_TIMEOUT);
            AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformGetElement("/ByName[Add DLL - Managed DLL]")       // 按OK
                                                        .PerformClick("/ByName[OK]", ClickType.LeftClick);

            Thread.Sleep(SharedSetting.SHORT_TIMEOUT);
            PP5IDEWindowRefresh();
            WaitUntil(() => cmdName == PP5IDEWindow.GetCellValue("DllDataGrid", 3/*Alias(Command)*/));

            // create a filewatcher to monitor the dll file changes (watch all DLLs in all DLL related folders)
            string filePath = string.Format(PowerPro5Config.SubPathPattern, PowerPro5Config.ReleaseFolder, "Dll");
            string fileExtName = "dll";
            FileSystemWatcherWrapper fileWatcher = new FileSystemWatcherWrapper();
            NotifyFilters notifyFilters = NotifyFilters.LastWrite | NotifyFilters.CreationTime;
            fileWatcher.CreateFileWatcher(filePath, notifyFilters, fileExtName);
            fileWatcher.FileChanged += FileWatcher_UpdateDllOrPythonInfos;

            // Step 2-2. In management, change the command name to "AAA_B2-5_Dll1"
            PP5IDEWindow.GetDataGridElement("DllDataGrid")
                        .GetRowByName(3, cmdName)
                        .LeftClick();

            PP5IDEWindow.PerformClick("/ByName[Edit]", ClickType.LeftClick);                                        // Click on "Edit" button
            AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformGetElement("/ByName[Edit DLL - Managed]")           // Alias (command)欄位修改command name: "AAA_B2-5_Dll" > "AAA_B2-5_Dll1"
                                                        .GetDataGridElement("TopDataGrid")
                                                        .GetCellBy(1, 3)
                                                        .SendText(cmdNameChanged);

            AutoUIExecutor.SwitchTo(SessionType.Desktop).PerformGetElement("/ByName[Edit DLL - Managed]")           // 按OK
                                                        .PerformClick("/ByName[OK]", ClickType.LeftClick);

            Thread.Sleep(SharedSetting.NORMAL_TIMEOUT);
            PP5IDEWindowRefresh();

            WaitUntil(() => cmdNameChanged == PP5IDEWindow.GetCellValue("DllDataGrid", 3/*Alias(Command)*/)); // 檢查欄位是否已更新到datatable

            //// Step 3. Switch back to TI Editor, check command name is updated to "AAA_B2-5_Dll1"
            MenuSelect("Windows", "TI Editor");

            // Assert
            // Check the command is updated to the newname in TI Editor
            IWebElement commandAdded = GetCommandBy(cgt, cmdNameChanged);
            commandAdded.ShouldNotBeNull();

            // Delete the added command
            DeleteTIorTPorCommand(MngtDataTableAutoIDType.DllDataGrid, cmdNameChanged);
            //MenuSelect("Windows", "Management");
            //PP5IDEWindow.GetSelectedRow("DllDataGrid")
            //            .GetCellBy(2/*Active*/).GetFirstCheckBoxElement()
            //            .UnTickCheckBox();
            //PP5IDEWindow.PerformClick("/Button[Delete]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Yes]", ClickType.LeftClick);

            fileWatcher.FileChanged -= FileWatcher_UpdateDllOrPythonInfos;

            //PP5IDEWindow.GetSelectedRow("DllDataGrid")
            //            .GetCellBy(2/*Active*/)
            //            .PerformClick("/CheckBox[0]", ClickType.UnTickCheckBox);
            //PP5IDEWindow.PerformClick("/Button[Delete]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/Window[Notice]/Button[Yes]", ClickType.LeftClick);

            //int CGIListIdx = GetGroupNames().IndexOf(groupName);
            //FileProcessingExtension.JsonDeleteNode(filePath: GetTmpCommandFileFullPath(),
            //                                       nodePath: $"CommandGroupInfos[{CGIListIdx}]/Commands[-1]");
        }

        [TestMethod("B2-6")]
        [TestCategory("測試命令列表(B2)")]
        [DataRow(TestItemType.SubTI, typeof(object), DisplayName = "Rename SubTI In Management, Check SubTI Not Updated")]
        [DataRow(TestItemType.ThreadTI, typeof(object), DisplayName = "Rename SubTI In Management, Check ThreadTI Not Updated")]
        public void TIEditor_RenameSubTIInManagement(TestItemType itemType, object dummy)
        {
            string subTiName = "B2-6_SubTi";
            string newSubTiName = "B2-6_SubTi_new";
            PerformOpenAndSaveTI(subTiName, TestItemType.SubTI, TestItemRunType.UUT);               // Save new sub-TI
            PerformCloseTI();

            TIExecuteAction(TIAction.SetTIActive, subTiName);

            PerformOpenNewTI(itemType, TestItemRunType.UUT);
            //if (itemType == TestItemType.ThreadTI)
                GetCmdGroupTreeItemByGroupName(TestCmdGroupType.Sub_TI).ShouldBeNull();
            //else
            //    GetCommandBy(TestCmdGroupType.Sub_TI, subTiName).ShouldBeNull();
            PerformCloseTI();

            TIRename(subTiName, newSubTiName);

            PerformOpenNewTI(itemType, TestItemRunType.UUT);
            //if (itemType == TestItemType.ThreadTI)
                GetCmdGroupTreeItemByGroupName(TestCmdGroupType.Sub_TI).ShouldBeNull();
            //else
            //    GetCommandBy(TestCmdGroupType.Sub_TI, newSubTiName).ShouldBeNull();
            PerformCloseTI();

            //// Clean up subti/threadti
            DeleteTIorTPorCommand(MngtDataTableAutoIDType.TestItem_DataGrid, newSubTiName);
            //SwitchToModule(WindowType.Management);
            //SearchTI(newSubTiName);
            //PP5IDEWindow.PerformClick("/ByName[Delete]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Yes]", ClickType.LeftClick);
            //SpinWait.SpinUntil(() => PP5IDEWindow.PerformGetElement("/ProgressBar[0]") == null);
        }

        [TestMethod("B2-6_1")]
        [TestCategory("測試命令列表(B2)")]
        public void TIEditor_RenameSubTIInManagement_CheckTIIsUpdated()
        {
            string subTiName = "B2-6_SubTi";
            string newSubTiName = "B2-6_SubTi_new";
            PerformOpenAndSaveTI(subTiName, TestItemType.SubTI, TestItemRunType.UUT);                       // Save new sub-TI
            PerformCloseTI();

            TIExecuteAction(TIAction.SetTIActive, subTiName);

            PerformOpenNewTI(TestItemType.TI, TestItemRunType.UUT);                                         // Open new TI and include the subTI
            GetCommandBy(TestCmdGroupType.Sub_TI, subTiName).ShouldNotBeNull();
            PerformCloseTI();

            TIRename(subTiName, newSubTiName);

            PerformOpenNewTI(TestItemType.TI, TestItemRunType.UUT);
            GetCommandBy(TestCmdGroupType.Sub_TI, newSubTiName).ShouldNotBeNull();
            PerformCloseTI();

            DeleteTIorTPorCommand(MngtDataTableAutoIDType.TestItem_DataGrid, newSubTiName);
        }

        //[TestMethod("B2-6_2")]
        //[TestCategory("測試命令列表(B2)")]
        //public void TIEditor_RenameSubTIInManagement_CheckSubTINotUpdated()
        //{
        //    string subTiName = "B2-6_SubTi";
        //    string newSubTiName = "B2-6_SubTi_new";
        //    PerformOpenAndSaveTI(subTiName, TestItemType.SubTI, TestItemRunType.UUT);                       // Save new sub-TI
        //    PerformCloseTI();

        //    TIExecuteAction(TIAction.SetTIActive, subTiName);

        //    PerformOpenNewTI(TestItemType.SubTI, TestItemRunType.UUT);                                      // Open new sub-TI and include the subTI
        //    GetCmdGroupTreeItemByGroupName("Sub TI").ShouldBeNull();

        //    TIRename(subTiName, newSubTiName);

        //    MenuSelect("Windows", "TI Editor");
        //    GetCmdGroupTreeItemByGroupName("Sub TI").ShouldBeNull();
        //}

        //[TestMethod("B2-6_3")]
        //[TestCategory("測試命令列表(B2)")]
        //public void TIEditor_RenameSubTIInManagement_CheckThreadTINotUpdated()
        //{
        //    string subTiName = "B2-6_SubTi";
        //    string newSubTiName = "B2-6_SubTi_new";
        //    PerformOpenAndSaveTI(subTiName, TestItemType.SubTI, TestItemRunType.UUT);               // Save new sub-TI
        //    PerformCloseTI();

        //    TIExecuteAction(TIAction.SetTIActive, subTiName);

        //    PerformOpenNewTI(TestItemType.ThreadTI, TestItemRunType.UUT);                           // Open new thread-TI and include the subTI
        //    GetCmdGroupTreeItemByGroupName("Sub TI").ShouldBeNull();

        //    TIRename(subTiName, newSubTiName);

        //    MenuSelect("Windows", "TI Editor");
        //    GetCmdGroupTreeItemByGroupName("Sub TI").ShouldBeNull();
        //}

        [TestMethod("B2-7")]
        [TestCategory("測試命令列表(B2)")]
        [DataRow(TestItemType.TI, typeof(object), DisplayName = "Rename ThreadTI In Management, Check TI Has Cmd List Updated")]
        [DataRow(TestItemType.SubTI, typeof(object), DisplayName = "Rename ThreadTI In Management, Check SubTI Has Cmd List Updated")]
        public void TIEditor_RenameThreadTIInManagement(TestItemType itemType, object dummy)
        {
            string threadTiName = "B2-6_ThreadTi";
            string newThreadTiName = "B2-6_ThreadTi_new";
            PerformOpenAndSaveTI(threadTiName, TestItemType.ThreadTI, TestItemRunType.UUT);     // Save new thread-TI
            PerformCloseTI();

            TIExecuteAction(TIAction.SetTIActive, threadTiName);

            PerformOpenNewTI(itemType, TestItemRunType.UUT);                                    // Open new TI of itemType and include the threadTI
            GetCommandBy(TestCmdGroupType.Thread_TI, threadTiName).ShouldNotBeNull();

            TIRename(threadTiName, newThreadTiName);

            PP5IDEWindow.MenuSelect("Windows", "TI Editor");
            GetCommandBy(TestCmdGroupType.Thread_TI, newThreadTiName).ShouldNotBeNull();

            DeleteTIorTPorCommand(MngtDataTableAutoIDType.TestItem_DataGrid, newThreadTiName);
        }

        //[TestMethod("B2-7_1")]
        //[TestCategory("測試命令列表(B2)")]
        //public void TIEditor_RenameThreadTIInManagement_CheckTIHasCmdListUpdated()
        //{
        //    string threadTiName = "B2-6_ThreadTi";
        //    string newThreadTiName = "B2-6_ThreadTi_new";
        //    PerformOpenAndSaveTI(threadTiName, TestItemType.ThreadTI, TestItemRunType.UUT);         // Save new thread-TI
        //    PerformCloseTI();

        //    TIExecuteAction(TIAction.SetTIActive, threadTiName);

        //    PerformOpenNewTI(TestItemType.TI, TestItemRunType.UUT);                                 // Open new TI and include the threadTI
        //    GetCommandBy("Thread TI", threadTiName).ShouldNotBeNull();

        //    TIRename(threadTiName, newThreadTiName);

        //    MenuSelect("Windows", "TI Editor");
        //    GetCommandBy("Thread TI", newThreadTiName).ShouldNotBeNull();
        //}

        //[TestMethod("B2-7_2")]
        //[TestCategory("測試命令列表(B2)")]
        //public void TIEditor_RenameThreadTIInManagement_CheckSubTIHasCmdListUpdated()
        //{
        //    string threadTiName = "B2-6_ThreadTi";
        //    string newThreadTiName = "B2-6_ThreadTi_new";
        //    PerformOpenAndSaveTI(threadTiName, TestItemType.ThreadTI, TestItemRunType.UUT);         // Save new thread-TI
        //    PerformCloseTI();

        //    TIExecuteAction(TIAction.SetTIActive, threadTiName);

        //    PerformOpenNewTI(TestItemType.SubTI, TestItemRunType.UUT);                              // Open new SubTI and include the threadTI
        //    GetCommandBy("Thread TI", threadTiName).ShouldNotBeNull();

        //    TIRename(threadTiName, newThreadTiName);

        //    MenuSelect("Windows", "TI Editor");
        //    GetCommandBy("Thread TI", newThreadTiName).ShouldNotBeNull();
        //}

        [TestMethod("B2-7_1")]
        [TestCategory("測試命令列表(B2)")]
        public void TIEditor_RenameThreadTIInManagement_CheckThreadTINotInCmdList()
        {
            string threadTiName = "B2-6_ThreadTi";
            string newThreadTiName = "B2-6_ThreadTi_new";
            PerformOpenAndSaveTI(threadTiName, TestItemType.ThreadTI, TestItemRunType.UUT);         // Save new thread-TI
            PerformCloseTI();

            TIExecuteAction(TIAction.SetTIActive, threadTiName);

            PerformOpenNewTI(TestItemType.ThreadTI, TestItemRunType.UUT);                           // Open new Thread-TI and include the threadTI
            GetCmdGroupTreeItemByGroupName(TestCmdGroupType.Thread_TI).ShouldBeNull();

            TIRename(threadTiName, newThreadTiName);

            MenuSelect("Windows", "TI Editor");
            GetCmdGroupTreeItemByGroupName(TestCmdGroupType.Thread_TI).ShouldBeNull();

            DeleteTIorTPorCommand(MngtDataTableAutoIDType.TestItem_DataGrid, newThreadTiName);
        }

        [TestMethod("B3-1_1")]
        [TestCategory("測試命令搜尋(B3)")]
        //B3-1_1
        public void TIEditor_SearchInTestCommandList_ByPressingEnter()
        {
            string searchPattern = "ReadAC_Current";

            PP5IDEWindow.PerformInput("/ById[TCListPanel]/ById[searchText]", InputType.SendContent, searchPattern); // Get the Command page search box and search with the command
            Press(Keys.Enter);

            GetCommandBy(TestCmdGroupType.AC_Source, searchPattern, doExpand: false).ShouldBeSelected();                                                           // Verify the command is searched
        }

        [TestMethod("B3-1_2")]
        [TestCategory("測試命令搜尋(B3)")]
        //B3-1_2
        public void TIEditor_SearchInTestCommandList_ByPressingSearchButton()
        {
            //  Searching Command name: "ReadAC_Current"
            string searchPattern = "ReadAC_Current";

            PP5IDEWindow.PerformInput("/ById[TCListPanel]/ById[searchText]", InputType.SendContent, searchPattern); // Get the Command page search box and search with the command
            PP5IDEWindow.PerformClick("/ById[TCListPanel]/ById[SearchBtn]", ClickType.LeftClick);

            GetCommandBy(TestCmdGroupType.AC_Source, searchPattern, doExpand: false).ShouldBeSelected();
        }

        [TestMethod("B3-2_1")]
        [TestCategory("測試命令搜尋(B3)")]
        //B3-2_1
        public void TIEditor_SearchInTestCommandListDown_ByPressingSearchDownButton()
        {
            //  Searching Command name: "ReadAC_Current"
            string searchPattern = "ReadAC_Current";
            string warningMessage = "Search to the end, whether to search from the beginning ?";

            PP5IDEWindow.PerformInput("/ById[TCListPanel]/ById[searchText]", InputType.SendContent, searchPattern); // Get the Command page search box and search with the command

            // Keep pressing "search Next" button until message box: "Search Result" show up
            while (!CheckMessageBoxOpened(By.Name("Search Result")))
            {
                PP5IDEWindow.PerformClick("/ById[TCListPanel]/ById[NextBtn]", ClickType.LeftClick);
            }

            true.ShouldEqualTo(CheckMessageBoxOpened(By.Name("Search Result")));
            string warningMessageActual = PP5IDEWindow.PerformGetElement("/Window[Search Result]/ById[txtBlockMsg]").GetCellValue();
            warningMessage.ShouldEqualTo(warningMessageActual);

            // Close message box
            //CurrentDriver.GetElementFromWebElement(5000, By.Name("Search Result"), By.Name("No")).LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Search Result]/ByName[No]", ClickType.LeftClick);
        }

        [TestMethod("B3-2_2")]
        [TestCategory("測試命令搜尋(B3)")]
        //B3-2_2
        public void TIEditor_SearchInTestCommandListDown_ByPressingSearchF3()
        {
            //  Searching Command name: "ReadAC_Current"
            string searchPattern = "ReadAC_Current";
            string warningMessage = "Search to the end, whether to search from the beginning ?";

            PP5IDEWindow.PerformInput("/ById[TCListPanel]/ById[searchText]", InputType.SendContent, searchPattern); // Get the Command page search box and search with the command

            // Keep pressing "search Next" button until message box: "Search Result" show up
            while (!CheckMessageBoxOpened(By.Name("Search Result")))
            {
                Press(Keys.F3);
            }

            true.ShouldEqualTo(CheckMessageBoxOpened(By.Name("Search Result")));
            string warningMessageActual = PP5IDEWindow.PerformGetElement("/Window[Search Result]/ById[txtBlockMsg]").GetCellValue();
            warningMessage.ShouldEqualTo(warningMessageActual);

            // Close message box
            //CurrentDriver.GetElementFromWebElement(5000, By.Name("Search Result"), By.Name("No")).LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Search Result]/ByName[No]", ClickType.LeftClick);
        }

        [TestMethod("B3-3")]
        [TestCategory("測試命令搜尋(B3)")]
        //B3-3
        public void TIEditor_SearchInTestCommandListUp_ByPressingSearchUpButton()
        {
            //  Searching Command name: "ReadAC_Current"
            string searchPattern = "ReadAC_Current";
            string warningMessage = "Search to the end, whether to search from the beginning ?";

            PP5IDEWindow.PerformInput("/ById[TCListPanel]/ById[searchText]", InputType.SendContent, searchPattern); // Get the Command page search box and search with the command

            // Keep pressing "search Previus" button until message box: "Search Result" show up
            while (!CheckMessageBoxOpened(By.Name("Search Result")))
            {
                PP5IDEWindow.PerformClick("/ById[TCListPanel]/ById[PreviosBtn]", ClickType.LeftClick);
            }

            true.ShouldEqualTo(CheckMessageBoxOpened(By.Name("Search Result")));
            string warningMessageActual = PP5IDEWindow.PerformGetElement("/Window[Search Result]/ById[txtBlockMsg]").GetCellValue();
            warningMessage.ShouldEqualTo(warningMessageActual);

            // Close message box
            //CurrentDriver.GetElementFromWebElement(5000, By.Name("Search Result"), By.Name("No")).LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Search Result]/ByName[No]", ClickType.LeftClick);
        }

        //[TestMethod("B3-1_SearchByEnterKey")]
        //[TestCategory("測試命令搜尋(B3)")]
        ////B3-1_SearchByEnterKey
        //public void TIEditor_UseCommandByCommandSearch_SearchByEnterKey()
        //{
        //    // Input Command name: "SET"
        //    string CommandName = "SET";
        //    IWebElement testCmdSearchBox = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("searchBox"));
        //    testCmdSearchBox.ClearContent();

        //    // Search By EnterKey
        //    testCmdSearchBox.SendComboKeys(CommandName, OpenQA.Selenium.Keys.Enter);

        //    // Check command names are same
        //    //Assert.AreEqual(CommandName, GetCommandBy(CommandName).GetSubElementText());
        //    string searchedCommand = GetCommandIsSelected(CommandName, GroupNameToSearch: "", findExactSameCommand: false).GetFirstTextContent();
        //    //Assert.IsTrue(searchedCommand.ToUpper().Contains(CommandName));

        //    string errorMsg = $"The searchedCommand: {searchedCommand} didn't contains Command name {CommandName}.";
        //    StringAssert.Contains(searchedCommand.ToUpper(), CommandName, errorMsg);

        //    ////MainPanel_TIEditor_OpenNewTI();
        //    //TimeSpan.FromSeconds(2);

        //    //bool bSuccess = false;

        //    //try
        //    //{
        //    //    // LeftClick on Edit "" at (50,7)
        //    //    Console.WriteLine("LeftClick on Edit \"\" at (50,7)");
        //    //    string xpath_LeftClickEdit_50_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
        //    //    //var winElem_LeftClickEdit_50_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_50_7);
        //    //    uIActionPP5IDE.PerformActionByAutomationID(ActionType.None, "searchText");
        //    //    if (uIActionPP5IDE.ElementFound != null)
        //    //    {
        //    //        uIActionPP5IDE.ElementFound.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        LogHelper.LogFindElementFailedByAutomationID("searchText");
        //    //        //LogHelper.LogFindElementFaidByXPath(xpath_LeftClickEdit_50_7);
        //    //        //Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_50_7}");
        //    //        return;
        //    //    }


        //    //    // KeyboardInput VirtualKeys=""y"Keys.LeftShift + "/" + Keys.LeftShift" CapsLock=False NumLock=True ScrollLock=False
        //    //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"y\"Keys.LeftShift + \"/\" + Keys.LeftShift\" CapsLock=False NumLock=True ScrollLock=False");
        //    //    System.Threading.Thread.Sleep(100);
        //    //    uIActionPP5IDE.ElementFound.SendKeys("y");
        //    //    uIActionPP5IDE.ElementFound.SendKeys(Keys.LeftShift + "/" + Keys.LeftShift);


        //    //    // LeftClick on Image "" at (8,3)
        //    //    Console.WriteLine("LeftClick on Image \"\" at (8,3)");
        //    //    string xpath_LeftClickImage_8_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]/Image[@ClassName=\"Image\"]";
        //    //    var winElem_LeftClickImage_8_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_8_3);
        //    //    if (winElem_LeftClickImage_8_3 != null)
        //    //    {
        //    //        winElem_LeftClickImage_8_3.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_8_3}");
        //    //        return;
        //    //    }

        //    //    AutoUIExtension.TakeScreenshotPNGformat(true, "B3-1");


        //    //    bSuccess = true;
        //    //}

        //    //finally
        //    //{
        //    //    Assert.AreEqual(bSuccess, true);
        //    //}
        //}

        //[TestMethod("B3-1_SearchBySearchButton")]
        //[TestCategory("測試命令搜尋(B3)")]
        ////B3-1_SearchBySearchButton
        //public void TIEditor_UseCommandByCommandSearch_SearchBySearchButton()
        //{
        //    // Input Command name: "SET"
        //    string CommandName = "SET";
        //    IWebElement testCmdSearchBox = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("searchBox"));
        //    testCmdSearchBox.ClearContent();
        //    testCmdSearchBox.SendSingleKeys(CommandName);

        //    // Search By SearchButton
        //    CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("SearchBtn")).LeftClick();

        //    // Check command names are same
        //    //Assert.AreEqual(CommandName, GetCommandBy(CommandName).GetSubElementText());
        //    string searchedCommand = GetCommandIsSelected(CommandName, GroupNameToSearch: "", findExactSameCommand: false).GetFirstTextContent();
        //    //Assert.IsTrue(searchedCommand.ToUpper().Contains(CommandName));

        //    string errorMsg = $"The searchedCommand: {searchedCommand} didn't contains Command name {CommandName}.";
        //    StringAssert.Contains(searchedCommand.ToUpper(), CommandName, errorMsg);
        //}

        //[TestMethod("B3-2_SearchByDownwardButton")]
        //[TestCategory("測試命令搜尋(B3)")]
        ////B3-2_SearchByDownwardButton
        //public void TIEditor_UseCommandByCommandSearchDownwards_SearchByDownwardButton()
        //{
        //    // Input Command name: "FLOOR"
        //    string CommandName = "FLOOR";
        //    IWebElement testCmdSearchBox = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("searchText"));
        //    testCmdSearchBox.ClearContent();
        //    testCmdSearchBox.SendSingleKeys(CommandName);

        //    // Search By DownwardButton until message box: "Search to the end" show up
        //    //do
        //    //{
        //    //    CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("NextBtn")).LeftClickWithDelay(10);
        //    //}
        //    //while (!CheckMessageBoxOpened(By.Name("Search Result")));

        //    // Search By DownwardButton until message box: "Search to the end" show up
        //    while (!CheckMessageBoxOpened(By.Name("Search Result")))
        //    {
        //        CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("NextBtn")).LeftClick();
        //    }

        //    true.ShouldEqualTo(CheckMessageBoxOpened(By.Name("Search Result")));

        //    // Close message box
        //    CurrentDriver.GetElementFromWebElement(5000, By.Name("Search Result"), By.Name("No")).LeftClick();

        //    //System.Windows.Threading.Dispatcher.Invoke(new Action(() =>
        //    //{
        //    //    // UI Action

        //    //}), System.Windows.Threading.DispatcherPriority.Background);

        //    // Create thread to Search By DownwardButton until message box: "Search to the end" show up
        //    //Task task = Task.Run(() =>
        //    //    {
        //    //        do
        //    //        {
        //    //            //safe call
        //    //            System.Windows.Threading.Dispatcher.CurrentDispatcher.Invoke(() =>
        //    //            {
        //    //                CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("NextBtn")).LeftClick();
        //    //            });
        //    //        }
        //    //        while (!CheckMessageBoxOpened(By.Name("Search Result")));
        //    //    }
        //    //);
        //    // this task is running asynchronously here
        //    // the method will exit if you don't wait for the Task to finish
        //    // A. wait without blocking the main thread
        //    //  -> requires MyButton_ClickAsync to be async
        //    //await task;
        //    // or
        //    // B. wait and block the thread (NOT RECOMMENDED AT ALL)
        //    // -> does not require MyButton_ClickAsync to be async
        //    //task.Wait();

        //    ////MainPanel_TIEditor_OpenNewTI();
        //    //TimeSpan.FromSeconds(2);

        //    //bool bSuccess = false;

        //    //try
        //    //{
        //    //    // LeftClick on Edit "" at (196,12)
        //    //    Console.WriteLine("LeftClick on Edit \"\" at (196,12)");
        //    //    string xpath_LeftClickEdit_196_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
        //    //    var winElem_LeftClickEdit_196_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_196_12);
        //    //    if (winElem_LeftClickEdit_196_12 != null)
        //    //    {
        //    //        winElem_LeftClickEdit_196_12.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_196_12}");
        //    //        return;
        //    //    }


        //    //    // KeyboardInput VirtualKeys=""y"Keys.LeftShift + "/" + Keys.LeftShift" CapsLock=False NumLock=True ScrollLock=False
        //    //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"y\"Keys.LeftShift + \"/\" + Keys.LeftShift\" CapsLock=False NumLock=True ScrollLock=False");
        //    //    System.Threading.Thread.Sleep(100);
        //    //    winElem_LeftClickEdit_196_12.SendKeys("y");
        //    //    winElem_LeftClickEdit_196_12.SendKeys(Keys.LeftShift + "/" + Keys.LeftShift);


        //    //    // LeftClick on Image "" at (4,16)
        //    //    Console.WriteLine("LeftClick on Image \"\" at (4,16)");
        //    //    string xpath_LeftClickImage_4_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]/Image[@ClassName=\"Image\"]";
        //    //    var winElem_LeftClickImage_4_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_4_16);
        //    //    if (winElem_LeftClickImage_4_16 != null)
        //    //    {
        //    //        winElem_LeftClickImage_4_16.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_4_16}");
        //    //        return;
        //    //    }

        //    //    AutoUIExtension.TakeScreenshotPNGformat(true, "B3-2");

        //    //    // LeftClick on Image "" at (12,16)
        //    //    Console.WriteLine("LeftClick on Image \"\" at (12,16)");
        //    //    string xpath_LeftClickImage_12_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"NextBtn\"]/Image[@ClassName=\"Image\"]";
        //    //    var winElem_LeftClickImage_12_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_12_16);
        //    //    if (winElem_LeftClickImage_12_16 != null)
        //    //    {
        //    //        winElem_LeftClickImage_12_16.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_12_16}");
        //    //        return;
        //    //    }

        //    //    AutoUIExtension.TakeScreenshotPNGformat(true, "B3-2_2");

        //    //    bSuccess = true;
        //    //}

        //    //finally
        //    //{
        //    //    Assert.AreEqual(bSuccess, true);
        //    //}
        //}

        //[TestMethod("B3-2_SearchByDownwardButton")]
        //[TestCategory("測試命令搜尋(B3)")]
        ////B3-2_SearchByDownwardButton
        //public void TIEditor_UseCommandByCommandSearchDownwards_SearchByKeyF3()
        //{
        //    // Input Command name: "FLOOR"
        //    string CommandName = "FLOOR";
        //    IWebElement testCmdSearchBox = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("searchText"));
        //    testCmdSearchBox.ClearContent();

        //    // Search By Key F3 until message box: "Search to the end" show up
        //    testCmdSearchBox.SendSingleKeys(CommandName);
        //    while (!CheckMessageBoxOpened(By.Name("Search Result")))
        //    {
        //        testCmdSearchBox.SendSingleKeys(Keys.F3);
        //    }

        //    true.ShouldEqualTo(CheckMessageBoxOpened(By.Name("Search Result")));

        //    // Close message box
        //    CurrentDriver.GetElementFromWebElement(5000, By.Name("Search Result"), By.Name("No")).LeftClick();
        //}

        //[TestMethod("B3-3")]
        //[TestCategory("測試命令搜尋(B3)")]
        ////B3-3
        //public void TIEditor_UseCommandByCommandSearchUpwards_SearchByUpwardButton()
        //{
        //    // Input Command name: "FLOOR"
        //    string CommandName = "FLOOR";
        //    IWebElement testCmdSearchBox = CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("searchText"));
        //    testCmdSearchBox.ClearContent();
        //    testCmdSearchBox.SendSingleKeys(CommandName);

        //    // Search By UpwardButton until message box: "Search to the end" show up
        //    while (!CheckMessageBoxOpened(By.Name("Search Result")))
        //    {
        //        CurrentDriver.GetElementFromWebElement(5000, By.ClassName("CmdTreeView"), MobileBy.AccessibilityId("PreviosBtn")).LeftClick();
        //    }

        //    true.ShouldEqualTo(CheckMessageBoxOpened(By.Name("Search Result")));

        //    // Close message box
        //    CurrentDriver.GetElementFromWebElement(5000, By.Name("Search Result"), By.Name("No")).LeftClick();

        //    ////MainPanel_TIEditor_OpenNewTI();
        //    //TimeSpan.FromSeconds(2);

        //    //bool bSuccess = false;

        //    //try
        //    //{

        //    //    // LeftClick on Edit "" at (119,12)
        //    //    Console.WriteLine("LeftClick on Edit \"\" at (119,12)");
        //    //    string xpath_LeftClickEdit_119_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
        //    //    var winElem_LeftClickEdit_119_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_119_12);
        //    //    if (winElem_LeftClickEdit_119_12 != null)
        //    //    {
        //    //        winElem_LeftClickEdit_119_12.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_119_12}");
        //    //        return;
        //    //    }


        //    //    // KeyboardInput VirtualKeys=""y"Keys.LeftShift + "/" + Keys.LeftShift" CapsLock=False NumLock=True ScrollLock=False
        //    //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"y\"Keys.LeftShift + \"/\" + Keys.LeftShift\" CapsLock=False NumLock=True ScrollLock=False");
        //    //    System.Threading.Thread.Sleep(100);
        //    //    winElem_LeftClickEdit_119_12.SendKeys("y");
        //    //    winElem_LeftClickEdit_119_12.SendKeys(Keys.LeftShift + "/" + Keys.LeftShift);


        //    //    // LeftClick on Image "" at (10,5)
        //    //    Console.WriteLine("LeftClick on Image \"\" at (10,5)");
        //    //    string xpath_LeftClickImage_10_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]/Image[@ClassName=\"Image\"]";
        //    //    var winElem_LeftClickImage_10_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_10_5);
        //    //    if (winElem_LeftClickImage_10_5 != null)
        //    //    {
        //    //        winElem_LeftClickImage_10_5.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_10_5}");
        //    //        return;
        //    //    }


        //    //    // LeftClick on Image "" at (17,13)
        //    //    Console.WriteLine("LeftClick on Image \"\" at (17,13)");
        //    //    string xpath_LeftClickImage_17_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"NextBtn\"]/Image[@ClassName=\"Image\"]";
        //    //    var winElem_LeftClickImage_17_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_17_13);
        //    //    if (winElem_LeftClickImage_17_13 != null)
        //    //    {
        //    //        winElem_LeftClickImage_17_13.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_17_13}");
        //    //        return;
        //    //    }

        //    //    AutoUIExtension.TakeScreenshotPNGformat(true, "B3-3");

        //    //    // LeftClick on Image "" at (12,17)
        //    //    Console.WriteLine("LeftClick on Image \"\" at (12,17)");
        //    //    string xpath_LeftClickImage_12_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"PreviosBtn\"]/Image[@ClassName=\"Image\"]";
        //    //    var winElem_LeftClickImage_12_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_12_17);
        //    //    if (winElem_LeftClickImage_12_17 != null)
        //    //    {
        //    //        winElem_LeftClickImage_12_17.Click();
        //    //    }
        //    //    else
        //    //    {
        //    //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_12_17}");
        //    //        return;
        //    //    }

        //    //    AutoUIExtension.TakeScreenshotPNGformat(true, "B3-3_2");

        //    //    bSuccess = true;
        //    //}

        //    //finally
        //    //{
        //    //    Assert.AreEqual(bSuccess, true);
        //    //}
        //}

        [TestMethod("B4-1")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-1
        public void TIEditor_AddCommand_CheckCommandAddedInCorrectRowPosition()
        {
            // Arrange
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string commandName = "ReadAC_Current";
            string commandNameToCheck = "ReadAC_Frequency";
            AddCommandBy(cgt, commandName, 2);                                                                // Add 2 commands with name: ReadAC_Current

            TestItemTabNavi(TestItemTabType.TIContext);                                                             // Switch to test item context window
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[2,@Test Command]", ClickType.LeftClick);                       // Select on the second command in TI context page

            AddCommandBy(cgt, commandNameToCheck);                                                            // Add command: ReadAC_Frequency

            // Assert
            string commandNameOnTIContext = PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[2,@Test Command]").GetText();  // Check command is inserted in the previous position of the selected command
            commandNameToCheck.ShouldEqualTo(commandNameOnTIContext);
        }

        [TestMethod("B4-2_1")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-2_1
        public void TIEditor_AddCommand_TickOnSkip()
        {
            // Arrange
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string commandName = "ReadAC_Current";

            AddCommandBy(cgt, commandName);                                                   // Add command with name: ReadAC_Current

            TestItemTabNavi(TestItemTabType.TIContext);                                             // Switch to test item context window
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.TickCheckBox);           // Tick on "Skip" in the added command in TI context page

            // Assert
            IElement SkipChbx = PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Skip]");       // Check "Skip" is checked
            true.ShouldEqualTo(SkipChbx.isElementChecked());
        }

        [TestMethod("B4-2_2")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-2_2
        public void TIEditor_AddCommand_UnTickOnSkip()
        {
            // Arrange
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string commandName = "ReadAC_Current";

            AddCommandBy(cgt, commandName);                                                   // Add command with name: ReadAC_Current

            TestItemTabNavi(TestItemTabType.TIContext);                                             // Switch to test item context window
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.UnTickCheckBox);         // Untick on "Skip" in the added command in TI context page

            // Assert
            IElement SkipChbx = PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Skip]");       // Check "Skip" is unchecked
            false.ShouldEqualTo(SkipChbx.isElementChecked());
        }

        [TestMethod("B4-3_1")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-3_1
        public void TIEditor_ChooseMultipleCommandAndCheckSkipBySelectAll_VerifyAllSkipCheckedAndUnChecked()
        {
            int cmdCount = 3;
            TestItemTabNavi(TestItemTabType.TIContext);                                                     // Switch to test item context window
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current", cmdCount);                        // Add 3 repeated commands: group: "AC Source", command name: "ReadAC_Current"

            //PP5IDEWindow.PerformClick("/ByCell@PGGrid[2,@Test Command]", ClickType.LeftClick);
            //PP5IDEWindow.PerformInput("/ByCell@PGGrid[2,@Test Command]", InputType.SelectAllContent, null); 
            //PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", InputType.SelectAllContent, null);// Select all commands
            Logger.LogMessage("LeftClick on first row > Skip checkbox");
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.LeftClick);                      // LeftClick on first row > Skip checkbox
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);
            for (int i = 1; i <= cmdCount; i++)                                                                    // Verify Skip cell are all Checked
                PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").ShouldBeChecked();

            PP5IDEWindow.PerformInput("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", InputType.SelectAllContent, null);// Select all commands
            Logger.LogMessage("LeftClick on first row > Skip checkbox");
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.LeftClick);                      // LeftClick on first row > Skip checkbox
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);
            for (int i = 1; i <= cmdCount; i++)                                                                    // Verify Skip cell are all UnChecked
                PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").ShouldBeUnchecked();
            /* Legacy method
            //string SkipStateExpected = "Checked";
            //for (int i = 1; i <= 3; i++)                                                                    // Verify Skip cell are all Checked
            //{
            //    string SkipState = PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").GetCellValue();
            //    SkipStateExpected.ShouldEqualTo(SkipState);
            //}

            //SkipStateExpected = "Unchecked";
            //for (int i = 1; i <= 3; i++)                                                                    // Verify Skip cell are all UnChecked
            //{
            //    string SkipState = PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").GetCellValue();
            //    SkipStateExpected.ShouldEqualTo(SkipState);
            //}
            */

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (28,5)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (28,5)");
            //    string xpath_LeftDblClickTextACSource_28_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_28_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_28_5);
            //    if (winElem_LeftDblClickTextACSource_28_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_28_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_28_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (39,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (39,11)");
            //    string xpath_LeftDblClickTextReadAC_Cur_39_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_39_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_39_11);
            //    if (winElem_LeftDblClickTextReadAC_Cur_39_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_39_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_39_11}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (41,7)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (41,7)");
            //    string xpath_LeftDblClickTextReadAC_Fre_41_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_41_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_41_7);
            //    if (winElem_LeftDblClickTextReadAC_Fre_41_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_41_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_41_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_HarmonicReading" at (41,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_HarmonicReading\" at (41,11)");
            //    string xpath_LeftDblClickTextReadAC_Har_41_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_HarmonicReading\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Har_41_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Har_41_11);
            //    if (winElem_LeftDblClickTextReadAC_Har_41_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Har_41_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Har_41_11}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (622,403)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (622,403)");
            //    string xpath_LeftClickPaneDataPanel_622_403 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_622_403 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_622_403);
            //    if (winElem_LeftClickPaneDataPanel_622_403 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_622_403.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_622_403}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftControl + "a" + Keys.LeftControl" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftControl + \"a\" + Keys.LeftControl\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickPaneDataPanel_622_403.SendKeys(Keys.LeftControl + "a" + Keys.LeftControl);


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (19,12)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (19,12)");
            //    string xpath_LeftClickCustomUncheckedI_19_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_19_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_19_12);
            //    if (winElem_LeftClickCustomUncheckedI_19_12 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_19_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_19_12}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-3_SelectAll_1");

            //    // LeftClick on Pane "DataPanel" at (313,302)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (313,302)");
            //    string xpath_LeftClickPaneDataPanel_313_302 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_313_302 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_313_302);
            //    if (winElem_LeftClickPaneDataPanel_313_302 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_313_302.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_313_302}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftControl + "a" + Keys.LeftControl" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftControl + \"a\" + Keys.LeftControl\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickPaneDataPanel_313_302.SendKeys(Keys.LeftControl + "a" + Keys.LeftControl);


            //    // LeftClick on Custom "Checked, Item: Chroma.TestItemEditor.ComposedElement.Default.PGG" at (28,6)
            //    Console.WriteLine("LeftClick on Custom \"Checked, Item: Chroma.TestItemEditor.ComposedElement.Default.PGG\" at (28,6)");
            //    string xpath_LeftClickCustomCheckedIte_28_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Checked, Item: Chroma.TestItemEditor.ComposedElement.Default.PGG\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomCheckedIte_28_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomCheckedIte_28_6);
            //    if (winElem_LeftClickCustomCheckedIte_28_6 != null)
            //    {
            //        winElem_LeftClickCustomCheckedIte_28_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomCheckedIte_28_6}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-3_SelectAll_2");

            //    // LeftClick on Pane "DataPanel" at (226,216)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (226,216)");
            //    string xpath_LeftClickPaneDataPanel_226_216 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_226_216 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_226_216);
            //    if (winElem_LeftClickPaneDataPanel_226_216 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_226_216.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_226_216}");
            //        return;
            //    }


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B4-3_2")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-3_2
        public void TIEditor_ChooseMultipleCommandAndCheckSkipBySelectAll_VerifyAllSkipUnChecked()
        {
            int cmdCount = 3;
            TestItemTabNavi(TestItemTabType.TIContext);                                                     // Switch to test item context window
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current", cmdCount);                                       // Add 3 repeated commands: group: "AC Source", command name: "ReadAC_Current"
                
            Logger.LogMessage("LeftClick on first and third row > Skip checkbox");                          // LeftClick on first and third row > Skip checkbox
            //GetCellBy("PGGrid", 0, "Skip").LeftClick();
            //GetCellBy("PGGrid", 2, "Skip").LeftClick();
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[3,@Skip]", ClickType.LeftClick);

            //PP5IDEWindow.PerformClick("/ByCell@PGGrid[2,@Test Command]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", InputType.SelectAllContent, null);// Select all commands

            //Logger.LogMessage("LeftClick on first row to uncheck all Skip checkbox");
            //PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.LeftClick);                      // LeftClick on first row to uncheck all Skip checkbox
            //string SkipStateExpected = "Unchecked";
            //for (int i = 1; i <= 3; i++)                                                                    // Verify Skip cell are all UnChecked
            //{
            //    string SkipState = PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").GetCellValue();
            //    SkipStateExpected.ShouldEqualTo(SkipState);
            //}

            PP5IDEWindow.PerformInput("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", InputType.SelectAllContent, null);// Select all commands
            Logger.LogMessage("LeftClick on first row to uncheck all Skip checkbox");
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.LeftClick);                      // LeftClick on first row > Skip checkbox
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);
            for (int i = 1; i <= cmdCount; i++)                                                                    // Verify Skip cell are all UnChecked
                PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").ShouldBeUnchecked();

            //foreach (string SkipState in GetSingleColumnValues(TIDataTableAutoIDType.PGGrid, 2/*Skip*/))
            //{
            //    SkipStateExpected.ShouldEqualTo(SkipState);
            //}


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (28,5)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (28,5)");
            //    string xpath_LeftDblClickTextACSource_28_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_28_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_28_5);
            //    if (winElem_LeftDblClickTextACSource_28_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_28_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_28_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (39,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (39,11)");
            //    string xpath_LeftDblClickTextReadAC_Cur_39_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_39_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_39_11);
            //    if (winElem_LeftDblClickTextReadAC_Cur_39_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_39_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_39_11}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (41,7)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (41,7)");
            //    string xpath_LeftDblClickTextReadAC_Fre_41_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_41_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_41_7);
            //    if (winElem_LeftDblClickTextReadAC_Fre_41_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_41_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_41_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_HarmonicReading" at (41,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_HarmonicReading\" at (41,11)");
            //    string xpath_LeftDblClickTextReadAC_Har_41_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_HarmonicReading\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Har_41_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Har_41_11);
            //    if (winElem_LeftDblClickTextReadAC_Har_41_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Har_41_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Har_41_11}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (622,403)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (622,403)");
            //    string xpath_LeftClickPaneDataPanel_622_403 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_622_403 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_622_403);
            //    if (winElem_LeftClickPaneDataPanel_622_403 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_622_403.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_622_403}");
            //        return;
            //    }


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (13,14)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (13,14)");
            //    string xpath_LeftClickCustomUncheckedI_13_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_13_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_13_14);
            //    if (winElem_LeftClickCustomUncheckedI_13_14 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_13_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_13_14}");
            //        return;
            //    }


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (25,10)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (25,10)");
            //    string xpath_LeftClickCustomUncheckedI_25_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_25_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_25_10);
            //    if (winElem_LeftClickCustomUncheckedI_25_10 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_25_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_25_10}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-3_Case2_1");

            //    // LeftClick on Pane "DataPanel" at (173,194)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (173,194)");
            //    string xpath_LeftClickPaneDataPanel_173_194 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_173_194 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_173_194);
            //    if (winElem_LeftClickPaneDataPanel_173_194 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_173_194.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_173_194}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftControl + "a" + Keys.LeftControl" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftControl + \"a\" + Keys.LeftControl\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickPaneDataPanel_173_194.SendKeys(Keys.LeftControl + "a" + Keys.LeftControl);


            //    // LeftClick on Custom "Checked, Item: Chroma.TestItemEditor.ComposedElement.Default.PGG" at (21,10)
            //    Console.WriteLine("LeftClick on Custom \"Checked, Item: Chroma.TestItemEditor.ComposedElement.Default.PGG\" at (21,10)");
            //    string xpath_LeftClickCustomCheckedIte_21_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Checked, Item: Chroma.TestItemEditor.ComposedElement.Default.PGG\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomCheckedIte_21_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomCheckedIte_21_10);
            //    if (winElem_LeftClickCustomCheckedIte_21_10 != null)
            //    {
            //        winElem_LeftClickCustomCheckedIte_21_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomCheckedIte_21_10}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-3_Case2_2");


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B4-3_3")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-3_3
        public void TIEditor_ChooseMultipleCommandAndCheckSkipBySelectAll_VerifyAllSkipChecked()
        {
            int cmdCount = 3;
            TestItemTabNavi(TestItemTabType.TIContext);                                                     // Switch to test item context window
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current", cmdCount);                        // Add 3 repeated commands: group: "AC Source", command name: "ReadAC_Current"

            Logger.LogMessage("LeftClick on second row > Skip checkbox");
            //GetCellBy("PGGrid", 1, "Skip").LeftClick();
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[2,@Skip]", ClickType.LeftClick);                      // LeftClick on second row > Skip checkbox

            //PP5IDEWindow.PerformClick("/ByCell@PGGrid[2,@Test Command]", ClickType.LeftClick);               
            //PP5IDEWindow.PerformInput("/ByCell@PGGrid[2,@Test Command]", InputType.SelectAllContent, null);  // Select all commands
            PP5IDEWindow.PerformInput("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", InputType.SelectAllContent, null);// Select all commands

            PP5IDEWindow.PerformInput("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", InputType.SelectAllContent, null);// Select all commands
            Logger.LogMessage("LeftClick on first row to uncheck all Skip checkbox");
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.LeftClick);                      // LeftClick on first row > Skip checkbox
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);
            for (int i = 1; i <= cmdCount; i++)                                                                    // Verify Skip cell are all Checked
                PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").ShouldBeChecked();

            //Logger.LogMessage("LeftClick on first row to uncheck all Skip checkbox");                       
            ////GetCellBy("PGGrid", 0, "Skip").LeftClick();
            //PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Skip]", ClickType.LeftClick);                      // LeftClick on first row to check all Skip checkbox
            
            //string SkipStateExpected = "Checked";
            //for (int i = 1; i <= 3; i++)                                                                    // Verify Skip cell are all Checked
            //{
            //    string SkipState = PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[{i},@Skip]").GetCellValue();
            //    SkipStateExpected.ShouldEqualTo(SkipState);
            //}
            //foreach (string SkipState in GetSingleColumnValues(TIDataTableAutoIDType.PGGrid, 2/*Skip*/))
            //{
            //    SkipStateExpected.ShouldEqualTo(SkipState);
            //}


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (28,5)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (28,5)");
            //    string xpath_LeftDblClickTextACSource_28_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_28_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_28_5);
            //    if (winElem_LeftDblClickTextACSource_28_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_28_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_28_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (39,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (39,11)");
            //    string xpath_LeftDblClickTextReadAC_Cur_39_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_39_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_39_11);
            //    if (winElem_LeftDblClickTextReadAC_Cur_39_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_39_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_39_11}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (41,7)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (41,7)");
            //    string xpath_LeftDblClickTextReadAC_Fre_41_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_41_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_41_7);
            //    if (winElem_LeftDblClickTextReadAC_Fre_41_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_41_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_41_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_HarmonicReading" at (41,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_HarmonicReading\" at (41,11)");
            //    string xpath_LeftDblClickTextReadAC_Har_41_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_HarmonicReading\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Har_41_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Har_41_11);
            //    if (winElem_LeftDblClickTextReadAC_Har_41_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Har_41_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Har_41_11}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (622,403)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (622,403)");
            //    string xpath_LeftClickPaneDataPanel_622_403 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_622_403 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_622_403);
            //    if (winElem_LeftClickPaneDataPanel_622_403 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_622_403.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_622_403}");
            //        return;
            //    }


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (26,11)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (26,11)");
            //    string xpath_LeftClickCustomUncheckedI_26_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_26_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_26_11);
            //    if (winElem_LeftClickCustomUncheckedI_26_11 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_26_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_26_11}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-3_Case3_1");

            //    // LeftClick on Pane "DataPanel" at (176,187)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (176,187)");
            //    string xpath_LeftClickPaneDataPanel_176_187 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_176_187 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_176_187);
            //    if (winElem_LeftClickPaneDataPanel_176_187 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_176_187.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_176_187}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftControl + "a" + Keys.LeftControl" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftControl + \"a\" + Keys.LeftControl\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickPaneDataPanel_176_187.SendKeys(Keys.LeftControl + "a" + Keys.LeftControl);


            //    // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (20,13)
            //    Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (20,13)");
            //    string xpath_LeftClickCustomUncheckedI_20_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
            //    var winElem_LeftClickCustomUncheckedI_20_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_20_13);
            //    if (winElem_LeftClickCustomUncheckedI_20_13 != null)
            //    {
            //        winElem_LeftClickCustomUncheckedI_20_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_20_13}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (392,489)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (392,489)");
            //    string xpath_LeftClickPaneDataPanel_392_489 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_392_489 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_392_489);
            //    if (winElem_LeftClickPaneDataPanel_392_489 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_392_489.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_392_489}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-3_Case3_2");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B4-4")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-4
        public void TIEditor_AddCommandAndInputInLabel_CheckLabelIsModified()
        {
            // Arrange
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string commandName = "ReadAC_Current";
            string LabelExpected = "Test";
            AddCommandBy(cgt, commandName);                                                                 // Add command with name: ReadAC_Current

            TestItemTabNavi(TestItemTabType.TIContext);                                                     // Switch to test item context window
            PP5IDEWindow.PerformInput("/ByCell@PGGrid[1,@Label]", InputType.SendContent, LabelExpected);    // Input "Test" string in "Label" in TI context page
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);

            // Assert
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Label]").ShouldHaveText(LabelExpected);         // Check Label has "Test"
        }

        [TestMethod("B4-5")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-5
        public void TIEditor_SameLabelAndShowWrongMessage()
        {
            TestItemTabNavi(TestItemTabType.TIContext);                                             // Switch to test item context window
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current", addCount: 2);                // Add 2 repeated commands: group: "AC Source", command name: "ReadAC_Current"

            Logger.LogMessage("SendKey: \"a\" on first row > Label checkbox");
            //GetCellBy("PGGrid", 0, "Label").SendSingleKeys("a");
            PP5IDEWindow.PerformInput("/ByCell@PGGrid[1,@Label]", InputType.SendContent, "a");   // SendKey: "a" on first row > Label checkbox
            
            Logger.LogMessage("SendKey the same: \"a\" on second row > Label checkbox");
            //GetCellBy("PGGrid", 1, "Label").SendSingleKeys("a");
            PP5IDEWindow.PerformInput("/ByCell@PGGrid[2,@Label]", InputType.SendContent, "a");   // SendKey the same: "a" on second row > Label checkbox
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);

            //GetCellBy("PGGrid", 0, "Label").MoveToElement();
            //string expectedErrorToolTip = "Label Repeat";           // Ver.1.20.2: "Label Repeat"
            string expectedErrorToolTip = "Label is duplicated";    // Ver.1.30.0: "Label is duplicated"
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Label]").GetToolTipMessage().ShouldEqualTo(expectedErrorToolTip);
            //PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Label]").MoveToElement();             // Repeated label name, error on both Label cells,
            //                                                                                        // inspect the first error tooltip, verify the error tooltip message
            //AutoUIExecutor.SwitchTo(SessionType.Desktop);
            ////string errorToolTip = CurrentDriver.GetElementFromWebElement(10000, By.ClassName("Popup"), By.ClassName("ToolTip"))
            ////                                   .GetElementFromWebElement(By.TagName("Text")).Text;
            //string errorToolTip = CurrentDriver.PerformGetElement("/ByClass[Popup]/ToolTip[0]/Text[0]").Text;
            //string expectedErrorToolTip = "Label Repeat";
            //expectedErrorToolTip.ShouldEqualTo(errorToolTip);                                       // Check error tooltip has message: "Label Repeat"
            //AutoUIExecutor.SwitchTo(SessionType.PP5IDE);
            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (33,4)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (33,4)");
            //    string xpath_LeftDblClickTextACSource_33_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_33_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_33_4);
            //    if (winElem_LeftDblClickTextACSource_33_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_33_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_33_4}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (34,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (34,8)");
            //    string xpath_LeftDblClickTextReadAC_Cur_34_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_34_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_34_8);
            //    if (winElem_LeftDblClickTextReadAC_Cur_34_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_34_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_34_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (49,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (49,8)");
            //    string xpath_LeftDblClickTextReadAC_Fre_49_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_49_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_49_8);
            //    if (winElem_LeftDblClickTextReadAC_Fre_49_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_49_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_49_8}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (715,458)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (715,458)");
            //    string xpath_LeftClickPaneDataPanel_715_458 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_715_458 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_715_458);
            //    if (winElem_LeftClickPaneDataPanel_715_458 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_715_458.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_715_458}");
            //        return;
            //    }



            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (55,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (55,14)");
            //    string xpath_LeftClickCustomItemChroma_55_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Label\"]";
            //    var winElem_LeftClickCustomItemChroma_55_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_55_14);
            //    if (winElem_LeftClickCustomItemChroma_55_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_55_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_55_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""aaa"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"aaa\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_55_14.SendKeys("aaa");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (19,5)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (19,5)");
            //    string xpath_LeftClickCustomItemChroma_19_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Label\"]";
            //    var winElem_LeftClickCustomItemChroma_19_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_19_5);
            //    if (winElem_LeftClickCustomItemChroma_19_5 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_19_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_19_5}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""aaa"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"aaa\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_19_5.SendKeys("aaa");


            //    // LeftClick on Pane "DataPanel" at (177,147)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (177,147)");
            //    string xpath_LeftClickPaneDataPanel_177_147 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_177_147 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_177_147);
            //    if (winElem_LeftClickPaneDataPanel_177_147 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_177_147.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_177_147}");
            //        return;
            //    }


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B4-5");
            //}
        }

        [TestMethod("B4-6")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-6
        public void TIEditor_TestCommandCellNotEditable()
        {
            TestItemTabNavi(TestItemTabType.TIContext);                                                 // Switch to test item context window
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current");                                 // Add command with group: "AC Source", command name: "ReadAC_Current"

            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftDoubleClick);    // double click on cell "TestCommand"
            Thread.Sleep(10);
            //driverLogger.DumpDriverLog(LogType.Driver);

            //System.Windows.Forms.Cursor expectedCursor = System.Windows.Forms.Cursors.Arrow;          // Check the cursor is still in Arrow type (cell not editable)
            //System.Windows.Forms.Cursor currentCursor = System.Windows.Forms.Cursor.Current;
            Cursor expectedCursor = Cursor.Arrow;                                                       // Check the cursor is still in Arrow type (cell not editable)
            Cursor currentCursor = DllHelper.GetCursor();
            expectedCursor.ShouldEqualTo(currentCursor);
        }

        [TestMethod("B4-7")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-7
        public void TIEditor_ParametersCellNotEditable()
        {
            TestItemTabNavi(TestItemTabType.TIContext);                                                 // Switch to test item context window
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current");                                 // Add command with group: "AC Source", command name: "ReadAC_Current"

            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Parameters]", ClickType.LeftDoubleClick);      // double click on cell "Parameters"
            Thread.Sleep(10);

            Cursor expectedCursor = Cursor.Arrow;                                                       // Check the cursor is still in Arrow type (cell not editable)
            Cursor currentCursor = DllHelper.GetCursor();
            expectedCursor.ShouldEqualTo(currentCursor);
        }

        [TestMethod("B4-8")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-8
        public void TIEditor_DescriptionCellInputRandomText()
        {
            string textToInput = "Test";
            TestItemTabNavi(TestItemTabType.TIContext);                                                             // Switch to test item context window
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current");                                             // Add command with group: "AC Source", command name: "ReadAC_Current"

            PP5IDEWindow.PerformInput("/ByCell@PGGrid[1,@Description]", InputType.SendContent, textToInput);        // Input "Test" on cell "Description"
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);  // Click on empty place in the grid to confirm input

            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Description]").ShouldHaveText(textToInput);           // Check the input text
            //string textToInputActual = PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Description]").GetCellValue();
            //textToInput.ShouldEqualTo(textToInputActual);
        }

        [TestMethod("B4-9_LeftClick")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-9_LeftClick
        public void TIEditor_LeftClickTestCommand_ShouldShowParameterPage()
        {
            // Command name: "ReadAC_Current"
            string cmdName = "ReadAC_Current";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 1 command: group: "AC Source", command name: "ReadAC_Current"
            //GetCommandBy("ReadAC_Current").DoubleClick();
            AddCommandBy(cgt, cmdName);

            // Cancel command selection, parameter page is empty
            //PP5IDEWindow.GetExtendedElement(PP5By.Chained(PP5By.Id("PGGrid"), PP5By.Id("dataPresenter"))).LeftClick();
            //PP5IDEWindow.PerformClick("/ById[PGGrid,dataPresenter]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);  // from UI recorder 

            // If parameter page is empty, grid table will be empty
            //int CmdNotSelectedGridItemCount = PP5IDEWindow.GetExtendedElement(PP5By.Id("ParameterGrid"))
            //                                              .GetExtendedElement(PP5By.Name("DataPanel"))
            //                                              .GetChildElements().Count;
            int CmdNotSelectedGridItemCount = PP5IDEWindow.PerformGetElement("/ByIdOrName[ParameterGrid,DataPanel]")
                                                          .GetChildElementsCount();
            int CmdNotSelectedGridItemCountExpected = 0;
            CmdNotSelectedGridItemCountExpected.ShouldEqualTo(CmdNotSelectedGridItemCount);

            // LeftClick to select the command, parameter page should show up
            //GetCellBy("PGGrid", 1, "Test Command").LeftClick();
            //PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ById[PGGrid,dataPresenter,CommandName]", ClickType.LeftClick);  // from UI recorder 

            // re-check parameter grid table, command name and grid table should be filled
            //int CmdSelectedGridItemCount = PP5IDEWindow.GetExtendedElement(PP5By.Id("ParameterGrid"))
            //                                           .GetExtendedElement(PP5By.Name("DataPanel"))
            //                                           .GetChildElements().Count;
            int CmdSelectedGridItemCount = PP5IDEWindow.PerformGetElement("/ByIdOrName[ParameterGrid,DataPanel]")
                                                       .GetChildElementsCount();

            //string cmdNameActual = PP5IDEWindow.GetExtendedElement(PP5By.Id("editParamAreaView"))
            //                                   .GetExtendedElement(PP5By.ClassName("TextBox")).Text;
            //string cmdNameActual = PP5IDEWindow.PerformGetElement("/ById[editParamAreaView]/ByClassName[TextBox]")
            //                                   .GetText();
            string cmdNameActual = PP5IDEWindow.PerformGetElements("/ById[editParamAreaView]/ByClass[TextBox]")[0].GetText();                 // from UI recorder                                                                      

            true.ShouldEqualTo(CmdSelectedGridItemCount > 0);
            cmdName.ShouldEqualTo(cmdNameActual);


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftDblClick on Text "AC Source" at (36,10)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (36,10)");
            //    string xpath_LeftDblClickTextACSource_36_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_36_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_36_10);
            //    if (winElem_LeftDblClickTextACSource_36_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_36_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_36_10}");
            //        return;
            //    }


            //    // LeftClick on Text "ReadAC_Current" at (37,7)
            //    Console.WriteLine("LeftClick on Text \"ReadAC_Current\" at (37,7)");
            //    string xpath_LeftClickTextReadAC_Cur_37_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftClickTextReadAC_Cur_37_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextReadAC_Cur_37_7);
            //    if (winElem_LeftClickTextReadAC_Cur_37_7 != null)
            //    {
            //        winElem_LeftClickTextReadAC_Cur_37_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextReadAC_Cur_37_7}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B4-9_LeftClick");
            //}
        }

        [TestMethod("B4-9_RightClick")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-9_RightClick
        public void TIEditor_RightClickTestCommand()
        {
            // Command name: "ReadAC_Current"
            string cmdName = "ReadAC_Current";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 1 command: group: "AC Source", command name: "ReadAC_Current"
            AddCommandBy(cgt, cmdName);

            // Cancel command selection, parameter page is empty
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);  // Click on empty place in the grid to confirm input

            // If parameter page is empty, grid table will be empty
            var tcParamDataPanel = PP5IDEWindow.PerformGetElement("/ById[ParameterGrid,dataPresenter]");
            int CmdNotSelectedGridItemCount = tcParamDataPanel.GetChildElements().Count;
            int CmdNotSelectedGridItemCountExpected = 0;
            CmdNotSelectedGridItemCountExpected.ShouldEqualTo(CmdNotSelectedGridItemCount);

            // RightClick to select the command, parameter page should show up
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.RightClick);

            // re-check parameter grid table, command name and grid table should be filled
            int CmdSelectedGridItemCount = tcParamDataPanel.GetChildElements().Count;
            string cmdNameActual = PP5IDEWindow.PerformGetElements("/ById[editParamAreaView]/ByClass[TextBox]")[0].GetText();

            CmdSelectedGridItemCount.ShouldBePositive();
            cmdName.ShouldEqualTo(cmdNameActual);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftDblClick on Text "AC Source" at (36,10)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (36,10)");
            //    string xpath_LeftDblClickTextACSource_36_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_36_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_36_10);
            //    if (winElem_LeftDblClickTextACSource_36_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_36_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_36_10}");
            //        return;
            //    }


            //    // RightClick on Text "ReadAC_Current" at (61,10)
            //    Console.WriteLine("RightClick on Text \"ReadAC_Current\" at (61,10)");
            //    string xpath_RightClickTextReadAC_Cur_61_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_RightClickTextReadAC_Cur_61_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_RightClickTextReadAC_Cur_61_10);
            //    if (winElem_RightClickTextReadAC_Cur_61_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_RightClickTextReadAC_Cur_61_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.ContextClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_RightClickTextReadAC_Cur_61_10}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B4-9_RightClick");
            //}
        }

        [TestMethod("B4-10")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-10
        public void TIEditor_LeftClickTestCommand_ShouldLocateToTestCommandInTestGroupList()
        {
            // Steps:
            // 1. Add Command: ReadAC_Current in tc group page
            // 2. click on the test command, then click on place not on the edit command in edit page.
            // 3. Check test command is located in tc group list page
            AddCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current");
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);
            GetCommandBy(TestCmdGroupType.AC_Source, "ReadAC_Current", doExpand: false).ShouldBeSelected();  // Check the command is located in the test command group
        }

        [TestMethod("B4-11")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-11
        public void TIEditor_SetParametersInTestCommand_ShouldShowParametersSeperatedWithCommaInListItem()
        {
            // Steps:
            // 1. Add Command: SetAC_Frequency in tc group page
            // 2. Set all parameters in parameter page (each param use constant type)
            // 3. Check on the parameter info has shown Parameters Seperated With Comma ('p1,p2') in edit page
            AddCommandBy(TestCmdGroupType.AC_Source, "SetAC_Frequency");
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            int tcParamRowCount = PP5IDEWindow.PerformGetElement("/ById[ParameterGrid]").GetRowCount();
            for (int i = 1; i <= tcParamRowCount - 1; i++)
            {
                PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[{i},@Parameter Value]", ClickType.LeftClick);                        // Edit 1st parameter
                PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
                System.Threading.Thread.Sleep(100);
                PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[{i},@Parameter Value]", InputType.SendContent, i.ToString());
                Press(Keys.Enter);
            }

            string parameterValues = PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Parameters]").GetText();   // parameterValues: 'p1,p2'
            List<string> parameterValuesExpected = new List<string>();
            string[] parameterValuesActual = parameterValues.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 1; i <= tcParamRowCount - 1; i++)
                parameterValuesExpected.Add(i.ToString());
            parameterValuesExpected.ShouldBe(parameterValuesActual);
            //CollectionAssert.AreEqual(new string[2] { "0", "1" }, parameterValues.Split(','));
        }

        //[TestMethod("B4-12_CommandIsFound")]
        //[TestCategory("測試命令編輯(B4)")]
        ////B4-12_CommandIsFound
        //public void TIEditor_SearchSpecificTestCommandInfoInSearchBox_ShouldSelectOnTheCommandIfFound()
        //{

        //}

        //[TestMethod("B4-12_CommandIsNotFound")]
        //[TestCategory("測試命令編輯(B4)")]
        ////B4-12_CommandIsNotFound
        //public void TIEditor_SearchSpecificTestCommandInfoInSearchBox_ShouldPopupMessageBoxIfNotFound()
        //{

        //}

        [TestMethod("B4-13")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-13
        public void TIEditor_AddOneThreadTITestCommand_ShouldBeAddedAndShowCorrectParameters()
        {
            // Steps:
            // 1. Add any Thread Command in tc group page,
            // 2. click on the test command and check test command string are same in parameter page and edit page

            string threadTICmdTitle = "RunThread_TI";

            AddCommandBy(TestCmdGroupType.Thread_TI, 1);
            var tcCellElement = PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Test Command]");
            string cmdName = tcCellElement.GetText();
            tcCellElement.LeftClick();
            threadTICmdTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElements("/ById[editParamAreaView]/ByClass[ScrollViewer,TextBox]")[0].GetText());
            cmdName.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[1,@Parameter Value]").GetText());
            PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[2,@Parameter Value]").ShouldHaveText("\"\"");
            PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[3,@Parameter Value]").ShouldHaveText("\"\"");
        }

        [TestMethod("B4-14")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-14
        public void TIEditor_AddCommandsMoreThanUpperBound()
        {
            // Add first command in group "AC Source"
            //AddCommandBy("AC Source", 1, TestCommandSourceType.Device);
            AddCommandBy(TestCmdGroupType.AC_Source, 1);

            // CLick on command edit page first
            PP5IDEWindow.PerformClick("/ByClass[PGGridAeraView]/ById[PGGrid]", ClickType.LeftClick);
            //PP5IDEWindow.GetWebElementFromWebElement(MobileBy.AccessibilityId("PGGrid")).LeftClick();

            // Repeat copy and paste the command until warning window: "Exceed Limit" popup
            for (int i = 0; i < 12; i++) 
            {
                SelectAll();
                CopyAndPaste();
            }

            // Check warning message box title is: "Exceed Limit" 
            string expectedTitle = "Exceed Limit";
            expectedTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ById[MessageBoxExDialog]").GetText());

            // Click OK to close the warning message box
            PP5IDEWindow.PerformClick("/ByIdOrName[MessageBoxExDialog,OK]", ClickType.LeftClick);

            //GetSingleColumnValues("PGGrid", "Test Command");

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (42,9)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (42,9)");
            //    string xpath_LeftDblClickTextACSource_42_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_42_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_42_9);
            //    if (winElem_LeftDblClickTextACSource_42_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_42_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_42_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (77,13)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (77,13)");
            //    string xpath_LeftDblClickTextReadAC_Cur_77_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_77_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_77_13);
            //    if (winElem_LeftDblClickTextReadAC_Cur_77_13 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_77_13.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_77_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (73,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (73,8)");
            //    string xpath_LeftDblClickTextReadAC_Fre_73_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_73_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_73_8);
            //    if (winElem_LeftDblClickTextReadAC_Fre_73_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_73_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_73_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_HarmonicReading" at (67,4)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_HarmonicReading\" at (67,4)");
            //    string xpath_LeftDblClickTextReadAC_Har_67_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_HarmonicReading\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Har_67_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Har_67_4);
            //    if (winElem_LeftDblClickTextReadAC_Har_67_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Har_67_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Har_67_4}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_HarmonicSpectrum" at (62,10)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_HarmonicSpectrum\" at (62,10)");
            //    string xpath_LeftDblClickTextReadAC_Har_62_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_HarmonicSpectrum\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Har_62_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Har_62_10);
            //    if (winElem_LeftDblClickTextReadAC_Har_62_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Har_62_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Har_62_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Power" at (59,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Power\" at (59,8)");
            //    string xpath_LeftDblClickTextReadAC_Pow_59_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Power\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Pow_59_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Pow_59_8);
            //    if (winElem_LeftDblClickTextReadAC_Pow_59_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Pow_59_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Pow_59_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Voltage" at (54,10)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Voltage\" at (54,10)");
            //    string xpath_LeftDblClickTextReadAC_Vol_54_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Voltage\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Vol_54_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Vol_54_10);
            //    if (winElem_LeftDblClickTextReadAC_Vol_54_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Vol_54_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Vol_54_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Voltage2" at (48,6)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Voltage2\" at (48,6)");
            //    string xpath_LeftDblClickTextReadAC_Vol_48_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Voltage2\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Vol_48_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Vol_48_6);
            //    if (winElem_LeftDblClickTextReadAC_Vol_48_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Vol_48_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Vol_48_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadACDev_ResponseString" at (52,6)
            //    Console.WriteLine("LeftDblClick on Text \"ReadACDev_ResponseString\" at (52,6)");
            //    string xpath_LeftDblClickTextReadACDev__52_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadACDev_ResponseString\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadACDev__52_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadACDev__52_6);
            //    if (winElem_LeftDblClickTextReadACDev__52_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadACDev__52_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadACDev__52_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_65180_270StandAlone" at (54,7)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_65180_270StandAlone\" at (54,7)");
            //    string xpath_LeftDblClickTextSetAC_6518_54_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_65180_270StandAlone\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_6518_54_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_6518_54_7);
            //    if (winElem_LeftDblClickTextSetAC_6518_54_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_6518_54_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_6518_54_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_65180_270SyncMode" at (52,8)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_65180_270SyncMode\" at (52,8)");
            //    string xpath_LeftDblClickTextSetAC_6518_52_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_65180_270SyncMode\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_6518_52_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_6518_52_8);
            //    if (winElem_LeftDblClickTextSetAC_6518_52_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_6518_52_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_6518_52_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_ActiveWaveform" at (46,6)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_ActiveWaveform\" at (46,6)");
            //    string xpath_LeftDblClickTextSetAC_Acti_46_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_ActiveWaveform\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_Acti_46_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_Acti_46_6);
            //    if (winElem_LeftDblClickTextSetAC_Acti_46_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_Acti_46_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_Acti_46_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_EventParameter" at (50,3)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_EventParameter\" at (50,3)");
            //    string xpath_LeftDblClickTextSetAC_Even_50_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_EventParameter\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_Even_50_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_Even_50_3);
            //    if (winElem_LeftDblClickTextSetAC_Even_50_3 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_Even_50_3.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_Even_50_3}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_ExecuteEvent" at (51,8)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_ExecuteEvent\" at (51,8)");
            //    string xpath_LeftDblClickTextSetAC_Exec_51_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_ExecuteEvent\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_Exec_51_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_Exec_51_8);
            //    if (winElem_LeftDblClickTextSetAC_Exec_51_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_Exec_51_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_Exec_51_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_Frequency" at (51,6)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_Frequency\" at (51,6)");
            //    string xpath_LeftDblClickTextSetAC_Freq_51_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_Freq_51_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_Freq_51_6);
            //    if (winElem_LeftDblClickTextSetAC_Freq_51_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_Freq_51_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_Freq_51_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_HarmonicMeasState" at (51,3)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_HarmonicMeasState\" at (51,3)");
            //    string xpath_LeftDblClickTextSetAC_Harm_51_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_HarmonicMeasState\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_Harm_51_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_Harm_51_3);
            //    if (winElem_LeftDblClickTextSetAC_Harm_51_3 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_Harm_51_3.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_Harm_51_3}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_HarmonicParameter" at (52,5)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_HarmonicParameter\" at (52,5)");
            //    string xpath_LeftDblClickTextSetAC_Harm_52_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_HarmonicParameter\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_Harm_52_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_Harm_52_5);
            //    if (winElem_LeftDblClickTextSetAC_Harm_52_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_Harm_52_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_Harm_52_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_IInrushDelay" at (48,2)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_IInrushDelay\" at (48,2)");
            //    string xpath_LeftDblClickTextSetAC_IInr_48_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_IInrushDelay\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_IInr_48_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_IInr_48_2);
            //    if (winElem_LeftDblClickTextSetAC_IInr_48_2 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_IInr_48_2.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_IInr_48_2}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_IInrushDuration" at (48,6)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_IInrushDuration\" at (48,6)");
            //    string xpath_LeftDblClickTextSetAC_IInr_48_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_IInrushDuration\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_IInr_48_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_IInr_48_6);
            //    if (winElem_LeftDblClickTextSetAC_IInr_48_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_IInr_48_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_IInr_48_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "SetAC_Ilimit" at (41,9)
            //    Console.WriteLine("LeftDblClick on Text \"SetAC_Ilimit\" at (41,9)");
            //    string xpath_LeftDblClickTextSetAC_Ilim_41_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetAC_Ilimit\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextSetAC_Ilim_41_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetAC_Ilim_41_9);
            //    if (winElem_LeftDblClickTextSetAC_Ilim_41_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetAC_Ilim_41_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetAC_Ilim_41_9}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (365,499)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (365,499)");
            //    string xpath_LeftClickPaneDataPanel_365_499 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_365_499 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_365_499);
            //    if (winElem_LeftClickPaneDataPanel_365_499 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_365_499.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_365_499}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftControl + "a" + Keys.LeftControl" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftControl + \"a\" + Keys.LeftControl\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickPaneDataPanel_365_499.SendKeys(Keys.LeftControl + "a" + Keys.LeftControl);


            //    // LeftClick on Text "Edit" at (23,10)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (23,10)");
            //    string xpath_LeftClickTextEdit_23_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_23_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_23_10);
            //    if (winElem_LeftClickTextEdit_23_10 != null)
            //    {
            //        winElem_LeftClickTextEdit_23_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_23_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (23,8)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (23,8)");
            //    string xpath_LeftClickTextCopy_23_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_23_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_23_8);
            //    if (winElem_LeftClickTextCopy_23_8 != null)
            //    {
            //        winElem_LeftClickTextCopy_23_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_23_8}");
            //        return;
            //    }

            //    int count = 157;

            //    while (count > 0)
            //    {

            //        // LeftClick on Text "Edit" at (15,9)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (15,9)");
            //        string xpath_LeftClickTextEdit_15_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_15_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_15_9);
            //        if (winElem_LeftClickTextEdit_15_9 != null)
            //        {
            //            winElem_LeftClickTextEdit_15_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_15_9}");
            //            return;
            //        }


            //        // LeftClick on Text "Paste" at (15,13)
            //        Console.WriteLine("LeftClick on Text \"Paste\" at (15,13)");
            //        string xpath_LeftClickTextPaste_15_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //        var winElem_LeftClickTextPaste_15_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_15_13);
            //        if (winElem_LeftClickTextPaste_15_13 != null)
            //        {
            //            winElem_LeftClickTextPaste_15_13.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_15_13}");
            //            return;
            //        }

            //        count--;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-14");

            //    // LeftClick on Text "OK" at (7,16)
            //    Console.WriteLine("LeftClick on Text \"OK\" at (7,16)");
            //    string xpath_LeftClickTextOK_7_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Exceed Limit\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"OK\"][@AutomationId=\"btnOK\"]/Text[@ClassName=\"TextBlock\"][@Name=\"OK\"]";
            //    var winElem_LeftClickTextOK_7_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOK_7_16);
            //    if (winElem_LeftClickTextOK_7_16 != null)
            //    {
            //        winElem_LeftClickTextOK_7_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOK_7_16}");
            //        return;
            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);

            //}
        }

        [TestMethod("B4-15_1")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-15_1
        public void TIEditor_RandomlyAddCommandCase1()
        {
            Dictionary<TestCmdGroupType, string[]> groupCommands = new Dictionary<TestCmdGroupType, string[]>
            {
                { TestCmdGroupType.AC_Source,  new[] { "ReadAC_Current", "ReadAC_Frequency" } },
                { TestCmdGroupType.DC_Source,  new[] { "GetDCDev_EQInformation", "GetDCDev_IVCStatus" } },
                { TestCmdGroupType.XYZ_Table,  new[] { "GetXYZtable_Slope_RotationAngle", "GetXYZtable_XYZCoordinate" } },
                { TestCmdGroupType.String,     new[] { "ATOF", "ATOI" } },
            };

            foreach (var kvp in groupCommands)
            {
                // TODO: Get command source type
                AddCommandsBy(kvp.Key, kvp.Value);
            }

            // Check parameters page show correct test command info
            // Steps: Click on any Test Command in editor page (seq: 3 > 4 > 1), inspect the test command string in parameter page

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (42,13)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (42,13)");
            //    string xpath_LeftDblClickTextACSource_42_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_42_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_42_13);
            //    if (winElem_LeftDblClickTextACSource_42_13 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_42_13.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_42_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (32,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (32,8)");
            //    string xpath_LeftDblClickTextReadAC_Cur_32_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_32_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_32_8);
            //    if (winElem_LeftDblClickTextReadAC_Cur_32_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_32_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_32_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (38,1)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (38,1)");
            //    string xpath_LeftDblClickTextReadAC_Fre_38_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_38_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_38_1);
            //    if (winElem_LeftDblClickTextReadAC_Fre_38_1 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_38_1.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_38_1}");
            //        return;
            //    }


            //    // LeftDblClick on Text "AC Source" at (43,5)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (43,5)");
            //    string xpath_LeftDblClickTextACSource_43_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_43_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_43_5);
            //    if (winElem_LeftDblClickTextACSource_43_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_43_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_43_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "DC Source" at (43,5)
            //    Console.WriteLine("LeftDblClick on Text \"DC Source\" at (43,5)");
            //    string xpath_LeftDblClickTextDCSource_43_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
            //    var winElem_LeftDblClickTextDCSource_43_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_43_5);
            //    if (winElem_LeftDblClickTextDCSource_43_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_43_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_43_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetDCDev_EQInformation" at (31,2)
            //    Console.WriteLine("LeftDblClick on Text \"GetDCDev_EQInformation\" at (31,2)");
            //    string xpath_LeftDblClickTextGetDCDev_E_31_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetDCDev_EQInformation\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetDCDev_E_31_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetDCDev_E_31_2);
            //    if (winElem_LeftDblClickTextGetDCDev_E_31_2 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetDCDev_E_31_2.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetDCDev_E_31_2}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetDCDev_IVCStatus" at (40,5)
            //    Console.WriteLine("LeftDblClick on Text \"GetDCDev_IVCStatus\" at (40,5)");
            //    string xpath_LeftDblClickTextGetDCDev_I_40_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetDCDev_IVCStatus\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetDCDev_I_40_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetDCDev_I_40_5);
            //    if (winElem_LeftDblClickTextGetDCDev_I_40_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetDCDev_I_40_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetDCDev_I_40_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "DC Source" at (28,4)
            //    Console.WriteLine("LeftDblClick on Text \"DC Source\" at (28,4)");
            //    string xpath_LeftDblClickTextDCSource_28_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
            //    var winElem_LeftDblClickTextDCSource_28_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_28_4);
            //    if (winElem_LeftDblClickTextDCSource_28_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_28_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_28_4}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Power Analyzer" at (33,12)
            //    Console.WriteLine("LeftDblClick on Text \"Power Analyzer\" at (33,12)");
            //    string xpath_LeftDblClickTextPowerAnaly_33_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Power Analyzer\"]";
            //    var winElem_LeftDblClickTextPowerAnaly_33_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextPowerAnaly_33_12);
            //    if (winElem_LeftDblClickTextPowerAnaly_33_12 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextPowerAnaly_33_12.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextPowerAnaly_33_12}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadPADev_HarmCheckingResult" at (54,15)
            //    Console.WriteLine("LeftDblClick on Text \"ReadPADev_HarmCheckingResult\" at (54,15)");
            //    string xpath_LeftDblClickTextReadPADev__54_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadPADev_HarmCheckingResult\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadPADev__54_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadPADev__54_15);
            //    if (winElem_LeftDblClickTextReadPADev__54_15 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadPADev__54_15.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadPADev__54_15}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadPADev_HarmReading" at (58,9)
            //    Console.WriteLine("LeftDblClick on Text \"ReadPADev_HarmReading\" at (58,9)");
            //    string xpath_LeftDblClickTextReadPADev__58_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadPADev_HarmReading\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadPADev__58_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadPADev__58_9);
            //    if (winElem_LeftDblClickTextReadPADev__58_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadPADev__58_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadPADev__58_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Power Analyzer" at (41,7)
            //    Console.WriteLine("LeftDblClick on Text \"Power Analyzer\" at (41,7)");
            //    string xpath_LeftDblClickTextPowerAnaly_41_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Power Analyzer\"]";
            //    var winElem_LeftDblClickTextPowerAnaly_41_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextPowerAnaly_41_7);
            //    if (winElem_LeftDblClickTextPowerAnaly_41_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextPowerAnaly_41_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextPowerAnaly_41_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Digital Multimeter" at (40,15)
            //    Console.WriteLine("LeftDblClick on Text \"Digital Multimeter\" at (40,15)");
            //    string xpath_LeftDblClickTextDigitalMul_40_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Digital Multimeter\"]";
            //    var winElem_LeftDblClickTextDigitalMul_40_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDigitalMul_40_15);
            //    if (winElem_LeftDblClickTextDigitalMul_40_15 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDigitalMul_40_15.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDigitalMul_40_15}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadDMM_Measure" at (26,9)
            //    Console.WriteLine("LeftDblClick on Text \"ReadDMM_Measure\" at (26,9)");
            //    string xpath_LeftDblClickTextReadDMM_Me_26_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadDMM_Measure\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadDMM_Me_26_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadDMM_Me_26_9);
            //    if (winElem_LeftDblClickTextReadDMM_Me_26_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadDMM_Me_26_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadDMM_Me_26_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadDMMDev_ResponseString" at (30,4)
            //    Console.WriteLine("LeftDblClick on Text \"ReadDMMDev_ResponseString\" at (30,4)");
            //    string xpath_LeftDblClickTextReadDMMDev_30_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadDMMDev_ResponseString\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadDMMDev_30_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadDMMDev_30_4);
            //    if (winElem_LeftDblClickTextReadDMMDev_30_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadDMMDev_30_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadDMMDev_30_4}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Digital Multimeter" at (35,14)
            //    Console.WriteLine("LeftDblClick on Text \"Digital Multimeter\" at (35,14)");
            //    string xpath_LeftDblClickTextDigitalMul_35_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Digital Multimeter\"]";
            //    var winElem_LeftDblClickTextDigitalMul_35_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDigitalMul_35_14);
            //    if (winElem_LeftDblClickTextDigitalMul_35_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDigitalMul_35_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDigitalMul_35_14}");
            //        return;
            //    }


            //    // LeftDblClick on Text "XYZ Table" at (34,15)
            //    Console.WriteLine("LeftDblClick on Text \"XYZ Table\" at (34,15)");
            //    string xpath_LeftDblClickTextXYZTable_34_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"XYZ Table\"]";
            //    var winElem_LeftDblClickTextXYZTable_34_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextXYZTable_34_15);
            //    if (winElem_LeftDblClickTextXYZTable_34_15 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextXYZTable_34_15.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextXYZTable_34_15}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetXYZtable_Slope_RotationAngle" at (32,8)
            //    Console.WriteLine("LeftDblClick on Text \"GetXYZtable_Slope_RotationAngle\" at (32,8)");
            //    string xpath_LeftDblClickTextGetXYZtabl_32_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetXYZtable_Slope_RotationAngle\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetXYZtabl_32_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetXYZtabl_32_8);
            //    if (winElem_LeftDblClickTextGetXYZtabl_32_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetXYZtabl_32_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetXYZtabl_32_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetXYZtable_XYZCoordinate" at (44,7)
            //    Console.WriteLine("LeftDblClick on Text \"GetXYZtable_XYZCoordinate\" at (44,7)");
            //    string xpath_LeftDblClickTextGetXYZtabl_44_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetXYZtable_XYZCoordinate\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetXYZtabl_44_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetXYZtabl_44_7);
            //    if (winElem_LeftDblClickTextGetXYZtabl_44_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetXYZtabl_44_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetXYZtabl_44_7}");
            //        return;
            //    }




            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(bSuccess, "B4-15_1");
            //}
        }

        [TestMethod("B4-15_2")]
        [TestCategory("測試命令編輯(B4)")]
        //B4-15_2
        public void TIEditor_RandomlyAddCommandCase2()
        {
            Dictionary<TestCmdGroupType, string[]> groupCommands = new Dictionary<TestCmdGroupType, string[]>
            {
                { TestCmdGroupType.AC_Source,  new[] { "ReadAC_Current", "ReadAC_Frequency" } },
                { TestCmdGroupType.DC_Source,  new[] { "GetDCDev_EQInformation", "GetDCDev_IVCStatus" } },
                { TestCmdGroupType.XYZ_Table,  new[] { "GetXYZtable_Slope_RotationAngle", "GetXYZtable_XYZCoordinate" } },
                { TestCmdGroupType.String,     new[] { "ATOF", "ATOI" } },
                { TestCmdGroupType.HexString,  new[] { "HexStringCat", "HexStringSum" } },
            };

            for (int i = 0; i < 2; i++)
            {
                foreach (var kvp in groupCommands)
                {
                    // TODO: Get command source type
                    AddCommandsBy(kvp.Key, kvp.Value[i]);
                }
            }

            // Check parameters page show correct test command info
            // Steps: Click on any Test Command in editor page (seq: 1 > 5 > 3), inspect the test command string in parameter page


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (33,0)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (33,0)");
            //    string xpath_LeftDblClickTextACSource_33_0 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_33_0 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_33_0);
            //    if (winElem_LeftDblClickTextACSource_33_0 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_33_0.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_33_0}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (24,9)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (24,9)");
            //    string xpath_LeftDblClickTextReadAC_Cur_24_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_24_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_24_9);
            //    if (winElem_LeftDblClickTextReadAC_Cur_24_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_24_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_24_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "AC Source" at (24,9)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (24,9)");
            //    string xpath_LeftDblClickTextACSource_24_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_24_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_24_9);
            //    if (winElem_LeftDblClickTextACSource_24_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_24_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_24_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "DC Source" at (28,13)
            //    Console.WriteLine("LeftDblClick on Text \"DC Source\" at (28,13)");
            //    string xpath_LeftDblClickTextDCSource_28_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
            //    var winElem_LeftDblClickTextDCSource_28_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_28_13);
            //    if (winElem_LeftDblClickTextDCSource_28_13 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_28_13.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_28_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetDCDev_EQInformation" at (26,7)
            //    Console.WriteLine("LeftDblClick on Text \"GetDCDev_EQInformation\" at (26,7)");
            //    string xpath_LeftDblClickTextGetDCDev_E_26_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetDCDev_EQInformation\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetDCDev_E_26_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetDCDev_E_26_7);
            //    if (winElem_LeftDblClickTextGetDCDev_E_26_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetDCDev_E_26_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetDCDev_E_26_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "DC Source" at (35,13)
            //    Console.WriteLine("LeftDblClick on Text \"DC Source\" at (35,13)");
            //    string xpath_LeftDblClickTextDCSource_35_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
            //    var winElem_LeftDblClickTextDCSource_35_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_35_13);
            //    if (winElem_LeftDblClickTextDCSource_35_13 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_35_13.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_35_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Power Analyzer" at (31,8)
            //    Console.WriteLine("LeftDblClick on Text \"Power Analyzer\" at (31,8)");
            //    string xpath_LeftDblClickTextPowerAnaly_31_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Power Analyzer\"]";
            //    var winElem_LeftDblClickTextPowerAnaly_31_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextPowerAnaly_31_8);
            //    if (winElem_LeftDblClickTextPowerAnaly_31_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextPowerAnaly_31_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextPowerAnaly_31_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadPADev_HarmCheckingResult" at (26,10)
            //    Console.WriteLine("LeftDblClick on Text \"ReadPADev_HarmCheckingResult\" at (26,10)");
            //    string xpath_LeftDblClickTextReadPADev__26_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadPADev_HarmCheckingResult\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadPADev__26_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadPADev__26_10);
            //    if (winElem_LeftDblClickTextReadPADev__26_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadPADev__26_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadPADev__26_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Power Analyzer" at (56,8)
            //    Console.WriteLine("LeftDblClick on Text \"Power Analyzer\" at (56,8)");
            //    string xpath_LeftDblClickTextPowerAnaly_56_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Power Analyzer\"]";
            //    var winElem_LeftDblClickTextPowerAnaly_56_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextPowerAnaly_56_8);
            //    if (winElem_LeftDblClickTextPowerAnaly_56_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextPowerAnaly_56_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextPowerAnaly_56_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Digital Multimeter" at (33,9)
            //    Console.WriteLine("LeftDblClick on Text \"Digital Multimeter\" at (33,9)");
            //    string xpath_LeftDblClickTextDigitalMul_33_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Digital Multimeter\"]";
            //    var winElem_LeftDblClickTextDigitalMul_33_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDigitalMul_33_9);
            //    if (winElem_LeftDblClickTextDigitalMul_33_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDigitalMul_33_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDigitalMul_33_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadDMM_Measure" at (32,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadDMM_Measure\" at (32,8)");
            //    string xpath_LeftDblClickTextReadDMM_Me_32_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadDMM_Measure\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadDMM_Me_32_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadDMM_Me_32_8);
            //    if (winElem_LeftDblClickTextReadDMM_Me_32_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadDMM_Me_32_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadDMM_Me_32_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Digital Multimeter" at (40,10)
            //    Console.WriteLine("LeftDblClick on Text \"Digital Multimeter\" at (40,10)");
            //    string xpath_LeftDblClickTextDigitalMul_40_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Digital Multimeter\"]";
            //    var winElem_LeftDblClickTextDigitalMul_40_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDigitalMul_40_10);
            //    if (winElem_LeftDblClickTextDigitalMul_40_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDigitalMul_40_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDigitalMul_40_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "XYZ Table" at (31,4)
            //    Console.WriteLine("LeftDblClick on Text \"XYZ Table\" at (31,4)");
            //    string xpath_LeftDblClickTextXYZTable_31_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"XYZ Table\"]";
            //    var winElem_LeftDblClickTextXYZTable_31_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextXYZTable_31_4);
            //    if (winElem_LeftDblClickTextXYZTable_31_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextXYZTable_31_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextXYZTable_31_4}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetXYZtable_Slope_RotationAngle" at (35,9)
            //    Console.WriteLine("LeftDblClick on Text \"GetXYZtable_Slope_RotationAngle\" at (35,9)");
            //    string xpath_LeftDblClickTextGetXYZtabl_35_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetXYZtable_Slope_RotationAngle\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetXYZtabl_35_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetXYZtabl_35_9);
            //    if (winElem_LeftDblClickTextGetXYZtabl_35_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetXYZtabl_35_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetXYZtabl_35_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "XYZ Table" at (34,5)
            //    Console.WriteLine("LeftDblClick on Text \"XYZ Table\" at (34,5)");
            //    string xpath_LeftDblClickTextXYZTable_34_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"XYZ Table\"]";
            //    var winElem_LeftDblClickTextXYZTable_34_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextXYZTable_34_5);
            //    if (winElem_LeftDblClickTextXYZTable_34_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextXYZTable_34_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextXYZTable_34_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "AC Source" at (20,6)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (20,6)");
            //    string xpath_LeftDblClickTextACSource_20_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_20_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_20_6);
            //    if (winElem_LeftDblClickTextACSource_20_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_20_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_20_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (24,13)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (24,13)");
            //    string xpath_LeftDblClickTextReadAC_Fre_24_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_24_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_24_13);
            //    if (winElem_LeftDblClickTextReadAC_Fre_24_13 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_24_13.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_24_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "AC Source" at (36,5)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (36,5)");
            //    string xpath_LeftDblClickTextACSource_36_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_36_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_36_5);
            //    if (winElem_LeftDblClickTextACSource_36_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_36_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_36_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "DC Source" at (37,12)
            //    Console.WriteLine("LeftDblClick on Text \"DC Source\" at (37,12)");
            //    string xpath_LeftDblClickTextDCSource_37_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
            //    var winElem_LeftDblClickTextDCSource_37_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_37_12);
            //    if (winElem_LeftDblClickTextDCSource_37_12 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_37_12.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_37_12}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetDCDev_IVCStatus" at (30,12)
            //    Console.WriteLine("LeftDblClick on Text \"GetDCDev_IVCStatus\" at (30,12)");
            //    string xpath_LeftDblClickTextGetDCDev_I_30_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetDCDev_IVCStatus\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetDCDev_I_30_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetDCDev_I_30_12);
            //    if (winElem_LeftDblClickTextGetDCDev_I_30_12 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetDCDev_I_30_12.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetDCDev_I_30_12}");
            //        return;
            //    }


            //    // LeftDblClick on Text "DC Source" at (36,3)
            //    Console.WriteLine("LeftDblClick on Text \"DC Source\" at (36,3)");
            //    string xpath_LeftDblClickTextDCSource_36_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
            //    var winElem_LeftDblClickTextDCSource_36_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_36_3);
            //    if (winElem_LeftDblClickTextDCSource_36_3 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_36_3.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_36_3}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Power Analyzer" at (36,11)
            //    Console.WriteLine("LeftDblClick on Text \"Power Analyzer\" at (36,11)");
            //    string xpath_LeftDblClickTextPowerAnaly_36_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Power Analyzer\"]";
            //    var winElem_LeftDblClickTextPowerAnaly_36_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextPowerAnaly_36_11);
            //    if (winElem_LeftDblClickTextPowerAnaly_36_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextPowerAnaly_36_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextPowerAnaly_36_11}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadPADev_HarmReading" at (29,6)
            //    Console.WriteLine("LeftDblClick on Text \"ReadPADev_HarmReading\" at (29,6)");
            //    string xpath_LeftDblClickTextReadPADev__29_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadPADev_HarmReading\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadPADev__29_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadPADev__29_6);
            //    if (winElem_LeftDblClickTextReadPADev__29_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadPADev__29_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadPADev__29_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Power Analyzer" at (33,14)
            //    Console.WriteLine("LeftDblClick on Text \"Power Analyzer\" at (33,14)");
            //    string xpath_LeftDblClickTextPowerAnaly_33_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Power Analyzer\"]";
            //    var winElem_LeftDblClickTextPowerAnaly_33_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextPowerAnaly_33_14);
            //    if (winElem_LeftDblClickTextPowerAnaly_33_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextPowerAnaly_33_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextPowerAnaly_33_14}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Digital Multimeter" at (34,11)
            //    Console.WriteLine("LeftDblClick on Text \"Digital Multimeter\" at (34,11)");
            //    string xpath_LeftDblClickTextDigitalMul_34_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Digital Multimeter\"]";
            //    var winElem_LeftDblClickTextDigitalMul_34_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDigitalMul_34_11);
            //    if (winElem_LeftDblClickTextDigitalMul_34_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDigitalMul_34_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDigitalMul_34_11}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadDMMDev_ResponseString" at (29,9)
            //    Console.WriteLine("LeftDblClick on Text \"ReadDMMDev_ResponseString\" at (29,9)");
            //    string xpath_LeftDblClickTextReadDMMDev_29_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadDMMDev_ResponseString\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadDMMDev_29_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadDMMDev_29_9);
            //    if (winElem_LeftDblClickTextReadDMMDev_29_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadDMMDev_29_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadDMMDev_29_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Digital Multimeter" at (34,7)
            //    Console.WriteLine("LeftDblClick on Text \"Digital Multimeter\" at (34,7)");
            //    string xpath_LeftDblClickTextDigitalMul_34_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Digital Multimeter\"]";
            //    var winElem_LeftDblClickTextDigitalMul_34_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDigitalMul_34_7);
            //    if (winElem_LeftDblClickTextDigitalMul_34_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDigitalMul_34_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDigitalMul_34_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "XYZ Table" at (32,10)
            //    Console.WriteLine("LeftDblClick on Text \"XYZ Table\" at (32,10)");
            //    string xpath_LeftDblClickTextXYZTable_32_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"XYZ Table\"]";
            //    var winElem_LeftDblClickTextXYZTable_32_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextXYZTable_32_10);
            //    if (winElem_LeftDblClickTextXYZTable_32_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextXYZTable_32_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextXYZTable_32_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "GetXYZtable_XYZCoordinate" at (29,7)
            //    Console.WriteLine("LeftDblClick on Text \"GetXYZtable_XYZCoordinate\" at (29,7)");
            //    string xpath_LeftDblClickTextGetXYZtabl_29_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"GetXYZtable_XYZCoordinate\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextGetXYZtabl_29_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextGetXYZtabl_29_7);
            //    if (winElem_LeftDblClickTextGetXYZtabl_29_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextGetXYZtabl_29_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextGetXYZtabl_29_7}");
            //        return;
            //    }




            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B4-15_2");
            //}
        }

        [TestMethod("B5-1")]
        [TestCategory("編輯動作(B5)")]
        //B5-1
        public void TIEditor_CopyAndPasteCommand()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            AddCommandBy(cgt, CommandName);

            // LeftClick on Text "ABS"
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);;

            // Copy and paste by clicking on the buttons (not from menu)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Check same test item command is added
            //CommandName.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Test Command]").GetText());
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Test Command]").ShouldHaveText(CommandName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftDblClick on Text "AC Source" at (30,4)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (30,4)");
            //    string xpath_LeftDblClickTextACSource_30_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_30_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_30_4);
            //    if (winElem_LeftDblClickTextACSource_30_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_30_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_30_4}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (35,3)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (35,3)");
            //    string xpath_LeftDblClickTextReadAC_Cur_35_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_35_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_35_3);
            //    if (winElem_LeftDblClickTextReadAC_Cur_35_3 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_35_3.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_35_3}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (40,1)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (40,1)");
            //    string xpath_LeftDblClickTextReadAC_Fre_40_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_40_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_40_1);
            //    if (winElem_LeftDblClickTextReadAC_Fre_40_1 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_40_1.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_40_1}");
            //        return;
            //    }


            //    // LeftClick on Custom "ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De" at (94,3)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\" at (94,3)");
            //    string xpath_LeftClickCustomReadAC_Fre_94_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Fre_94_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Fre_94_3);
            //    if (winElem_LeftClickCustomReadAC_Fre_94_3 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Fre_94_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Fre_94_3}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (9,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (9,9)");
            //    string xpath_LeftClickTextEdit_9_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_9_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_9_9);
            //    if (winElem_LeftClickTextEdit_9_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_9_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_9_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (27,7)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (27,7)");
            //    string xpath_LeftClickTextCopy_27_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_27_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_27_7);
            //    if (winElem_LeftClickTextCopy_27_7 != null)
            //    {
            //        winElem_LeftClickTextCopy_27_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_27_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-1_Copy");

            //    // LeftClick on Custom "ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa" at (58,11)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\" at (58,11)");
            //    string xpath_LeftClickCustomReadAC_Cur_58_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Cur_58_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Cur_58_11);
            //    if (winElem_LeftClickCustomReadAC_Cur_58_11 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Cur_58_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Cur_58_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (9,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (9,9)");
            //    xpath_LeftClickTextEdit_9_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    winElem_LeftClickTextEdit_9_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_9_9);
            //    if (winElem_LeftClickTextEdit_9_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_9_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_9_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (17,9)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (17,9)");
            //    string xpath_LeftClickTextPaste_17_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_17_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_17_9);
            //    if (winElem_LeftClickTextPaste_17_9 != null)
            //    {
            //        winElem_LeftClickTextPaste_17_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_17_9}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-1_Paste");

            //    // LeftClick on Pane "DataPanel" at (534,349)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (534,349)");
            //    string xpath_LeftClickPaneDataPanel_534_349 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_534_349 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_534_349);
            //    if (winElem_LeftClickPaneDataPanel_534_349 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_534_349.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_534_349}");
            //        return;
            //    }


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-2_1")]
        [TestCategory("編輯動作(B5)")]
        //B5-2_1
        public void TIEditor_CopyAndPasteVarCondition()
        {
            // Create new condition variable
            string CallName = "CAP";
            InitializeVariableDataGrid(VariableTabType.Condition, ShowName: CallName, CallName, VariableDataType.String);

            // Copy and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            string copiedCallName = CallName + "-Copy_1";
            string condVarDataGridId = VariableTabType.Condition.GetDescription();
            //copiedCallName.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Call Name]").GetText());
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftClick on Text "Condition" at (33,8)
            //    Console.WriteLine("LeftClick on Text \"Condition\" at (33,8)");
            //    string xpath_LeftClickTextCondition_33_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Condition\"][@AutomationId=\"CndRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Condition\"]";
            //    var winElem_LeftClickTextCondition_33_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCondition_33_8);
            //    if (winElem_LeftClickTextCondition_33_8 != null)
            //    {
            //        winElem_LeftClickTextCondition_33_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCondition_33_8}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (135,7)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (135,7)");
            //    string xpath_LeftDblClickCustomItemChroma_135_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_135_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_135_7);
            //    if (winElem_LeftDblClickCustomItemChroma_135_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_135_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_135_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (133,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (133,14)");
            //    string xpath_LeftClickCustomItemChroma_133_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_133_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_133_14);
            //    if (winElem_LeftClickCustomItemChroma_133_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_133_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_133_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""condition"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"condition\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_133_14.SendKeys("condition");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (65,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (65,11)");
            //    string xpath_LeftClickCustomItemChroma_65_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_65_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_65_11);
            //    if (winElem_LeftClickCustomItemChroma_65_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_65_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_65_11}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""floatflf"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"floatflf\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_65_11.SendKeys("floatflf");
            //    winElem_LeftClickCustomItemChroma_65_11.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (51,5)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (51,5)");
            //    string xpath_LeftClickCustomItemChroma_51_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_51_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_51_5);
            //    if (winElem_LeftClickCustomItemChroma_51_5 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_51_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_51_5}");
            //        return;
            //    }


            //    // LeftClick on Text "EditBox" at (30,13)
            //    Console.WriteLine("LeftClick on Text \"EditBox\" at (30,13)");
            //    string xpath_LeftClickTextEditBox_30_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //    var winElem_LeftClickTextEditBox_30_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_30_13);
            //    if (winElem_LeftClickTextEditBox_30_13 != null)
            //    {
            //        winElem_LeftClickTextEditBox_30_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_30_13}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (96,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (96,14)");
            //    string xpath_LeftClickCustomItemChroma_96_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_96_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_96_14);
            //    if (winElem_LeftClickCustomItemChroma_96_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_96_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_96_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""cc"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"cc\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_96_14.SendKeys("cc");


            //    // LeftClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C" at (138,6)
            //    Console.WriteLine("LeftClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\" at (138,6)");
            //    string xpath_LeftClickCustomconditionI_138_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomconditionI_138_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomconditionI_138_6);
            //    if (winElem_LeftClickCustomconditionI_138_6 != null)
            //    {
            //        winElem_LeftClickCustomconditionI_138_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomconditionI_138_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (9,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (9,9)");
            //    string xpath_LeftClickTextEdit_9_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_9_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_9_9);
            //    if (winElem_LeftClickTextEdit_9_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_9_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_9_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (23,7)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (23,7)");
            //    string xpath_LeftClickTextCopy_23_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_23_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_23_7);
            //    if (winElem_LeftClickTextCopy_23_7 != null)
            //    {
            //        winElem_LeftClickTextCopy_23_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_23_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_ConditionCopy");

            //    // LeftClick on Text "Edit" at (13,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (13,9)");
            //    string xpath_LeftClickTextEdit_13_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_13_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_13_9);
            //    if (winElem_LeftClickTextEdit_13_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_13_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_13_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (11,8)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (11,8)");
            //    string xpath_LeftClickTextPaste_11_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_11_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_11_8);
            //    if (winElem_LeftClickTextPaste_11_8 != null)
            //    {
            //        winElem_LeftClickTextPaste_11_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_11_8}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_ConditionPaste");


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-2_2")]
        [TestCategory("編輯動作(B5)")]
        //B5-2_2
        public void TIEditor_CopyAndPasteVarResult()
        {
            // Create new condition variable
            string CallName = "CAP";
            InitializeVariableDataGrid(VariableTabType.Result, ShowName: CallName, CallName, VariableDataType.String);

            // Copy and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            string copiedCallName = CallName + "-Copy_1";
            string resVarDataGridId = VariableTabType.Result.GetDescription();
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftClick on Text "Result" at (30,15)
            //    Console.WriteLine("LeftClick on Text \"Result\" at (30,15)");
            //    string xpath_LeftClickTextResult_30_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Result\"][@AutomationId=\"RstRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Result\"]";
            //    var winElem_LeftClickTextResult_30_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextResult_30_15);
            //    if (winElem_LeftClickTextResult_30_15 != null)
            //    {
            //        winElem_LeftClickTextResult_30_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextResult_30_15}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (86,9)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (86,9)");
            //    string xpath_LeftDblClickCustomItemChroma_86_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_86_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_86_9);
            //    if (winElem_LeftDblClickCustomItemChroma_86_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_86_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_86_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (98,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (98,12)");
            //    string xpath_LeftClickCustomItemChroma_98_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_98_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_98_12);
            //    if (winElem_LeftClickCustomItemChroma_98_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_98_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_98_12}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""result"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"result\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_98_12.SendKeys("result");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (41,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (41,9)");
            //    string xpath_LeftClickCustomItemChroma_41_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_41_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_41_9);
            //    if (winElem_LeftClickCustomItemChroma_41_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_41_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_41_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""float"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"float\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_41_9.SendKeys("float");
            //    winElem_LeftClickCustomItemChroma_41_9.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (105,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (105,14)");
            //    string xpath_LeftClickCustomItemChroma_105_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_105_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_105_14);
            //    if (winElem_LeftClickCustomItemChroma_105_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_105_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_105_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""rr"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"rr\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_105_14.SendKeys("rr");


            //    // LeftClick on Custom "result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG" at (64,10)
            //    Console.WriteLine("LeftClick on Custom \"result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG\" at (64,10)");
            //    string xpath_LeftClickCustomresultItem_64_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\"result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomresultItem_64_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomresultItem_64_10);
            //    if (winElem_LeftClickCustomresultItem_64_10 != null)
            //    {
            //        winElem_LeftClickCustomresultItem_64_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomresultItem_64_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (0,11)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (0,11)");
            //    string xpath_LeftClickTextEdit_0_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_0_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_0_11);
            //    if (winElem_LeftClickTextEdit_0_11 != null)
            //    {
            //        winElem_LeftClickTextEdit_0_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_0_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (19,4)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (19,4)");
            //    string xpath_LeftClickTextCopy_19_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_19_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_19_4);
            //    if (winElem_LeftClickTextCopy_19_4 != null)
            //    {
            //        winElem_LeftClickTextCopy_19_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_19_4}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_ResultCopy");

            //    // LeftClick on Text "Edit" at (15,12)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (15,12)");
            //    string xpath_LeftClickTextEdit_15_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_15_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_15_12);
            //    if (winElem_LeftClickTextEdit_15_12 != null)
            //    {
            //        winElem_LeftClickTextEdit_15_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_15_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (17,10)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (17,10)");
            //    string xpath_LeftClickTextPaste_17_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_17_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_17_10);
            //    if (winElem_LeftClickTextPaste_17_10 != null)
            //    {
            //        winElem_LeftClickTextPaste_17_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_17_10}");
            //        return;
            //    }


            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_ResultPaste");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-2_3")]
        [TestCategory("編輯動作(B5)")]
        //B5-2_3
        public void TIEditor_CopyAndPasteVarTmp()
        {
            // Create new condition variable
            string CallName = "CAP";
            InitializeVariableDataGrid(VariableTabType.Temp, ShowName: CallName, CallName, VariableDataType.String);

            // Copy and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            string copiedCallName = CallName + "-Copy_1";
            string tmpVarDataGridId = VariableTabType.Temp.GetDescription();
            PP5IDEWindow.PerformGetElement($"/ByCell@{tmpVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftClick on Text "Temp" at (16,12)
            //    Console.WriteLine("LeftClick on Text \"Temp\" at (16,12)");
            //    string xpath_LeftClickTextTemp_16_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Temp\"][@AutomationId=\"TmpRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Temp\"]";
            //    var winElem_LeftClickTextTemp_16_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTemp_16_12);
            //    if (winElem_LeftClickTextTemp_16_12 != null)
            //    {
            //        winElem_LeftClickTextTemp_16_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTemp_16_12}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (97,7)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (97,7)");
            //    string xpath_LeftDblClickCustomItemChroma_97_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_97_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_97_7);
            //    if (winElem_LeftDblClickCustomItemChroma_97_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_97_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_97_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (100,7)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (100,7)");
            //    string xpath_LeftClickCustomItemChroma_100_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_100_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_100_7);
            //    if (winElem_LeftClickCustomItemChroma_100_7 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_100_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_100_7}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""tmp"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"tmp\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_100_7.SendKeys("tmp");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (36,6)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (36,6)");
            //    string xpath_LeftClickCustomItemChroma_36_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_36_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_36_6);
            //    if (winElem_LeftClickCustomItemChroma_36_6 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_36_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_36_6}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""float"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"float\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_36_6.SendKeys("float");
            //    winElem_LeftClickCustomItemChroma_36_6.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (134,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (134,10)");
            //    string xpath_LeftClickCustomItemChroma_134_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_134_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_134_10);
            //    if (winElem_LeftClickCustomItemChroma_134_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_134_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_134_10}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""tt"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"tt\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_134_10.SendKeys("tt");


            //    // LeftClick on Custom "tmp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGrid" at (75,8)
            //    Console.WriteLine("LeftClick on Custom \"tmp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGrid\" at (75,8)");
            //    string xpath_LeftClickCustomtmpItemChr_75_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\"tmp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGrid\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomtmpItemChr_75_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomtmpItemChr_75_8);
            //    if (winElem_LeftClickCustomtmpItemChr_75_8 != null)
            //    {
            //        winElem_LeftClickCustomtmpItemChr_75_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomtmpItemChr_75_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (8,12)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (8,12)");
            //    string xpath_LeftClickTextEdit_8_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_8_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_8_12);
            //    if (winElem_LeftClickTextEdit_8_12 != null)
            //    {
            //        winElem_LeftClickTextEdit_8_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_8_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (19,9)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (19,9)");
            //    string xpath_LeftClickTextCopy_19_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_19_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_19_9);
            //    if (winElem_LeftClickTextCopy_19_9 != null)
            //    {
            //        winElem_LeftClickTextCopy_19_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_19_9}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_TmpCopy");

            //    // LeftClick on Text "Edit" at (15,7)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (15,7)");
            //    string xpath_LeftClickTextEdit_15_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_15_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_15_7);
            //    if (winElem_LeftClickTextEdit_15_7 != null)
            //    {
            //        winElem_LeftClickTextEdit_15_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_15_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (19,8)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (19,8)");
            //    string xpath_LeftClickTextPaste_19_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_19_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_19_8);
            //    if (winElem_LeftClickTextPaste_19_8 != null)
            //    {
            //        winElem_LeftClickTextPaste_19_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_19_8}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_TmpPaste");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-2_4")]
        [TestCategory("編輯動作(B5)")]
        //B5-2_4
        public void TIEditor_CopyAndPasteVarGlobal()
        {
            // Select the first row on callname
            VariableTabNavi(VariableTabType.Global);

            string glbVarDataGridId = VariableTabType.Global.GetDescription();
            string CallName = PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").GetText();

            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);

            // Copy and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            string copiedCallName = CallName + "-Copy_1";
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);

            // Delete the copied row by clicking on the Delete button
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Global" at (24,12)
            //    Console.WriteLine("LeftClick on Text \"Global\" at (24,12)");
            //    string xpath_LeftClickTextGlobal_24_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Global\"][@AutomationId=\"GlbRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Global\"]";
            //    var winElem_LeftClickTextGlobal_24_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextGlobal_24_12);
            //    if (winElem_LeftClickTextGlobal_24_12 != null)
            //    {
            //        winElem_LeftClickTextGlobal_24_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextGlobal_24_12}");
            //        return;
            //    }


            //    // LeftClick on Custom "Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default." at (90,12)
            //    Console.WriteLine("LeftClick on Custom \"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\" at (90,12)");
            //    string xpath_LeftClickCustomInsrc_Type_90_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomInsrc_Type_90_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomInsrc_Type_90_12);
            //    if (winElem_LeftClickCustomInsrc_Type_90_12 != null)
            //    {
            //        winElem_LeftClickCustomInsrc_Type_90_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomInsrc_Type_90_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (22,11)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (22,11)");
            //    string xpath_LeftClickTextEdit_22_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_22_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_22_11);
            //    if (winElem_LeftClickTextEdit_22_11 != null)
            //    {
            //        winElem_LeftClickTextEdit_22_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_22_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (31,7)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (31,7)");
            //    string xpath_LeftClickTextCopy_31_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_31_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_31_7);
            //    if (winElem_LeftClickTextCopy_31_7 != null)
            //    {
            //        winElem_LeftClickTextCopy_31_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_31_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_GlobalCopy");

            //    // LeftClick on Text "Edit" at (14,5)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (14,5)");
            //    string xpath_LeftClickTextEdit_14_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_14_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_14_5);
            //    if (winElem_LeftClickTextEdit_14_5 != null)
            //    {
            //        winElem_LeftClickTextEdit_14_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_14_5}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (11,7)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (11,7)");
            //    string xpath_LeftClickTextPaste_11_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_11_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_11_7);
            //    if (winElem_LeftClickTextPaste_11_7 != null)
            //    {
            //        winElem_LeftClickTextPaste_11_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_11_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-2_GlobalPaste");

            //    // LeftClick on HeaderItem "CallName" at (190,13)
            //    Console.WriteLine("LeftClick on HeaderItem \"CallName\" at (190,13)");
            //    string xpath_LeftClickHeaderItemCallName_190_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Custom[@Name=\"HeaderPanel\"][@AutomationId=\"HeaderPanel\"]/HeaderItem[@Name=\"CallName\"]";
            //    var winElem_LeftClickHeaderItemCallName_190_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickHeaderItemCallName_190_13);
            //    if (winElem_LeftClickHeaderItemCallName_190_13 != null)
            //    {
            //        winElem_LeftClickHeaderItemCallName_190_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickHeaderItemCallName_190_13}");
            //        return;
            //    }




            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-3")]
        [TestCategory("編輯動作(B5)")]
        //B5-3
        public void TIEditor_CrossTICopyAndPasteCommand()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            AddCommandBy(cgt, CommandName);

            // LeftClick on Text "ABS"
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // copy selected command by clicking on Copy button from toolbar
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new TI editor
            PerformOpenNewTI();

            // Paste the copied command by clicking on Paste button
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Check same test item command is added
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Test Command]").ShouldHaveText(CommandName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (55,11)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (55,11)");
            //    string xpath_LeftDblClickTextACSource_55_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_55_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_55_11);
            //    if (winElem_LeftDblClickTextACSource_55_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_55_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_55_11}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (66,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (66,8)");
            //    string xpath_LeftDblClickTextReadAC_Cur_66_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_66_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_66_8);
            //    if (winElem_LeftDblClickTextReadAC_Cur_66_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_66_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_66_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (64,5)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (64,5)");
            //    string xpath_LeftDblClickTextReadAC_Fre_64_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_64_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_64_5);
            //    if (winElem_LeftDblClickTextReadAC_Fre_64_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_64_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_64_5}");
            //        return;
            //    }


            //    // LeftClick on Custom "ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De" at (160,8)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\" at (160,8)");
            //    string xpath_LeftClickCustomReadAC_Fre_160_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Fre_160_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Fre_160_8);
            //    if (winElem_LeftClickCustomReadAC_Fre_160_8 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Fre_160_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Fre_160_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (20,10)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (20,10)");
            //    string xpath_LeftClickTextEdit_20_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_20_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_20_10);
            //    if (winElem_LeftClickTextEdit_20_10 != null)
            //    {
            //        winElem_LeftClickTextEdit_20_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_20_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (15,11)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (15,11)");
            //    string xpath_LeftClickTextCopy_15_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_15_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_15_11);
            //    if (winElem_LeftClickTextCopy_15_11 != null)
            //    {
            //        winElem_LeftClickTextCopy_15_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_15_11}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-3_Copy");

            //    // LeftClick on Text "Functions" at (40,8)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (40,8)");
            //    string xpath_LeftClickTextFunctions_40_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_40_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_40_8);
            //    if (winElem_LeftClickTextFunctions_40_8 != null)
            //    {
            //        winElem_LeftClickTextFunctions_40_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_40_8}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (42,4)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (42,4)");
            //    string xpath_LeftClickTextTIEditor_42_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_42_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_42_4);
            //    if (winElem_LeftClickTextTIEditor_42_4 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_42_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_42_4}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (10,8)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (10,8)");
            //    string xpath_LeftClickTextOk_10_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_10_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_10_8);
            //    if (winElem_LeftClickTextOk_10_8 != null)
            //    {
            //        winElem_LeftClickTextOk_10_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_10_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (9,14)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (9,14)");
            //    string xpath_LeftClickTextOk_9_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_9_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_9_14);
            //    if (winElem_LeftClickTextOk_9_14 != null)
            //    {
            //        winElem_LeftClickTextOk_9_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_9_14}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (26,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (26,10)");
            //    string xpath_LeftClickCustomItemChroma_26_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")]";
            //    var winElem_LeftClickCustomItemChroma_26_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_26_10);
            //    if (winElem_LeftClickCustomItemChroma_26_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_26_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_26_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (10,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (10,9)");
            //    string xpath_LeftClickTextEdit_10_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_10_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_10_9);
            //    if (winElem_LeftClickTextEdit_10_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_10_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_10_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (11,14)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (11,14)");
            //    string xpath_LeftClickTextPaste_11_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_11_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_11_14);
            //    if (winElem_LeftClickTextPaste_11_14 != null)
            //    {
            //        winElem_LeftClickTextPaste_11_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_11_14}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-3_Paste");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-4_1")]
        [TestCategory("編輯動作(B5)")]
        //B5-4_1
        public void TIEditor_CrossTICopyAndPasteVarCondition()
        {
            // Create new condition variable
            string CallName = "CAP";
            string condVarDataGridId = VariableTabType.Condition.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Condition, ShowName: CallName, CallName, VariableDataType.String);

            // Copy the variable by clicking on the Copy button (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new TI editor
            PerformOpenNewTI();

            // Paste the copied variable by clicking on Paste button (from toolbar)
            VariableTabNavi(VariableTabType.Condition);
            PP5IDEWindow.PerformClick($"/ByCell@{condVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Verify the pasted variable
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Call Name]").ShouldHaveText(CallName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Condition" at (33,8)
            //    Console.WriteLine("LeftClick on Text \"Condition\" at (33,8)");
            //    string xpath_LeftClickTextCondition_33_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Condition\"][@AutomationId=\"CndRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Condition\"]";
            //    var winElem_LeftClickTextCondition_33_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCondition_33_8);
            //    if (winElem_LeftClickTextCondition_33_8 != null)
            //    {
            //        winElem_LeftClickTextCondition_33_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCondition_33_8}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (135,7)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (135,7)");
            //    string xpath_LeftDblClickCustomItemChroma_135_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_135_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_135_7);
            //    if (winElem_LeftDblClickCustomItemChroma_135_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_135_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_135_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (133,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (133,14)");
            //    string xpath_LeftClickCustomItemChroma_133_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_133_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_133_14);
            //    if (winElem_LeftClickCustomItemChroma_133_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_133_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_133_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""condition"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"condition\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_133_14.SendKeys("condition");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (65,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (65,11)");
            //    string xpath_LeftClickCustomItemChroma_65_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_65_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_65_11);
            //    if (winElem_LeftClickCustomItemChroma_65_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_65_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_65_11}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""floatflf"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"floatflf\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_65_11.SendKeys("floatflf");
            //    winElem_LeftClickCustomItemChroma_65_11.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (51,5)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (51,5)");
            //    string xpath_LeftClickCustomItemChroma_51_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_51_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_51_5);
            //    if (winElem_LeftClickCustomItemChroma_51_5 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_51_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_51_5}");
            //        return;
            //    }


            //    // LeftClick on Text "EditBox" at (30,13)
            //    Console.WriteLine("LeftClick on Text \"EditBox\" at (30,13)");
            //    string xpath_LeftClickTextEditBox_30_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //    var winElem_LeftClickTextEditBox_30_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_30_13);
            //    if (winElem_LeftClickTextEditBox_30_13 != null)
            //    {
            //        winElem_LeftClickTextEditBox_30_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_30_13}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (96,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (96,14)");
            //    string xpath_LeftClickCustomItemChroma_96_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_96_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_96_14);
            //    if (winElem_LeftClickCustomItemChroma_96_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_96_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_96_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""cc"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"cc\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_96_14.SendKeys("cc");


            //    // LeftClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C" at (138,6)
            //    Console.WriteLine("LeftClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\" at (138,6)");
            //    string xpath_LeftClickCustomconditionI_138_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomconditionI_138_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomconditionI_138_6);
            //    if (winElem_LeftClickCustomconditionI_138_6 != null)
            //    {
            //        winElem_LeftClickCustomconditionI_138_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomconditionI_138_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (9,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (9,9)");
            //    string xpath_LeftClickTextEdit_9_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_9_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_9_9);
            //    if (winElem_LeftClickTextEdit_9_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_9_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_9_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (23,7)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (23,7)");
            //    string xpath_LeftClickTextCopy_23_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_23_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_23_7);
            //    if (winElem_LeftClickTextCopy_23_7 != null)
            //    {
            //        winElem_LeftClickTextCopy_23_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_23_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTIConditionCopy");

            //    // LeftClick on Text "Functions" at (26,13)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (26,13)");
            //    string xpath_LeftClickTextFunctions_26_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_26_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_26_13);
            //    if (winElem_LeftClickTextFunctions_26_13 != null)
            //    {
            //        winElem_LeftClickTextFunctions_26_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_26_13}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (24,17)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (24,17)");
            //    string xpath_LeftClickTextTIEditor_24_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_24_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_24_17);
            //    if (winElem_LeftClickTextTIEditor_24_17 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_24_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_24_17}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (9,3)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (9,3)");
            //    string xpath_LeftClickTextOk_9_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_9_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_9_3);
            //    if (winElem_LeftClickTextOk_9_3 != null)
            //    {
            //        winElem_LeftClickTextOk_9_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_9_3}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (9,8)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (9,8)");
            //    string xpath_LeftClickTextOk_9_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_9_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_9_8);
            //    if (winElem_LeftClickTextOk_9_8 != null)
            //    {
            //        winElem_LeftClickTextOk_9_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_9_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (128,6)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (128,6)");
            //    string xpath_LeftClickCustomItemChroma_128_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_128_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_128_6);
            //    if (winElem_LeftClickCustomItemChroma_128_6 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_128_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_128_6}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (10,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (10,8)");
            //    string xpath_LeftClickCustomItemChroma_10_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")]";
            //    var winElem_LeftClickCustomItemChroma_10_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_10_8);
            //    if (winElem_LeftClickCustomItemChroma_10_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_10_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_10_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (16,5)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (16,5)");
            //    string xpath_LeftClickTextEdit_16_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_16_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_16_5);
            //    if (winElem_LeftClickTextEdit_16_5 != null)
            //    {
            //        winElem_LeftClickTextEdit_16_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_16_5}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (19,7)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (19,7)");
            //    string xpath_LeftClickTextPaste_19_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_19_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_19_7);
            //    if (winElem_LeftClickTextPaste_19_7 != null)
            //    {
            //        winElem_LeftClickTextPaste_19_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_19_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTIConditionPaste");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-4_2")]
        [TestCategory("編輯動作(B5)")]
        //B5-4_2
        public void TIEditor_CrossTICopyAndPasteVarResult()
        {
            // Create new result variable
            string CallName = "CAP";
            string resVarDataGridId = VariableTabType.Result.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Result, ShowName: CallName, CallName, VariableDataType.String);

            // Copy the variable by clicking on the Copy button (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new TI editor
            PerformOpenNewTI();

            // Paste the copied variable by clicking on Paste button (from toolbar)
            VariableTabNavi(VariableTabType.Result);
            PP5IDEWindow.PerformClick($"/ByCell@{resVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Verify the pasted variable
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Call Name]").ShouldHaveText(CallName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Result" at (30,15)
            //    Console.WriteLine("LeftClick on Text \"Result\" at (30,15)");
            //    string xpath_LeftClickTextResult_30_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Result\"][@AutomationId=\"RstRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Result\"]";
            //    var winElem_LeftClickTextResult_30_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextResult_30_15);
            //    if (winElem_LeftClickTextResult_30_15 != null)
            //    {
            //        winElem_LeftClickTextResult_30_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextResult_30_15}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (86,9)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (86,9)");
            //    string xpath_LeftDblClickCustomItemChroma_86_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_86_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_86_9);
            //    if (winElem_LeftDblClickCustomItemChroma_86_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_86_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_86_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (98,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (98,12)");
            //    string xpath_LeftClickCustomItemChroma_98_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_98_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_98_12);
            //    if (winElem_LeftClickCustomItemChroma_98_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_98_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_98_12}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""result"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"result\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_98_12.SendKeys("result");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (41,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (41,9)");
            //    string xpath_LeftClickCustomItemChroma_41_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_41_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_41_9);
            //    if (winElem_LeftClickCustomItemChroma_41_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_41_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_41_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""float"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"float\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_41_9.SendKeys("float");
            //    winElem_LeftClickCustomItemChroma_41_9.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (105,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (105,14)");
            //    string xpath_LeftClickCustomItemChroma_105_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_105_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_105_14);
            //    if (winElem_LeftClickCustomItemChroma_105_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_105_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_105_14}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""rr"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"rr\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_105_14.SendKeys("rr");


            //    // LeftClick on Custom "result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG" at (64,10)
            //    Console.WriteLine("LeftClick on Custom \"result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG\" at (64,10)");
            //    string xpath_LeftClickCustomresultItem_64_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\"result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomresultItem_64_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomresultItem_64_10);
            //    if (winElem_LeftClickCustomresultItem_64_10 != null)
            //    {
            //        winElem_LeftClickCustomresultItem_64_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomresultItem_64_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (0,11)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (0,11)");
            //    string xpath_LeftClickTextEdit_0_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_0_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_0_11);
            //    if (winElem_LeftClickTextEdit_0_11 != null)
            //    {
            //        winElem_LeftClickTextEdit_0_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_0_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (19,4)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (19,4)");
            //    string xpath_LeftClickTextCopy_19_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_19_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_19_4);
            //    if (winElem_LeftClickTextCopy_19_4 != null)
            //    {
            //        winElem_LeftClickTextCopy_19_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_19_4}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTIResultCopy");


            //    // LeftClick on Text "Functions" at (21,8)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (21,8)");
            //    string xpath_LeftClickTextFunctions_21_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_21_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_21_8);
            //    if (winElem_LeftClickTextFunctions_21_8 != null)
            //    {
            //        winElem_LeftClickTextFunctions_21_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_21_8}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (33,12)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (33,12)");
            //    string xpath_LeftClickTextTIEditor_33_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_33_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_33_12);
            //    if (winElem_LeftClickTextTIEditor_33_12 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_33_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_33_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (11,9)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (11,9)");
            //    string xpath_LeftClickTextOk_11_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_11_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_11_9);
            //    if (winElem_LeftClickTextOk_11_9 != null)
            //    {
            //        winElem_LeftClickTextOk_11_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_11_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (12,12)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (12,12)");
            //    string xpath_LeftClickTextOk_12_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_12_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_12_12);
            //    if (winElem_LeftClickTextOk_12_12 != null)
            //    {
            //        winElem_LeftClickTextOk_12_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_12_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Result" at (20,3)
            //    Console.WriteLine("LeftClick on Text \"Result\" at (20,3)");
            //    string xpath_LeftClickTextResult_20_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Result\"][@AutomationId=\"RstRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Result\"]";
            //    var winElem_LeftClickTextResult_20_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextResult_20_3);
            //    if (winElem_LeftClickTextResult_20_3 != null)
            //    {
            //        winElem_LeftClickTextResult_20_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextResult_20_3}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (23,0)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (23,0)");
            //    string xpath_LeftClickCustomItemChroma_23_0 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")]";
            //    var winElem_LeftClickCustomItemChroma_23_0 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_23_0);
            //    if (winElem_LeftClickCustomItemChroma_23_0 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_23_0.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_23_0}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (11,12)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (11,12)");
            //    string xpath_LeftClickTextEdit_11_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_11_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_11_12);
            //    if (winElem_LeftClickTextEdit_11_12 != null)
            //    {
            //        winElem_LeftClickTextEdit_11_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_11_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (14,10)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (14,10)");
            //    string xpath_LeftClickTextPaste_14_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_14_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_14_10);
            //    if (winElem_LeftClickTextPaste_14_10 != null)
            //    {
            //        winElem_LeftClickTextPaste_14_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_14_10}");
            //        return;
            //    }


            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTIResultPaste");


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-4_3")]
        [TestCategory("編輯動作(B5)")]
        //B5-4_3
        public void TIEditor_CrossTICopyAndPasteVarTmp()
        {
            // Create new result variable
            string CallName = "CAP";
            string tmpVarDataGridId = VariableTabType.Temp.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Temp, ShowName: CallName, CallName, VariableDataType.String);

            // Copy the variable by clicking on the Copy button (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new TI editor
            PerformOpenNewTI();

            // Paste the copied variable by clicking on Paste button (from toolbar)
            VariableTabNavi(VariableTabType.Temp);
            PP5IDEWindow.PerformClick($"/ByCell@{tmpVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Check the paste result variable
            PP5IDEWindow.PerformGetElement($"/ByCell@{tmpVarDataGridId}[1,@Call Name]").ShouldHaveText(CallName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftClick on Text "Temp" at (16,12)
            //    Console.WriteLine("LeftClick on Text \"Temp\" at (16,12)");
            //    string xpath_LeftClickTextTemp_16_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Temp\"][@AutomationId=\"TmpRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Temp\"]";
            //    var winElem_LeftClickTextTemp_16_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTemp_16_12);
            //    if (winElem_LeftClickTextTemp_16_12 != null)
            //    {
            //        winElem_LeftClickTextTemp_16_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTemp_16_12}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (97,7)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (97,7)");
            //    string xpath_LeftDblClickCustomItemChroma_97_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_97_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_97_7);
            //    if (winElem_LeftDblClickCustomItemChroma_97_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_97_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_97_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (100,7)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (100,7)");
            //    string xpath_LeftClickCustomItemChroma_100_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_100_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_100_7);
            //    if (winElem_LeftClickCustomItemChroma_100_7 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_100_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_100_7}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""tmp"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"tmp\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_100_7.SendKeys("tmp");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (36,6)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (36,6)");
            //    string xpath_LeftClickCustomItemChroma_36_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_36_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_36_6);
            //    if (winElem_LeftClickCustomItemChroma_36_6 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_36_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_36_6}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""float"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"float\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_36_6.SendKeys("float");
            //    winElem_LeftClickCustomItemChroma_36_6.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (134,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (134,10)");
            //    string xpath_LeftClickCustomItemChroma_134_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_134_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_134_10);
            //    if (winElem_LeftClickCustomItemChroma_134_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_134_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_134_10}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""tt"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"tt\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_134_10.SendKeys("tt");


            //    // LeftClick on Custom "tmp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGrid" at (75,8)
            //    Console.WriteLine("LeftClick on Custom \"tmp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGrid\" at (75,8)");
            //    string xpath_LeftClickCustomtmpItemChr_75_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\"tmp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGrid\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomtmpItemChr_75_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomtmpItemChr_75_8);
            //    if (winElem_LeftClickCustomtmpItemChr_75_8 != null)
            //    {
            //        winElem_LeftClickCustomtmpItemChr_75_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomtmpItemChr_75_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (8,12)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (8,12)");
            //    string xpath_LeftClickTextEdit_8_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_8_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_8_12);
            //    if (winElem_LeftClickTextEdit_8_12 != null)
            //    {
            //        winElem_LeftClickTextEdit_8_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_8_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (19,9)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (19,9)");
            //    string xpath_LeftClickTextCopy_19_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_19_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_19_9);
            //    if (winElem_LeftClickTextCopy_19_9 != null)
            //    {
            //        winElem_LeftClickTextCopy_19_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_19_9}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTITmpCopy");


            //    // LeftClick on Text "Functions" at (32,8)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (32,8)");
            //    string xpath_LeftClickTextFunctions_32_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_32_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_32_8);
            //    if (winElem_LeftClickTextFunctions_32_8 != null)
            //    {
            //        winElem_LeftClickTextFunctions_32_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_32_8}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (34,8)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (34,8)");
            //    string xpath_LeftClickTextTIEditor_34_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_34_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_34_8);
            //    if (winElem_LeftClickTextTIEditor_34_8 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_34_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_34_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (13,13)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (13,13)");
            //    string xpath_LeftClickTextOk_13_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_13_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_13_13);
            //    if (winElem_LeftClickTextOk_13_13 != null)
            //    {
            //        winElem_LeftClickTextOk_13_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_13_13}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (14,11)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (14,11)");
            //    string xpath_LeftClickTextOk_14_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_14_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_14_11);
            //    if (winElem_LeftClickTextOk_14_11 != null)
            //    {
            //        winElem_LeftClickTextOk_14_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_14_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Temp" at (16,10)
            //    Console.WriteLine("LeftClick on Text \"Temp\" at (16,10)");
            //    string xpath_LeftClickTextTemp_16_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Temp\"][@AutomationId=\"TmpRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Temp\"]";
            //    var winElem_LeftClickTextTemp_16_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTemp_16_10);
            //    if (winElem_LeftClickTextTemp_16_10 != null)
            //    {
            //        winElem_LeftClickTextTemp_16_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTemp_16_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (26,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (26,9)");
            //    string xpath_LeftClickCustomItemChroma_26_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")]";
            //    var winElem_LeftClickCustomItemChroma_26_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_26_9);
            //    if (winElem_LeftClickCustomItemChroma_26_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_26_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_26_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (15,3)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (15,3)");
            //    string xpath_LeftClickTextEdit_15_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_15_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_15_3);
            //    if (winElem_LeftClickTextEdit_15_3 != null)
            //    {
            //        winElem_LeftClickTextEdit_15_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_15_3}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (19,7)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (19,7)");
            //    string xpath_LeftClickTextPaste_19_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_19_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_19_7);
            //    if (winElem_LeftClickTextPaste_19_7 != null)
            //    {
            //        winElem_LeftClickTextPaste_19_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_19_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTITmpPaste");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-4_4")]
        [TestCategory("編輯動作(B5)")]
        //B5-4_4
        public void TIEditor_CrossTICopyAndPasteVarGlobal()
        {
            // Select the first row on callname
            VariableTabNavi(VariableTabType.Global);
            string glbVarDataGridId = VariableTabType.Global.GetDescription();
            string CallName = PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").GetText();

            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);

            // Copy the variable by clicking on the Copy button (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new TI editor
            PerformOpenNewTI();

            // Paste the copied variable by clicking on Paste button (from toolbar)
            VariableTabNavi(VariableTabType.Global);
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Verify the copied variable has been pasted
            string copiedCallName = CallName + "-Copy_1";
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);

            // Delete the copied variable
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Global" at (24,12)
            //    Console.WriteLine("LeftClick on Text \"Global\" at (24,12)");
            //    string xpath_LeftClickTextGlobal_24_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Global\"][@AutomationId=\"GlbRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Global\"]";
            //    var winElem_LeftClickTextGlobal_24_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextGlobal_24_12);
            //    if (winElem_LeftClickTextGlobal_24_12 != null)
            //    {
            //        winElem_LeftClickTextGlobal_24_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextGlobal_24_12}");
            //        return;
            //    }


            //    // LeftClick on Custom "Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default." at (90,12)
            //    Console.WriteLine("LeftClick on Custom \"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\" at (90,12)");
            //    string xpath_LeftClickCustomInsrc_Type_90_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomInsrc_Type_90_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomInsrc_Type_90_12);
            //    if (winElem_LeftClickCustomInsrc_Type_90_12 != null)
            //    {
            //        winElem_LeftClickCustomInsrc_Type_90_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomInsrc_Type_90_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (22,11)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (22,11)");
            //    string xpath_LeftClickTextEdit_22_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_22_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_22_11);
            //    if (winElem_LeftClickTextEdit_22_11 != null)
            //    {
            //        winElem_LeftClickTextEdit_22_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_22_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (31,7)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (31,7)");
            //    string xpath_LeftClickTextCopy_31_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_31_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_31_7);
            //    if (winElem_LeftClickTextCopy_31_7 != null)
            //    {
            //        winElem_LeftClickTextCopy_31_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_31_7}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTIGlobalCopy");

            //    // LeftClick on Text "Functions" at (44,9)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (44,9)");
            //    string xpath_LeftClickTextFunctions_44_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_44_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_44_9);
            //    if (winElem_LeftClickTextFunctions_44_9 != null)
            //    {
            //        winElem_LeftClickTextFunctions_44_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_44_9}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (39,12)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (39,12)");
            //    string xpath_LeftClickTextTIEditor_39_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_39_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_39_12);
            //    if (winElem_LeftClickTextTIEditor_39_12 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_39_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_39_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (8,9)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (8,9)");
            //    string xpath_LeftClickTextOk_8_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_8_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_8_9);
            //    if (winElem_LeftClickTextOk_8_9 != null)
            //    {
            //        winElem_LeftClickTextOk_8_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_8_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (19,18)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (19,18)");
            //    string xpath_LeftClickTextOk_19_18 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_19_18 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_19_18);
            //    if (winElem_LeftClickTextOk_19_18 != null)
            //    {
            //        winElem_LeftClickTextOk_19_18.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_19_18}");
            //        return;
            //    }


            //    // LeftClick on Text "Global" at (18,12)
            //    Console.WriteLine("LeftClick on Text \"Global\" at (18,12)");
            //    string xpath_LeftClickTextGlobal_18_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Global\"][@AutomationId=\"GlbRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Global\"]";
            //    var winElem_LeftClickTextGlobal_18_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextGlobal_18_12);
            //    if (winElem_LeftClickTextGlobal_18_12 != null)
            //    {
            //        winElem_LeftClickTextGlobal_18_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextGlobal_18_12}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (23,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (23,8)");
            //    string xpath_LeftClickCustomItemChroma_23_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")]";
            //    var winElem_LeftClickCustomItemChroma_23_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_23_8);
            //    if (winElem_LeftClickCustomItemChroma_23_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_23_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_23_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (17,5)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (17,5)");
            //    string xpath_LeftClickTextEdit_17_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_17_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_17_5);
            //    if (winElem_LeftClickTextEdit_17_5 != null)
            //    {
            //        winElem_LeftClickTextEdit_17_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_17_5}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (22,11)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (22,11)");
            //    string xpath_LeftClickTextPaste_22_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_22_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_22_11);
            //    if (winElem_LeftClickTextPaste_22_11 != null)
            //    {
            //        winElem_LeftClickTextPaste_22_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_22_11}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-4_CrossTIGlobalPaste");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-5_Condition")]
        [TestCategory("編輯動作(B5)")]
        //B5-5_Condition
        public void TIEditor_TICopyAndPasteVarCondition_ShouldPasteOnPreviousPositionOfCurrentSelection()
        {
            // Steps:
            // 1. Add one variable in condition page
            // 2. Click copy and paste on toolbar
            // 3. Check variable is inserted in the previous position, verify each part of the variable
            //    (give row number: 1 and each of the column name)

            // Step 1. 
            string CallName = "CAP";
            string condVarDataGridId = VariableTabType.Condition.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Condition, ShowName: CallName, CallName, VariableDataType.String);

            // Step 2.
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Step 3.
            string copiedCallName = CallName + "-Copy_1";
            string showNameExpected = CallName;
            string dataTypeExpected = VariableDataType.String.ToString();
            string editTypeExpected = VariableEditType.EditBox.ToString();

            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);        // Call Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Show Name]").ShouldHaveText(showNameExpected);      // Show Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Data Type]").ShouldHaveText(dataTypeExpected);      // Data Type
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Edit Type]").ShouldHaveText(editTypeExpected);      // Edit Type
        }

        [TestMethod("B5-5_Result")]
        [TestCategory("編輯動作(B5)")]
        //B5-5_Result
        public void TIEditor_TICopyAndPasteVarResult_ShouldPasteOnPreviousPositionOfCurrentSelection()
        {
            // Steps:
            // 1. Add one variable in Result page
            // 2. Click copy and paste on toolbar
            // 3. Check variable is inserted in the previous position, verify each part of the variable
            //    (give row number: 1 and each of the column name)

            // Step 1. 
            string CallName = "CAP";
            string resVarDataGridId = VariableTabType.Result.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Result, ShowName: CallName, CallName, VariableDataType.String);

            // Step 2.
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Step 3.
            string copiedCallName = CallName + "-Copy_1";
            string showNameExpected = CallName;
            string dataTypeExpected = VariableDataType.String.ToString();
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);        // Call Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Show Name]").ShouldHaveText(showNameExpected);      // Show Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Data Type]").ShouldHaveText(dataTypeExpected);      // Data Type
        }

        [TestMethod("B5-5_Tmp")]
        [TestCategory("編輯動作(B5)")]
        //B5-5_Temp
        public void TIEditor_TICopyAndPasteVarTemp_ShouldPasteOnPreviousPositionOfCurrentSelection()
        {
            // Steps:
            // 1. Add one variable in Temp page
            // 2. Click copy and paste on toolbar
            // 3. Check variable is inserted in the previous position, verify each part of the variable
            //    (give row number: 1 and each of the column name)

            // Step 1. 
            string CallName = "CAP";
            string tmpVarDataGridId = VariableTabType.Temp.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Temp, ShowName: CallName, CallName, VariableDataType.String);

            // Step 2.
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Step 3.
            string copiedCallName = CallName + "-Copy_1";
            string showNameExpected = CallName;
            string dataTypeExpected = VariableDataType.String.ToString();
            PP5IDEWindow.PerformGetElement($"/ByCell@{tmpVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);        // Call Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{tmpVarDataGridId}[1,@Show Name]").ShouldHaveText(showNameExpected);      // Show Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{tmpVarDataGridId}[1,@Data Type]").ShouldHaveText(dataTypeExpected);      // Data Type
        }

        [TestMethod("B5-5_Global")]
        [TestCategory("編輯動作(B5)")]
        //B5-5_Global
        public void TIEditor_TICopyAndPasteVarGlobal_ShouldPasteOnPreviousPositionOfCurrentSelection()
        {
            // Steps:
            // 1. Select the first variable in Global page
            // 2. Click copy and paste on toolbar
            // 3. Check variable is inserted in the previous position, verify each part of the variable
            //    (give row number: 1 and each of the column name)
            // 4. Delete the copied variable

            // Step 1. 
            VariableTabNavi(VariableTabType.Global);
            string glbVarDataGridId = VariableTabType.Global.GetDescription();
            string CallName = PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").GetText();
            string showNameExpected = PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Show Name]").GetText();
            string dataTypeExpected = PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Data Type]").GetText();
            string editTypeExpected = PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Edit Type]").GetText();
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);

            // Step 2.
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Step 3.
            string copiedCallName = CallName + "-Copy_1";
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").ShouldHaveText(copiedCallName);         // Call Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Show Name]").ShouldHaveText(showNameExpected);       // Show Name
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Data Type]").ShouldHaveText(dataTypeExpected);       // Data Type
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Edit Type]").ShouldHaveText(editTypeExpected);       // Edit Type

            // Step 4. 
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
        }

        [TestMethod("B5-6")]
        [TestCategory("編輯動作(B5)")]
        //B5-6
        public void TIEditor_CutAndPasteInTestItemContext()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            AddCommandBy(cgt, CommandName);

            // LeftClick on Text "ABS"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Cut and paste by clicking on the buttons (not from menu)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Cut);
            PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[1,@Test Command]").GetText().ShouldBeNull();

            // Check same test item command is added
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Test Command]").ShouldHaveText(CommandName);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{

            //    // LeftDblClick on Text "AC Source" at (20,9)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (20,9)");
            //    string xpath_LeftDblClickTextACSource_20_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_20_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_20_9);
            //    if (winElem_LeftDblClickTextACSource_20_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_20_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_20_9}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (35,6)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (35,6)");
            //    string xpath_LeftDblClickTextReadAC_Cur_35_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_35_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_35_6);
            //    if (winElem_LeftDblClickTextReadAC_Cur_35_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_35_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_35_6}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (39,4)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (39,4)");
            //    string xpath_LeftDblClickTextReadAC_Fre_39_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_39_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_39_4);
            //    if (winElem_LeftDblClickTextReadAC_Fre_39_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_39_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_39_4}");
            //        return;
            //    }


            //    // LeftClick on Custom "ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De" at (239,9)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\" at (239,9)");
            //    string xpath_LeftClickCustomReadAC_Fre_239_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Fre_239_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Fre_239_9);
            //    if (winElem_LeftClickCustomReadAC_Fre_239_9 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Fre_239_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Fre_239_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (13,8)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (13,8)");
            //    string xpath_LeftClickTextEdit_13_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_13_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_13_8);
            //    if (winElem_LeftClickTextEdit_13_8 != null)
            //    {
            //        winElem_LeftClickTextEdit_13_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_13_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Cut" at (16,8)
            //    Console.WriteLine("LeftClick on Text \"Cut\" at (16,8)");
            //    string xpath_LeftClickTextCut_16_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Cut\"]";
            //    var winElem_LeftClickTextCut_16_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCut_16_8);
            //    if (winElem_LeftClickTextCut_16_8 != null)
            //    {
            //        winElem_LeftClickTextCut_16_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCut_16_8}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-6_Cut");

            //    // LeftClick on Custom "ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa" at (114,8)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\" at (114,8)");
            //    string xpath_LeftClickCustomReadAC_Cur_114_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Cur_114_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Cur_114_8);
            //    if (winElem_LeftClickCustomReadAC_Cur_114_8 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Cur_114_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Cur_114_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (16,5)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (16,5)");
            //    string xpath_LeftClickTextEdit_16_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_16_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_16_5);
            //    if (winElem_LeftClickTextEdit_16_5 != null)
            //    {
            //        winElem_LeftClickTextEdit_16_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_16_5}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (21,18)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (21,18)");
            //    string xpath_LeftClickTextPaste_21_18 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_21_18 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_21_18);
            //    if (winElem_LeftClickTextPaste_21_18 != null)
            //    {
            //        winElem_LeftClickTextPaste_21_18.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_21_18}");
            //        return;
            //    }



            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-6_Paste");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-7_1")]
        [TestCategory("編輯動作(B5)")]
        //B5-7_1
        public void TIEditor_CutAndPasteVarCondition()
        {
            // Create new condition variable
            string CallName = "CAP";
            string condVarDataGridId = VariableTabType.Condition.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Condition, ShowName: CallName, CallName, VariableDataType.String);

            // Cut and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Cut);
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Call Name]").GetText().ShouldBeNull();

            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Call Name]").ShouldHaveText(CallName);

            //    //MainPanel_TIEditor_OpenNewTI();
            //    TimeSpan.FromSeconds(2);

            //    bool bSuccess = false;

            //    try
            //    {

            //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (153,3)
            //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (153,3)");
            //        string xpath_LeftDblClickCustomItemChroma_153_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftDblClickCustomItemChroma_153_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_153_3);
            //        if (winElem_LeftDblClickCustomItemChroma_153_3 != null)
            //        {
            //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_153_3.Coordinates);
            //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_153_3}");
            //            return;
            //        }


            //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (65,14)
            //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (65,14)");
            //        string xpath_LeftDblClickCustomItemChroma_65_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftDblClickCustomItemChroma_65_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_65_14);
            //        if (winElem_LeftDblClickCustomItemChroma_65_14 != null)
            //        {
            //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_65_14.Coordinates);
            //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_65_14}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""condition"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"condition\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftDblClickCustomItemChroma_65_14.SendKeys("condition");


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (38,10)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (38,10)");
            //        string xpath_LeftClickCustomItemChroma_38_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //        var winElem_LeftClickCustomItemChroma_38_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_38_10);
            //        if (winElem_LeftClickCustomItemChroma_38_10 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_38_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_38_10}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_38_10.SendKeys("flo");
            //        winElem_LeftClickCustomItemChroma_38_10.SendKeys(Keys.Return + Keys.Return);


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (48,9)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (48,9)");
            //        string xpath_LeftClickCustomItemChroma_48_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //        var winElem_LeftClickCustomItemChroma_48_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_48_9);
            //        if (winElem_LeftClickCustomItemChroma_48_9 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_48_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_48_9}");
            //            return;
            //        }


            //        // LeftClick on Text "EditBox" at (32,9)
            //        Console.WriteLine("LeftClick on Text \"EditBox\" at (32,9)");
            //        string xpath_LeftClickTextEditBox_32_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //        var winElem_LeftClickTextEditBox_32_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_32_9);
            //        if (winElem_LeftClickTextEditBox_32_9 != null)
            //        {
            //            winElem_LeftClickTextEditBox_32_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_32_9}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (116,5)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (116,5)");
            //        string xpath_LeftClickCustomItemChroma_116_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //        var winElem_LeftClickCustomItemChroma_116_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_116_5);
            //        if (winElem_LeftClickCustomItemChroma_116_5 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_116_5.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_116_5}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""cc"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"cc\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_116_5.SendKeys("cc");


            //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (140,9)
            //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (140,9)");
            //        string xpath_LeftDblClickCustomItemChroma_140_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftDblClickCustomItemChroma_140_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_140_9);
            //        if (winElem_LeftDblClickCustomItemChroma_140_9 != null)
            //        {
            //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_140_9.Coordinates);
            //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_140_9}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (126,10)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (126,10)");
            //        string xpath_LeftClickCustomItemChroma_126_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomItemChroma_126_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_126_10);
            //        if (winElem_LeftClickCustomItemChroma_126_10 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_126_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_126_10}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""condition2"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"condition2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_126_10.SendKeys("condition2");


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (46,9)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (46,9)");
            //        string xpath_LeftClickCustomItemChroma_46_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //        var winElem_LeftClickCustomItemChroma_46_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_46_9);
            //        if (winElem_LeftClickCustomItemChroma_46_9 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_46_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_46_9}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_46_9.SendKeys("flo");
            //        winElem_LeftClickCustomItemChroma_46_9.SendKeys(Keys.Return + Keys.Return);


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (56,6)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (56,6)");
            //        string xpath_LeftClickCustomItemChroma_56_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //        var winElem_LeftClickCustomItemChroma_56_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_56_6);
            //        if (winElem_LeftClickCustomItemChroma_56_6 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_56_6.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_56_6}");
            //            return;
            //        }


            //        // LeftClick on Text "EditBox" at (28,8)
            //        Console.WriteLine("LeftClick on Text \"EditBox\" at (28,8)");
            //        string xpath_LeftClickTextEditBox_28_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //        var winElem_LeftClickTextEditBox_28_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_28_8);
            //        if (winElem_LeftClickTextEditBox_28_8 != null)
            //        {
            //            winElem_LeftClickTextEditBox_28_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_28_8}");
            //            return;
            //        }

            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (67,7)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (67,7)");
            //        string xpath_LeftClickCustomItemChroma_67_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //        var winElem_LeftClickCustomItemChroma_67_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_67_7);
            //        if (winElem_LeftClickCustomItemChroma_67_7 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_67_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_67_7}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""cc2"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"cc2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_67_7.SendKeys("cc2");


            //        // LeftClick on Custom "condition2, Item: Chroma.TestItemEditor.ComposedElement.Default." at (83,10)
            //        Console.WriteLine("LeftClick on Custom \"condition2, Item: Chroma.TestItemEditor.ComposedElement.Default.\" at (83,10)");
            //        string xpath_LeftClickCustomcondition2_83_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition2, Item: Chroma.TestItemEditor.ComposedElement.Default.\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomcondition2_83_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomcondition2_83_10);
            //        if (winElem_LeftClickCustomcondition2_83_10 != null)
            //        {
            //            winElem_LeftClickCustomcondition2_83_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomcondition2_83_10}");
            //            return;
            //        }



            //        // LeftClick on Text "Edit" at (15,14)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (15,14)");
            //        string xpath_LeftClickTextEdit_15_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_15_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_15_14);
            //        if (winElem_LeftClickTextEdit_15_14 != null)
            //        {
            //            winElem_LeftClickTextEdit_15_14.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_15_14}");
            //            return;
            //        }


            //        // LeftClick on Text "Cut" at (6,10)
            //        Console.WriteLine("LeftClick on Text \"Cut\" at (6,10)");
            //        string xpath_LeftClickTextCut_6_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Cut\"]";
            //        var winElem_LeftClickTextCut_6_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCut_6_10);
            //        if (winElem_LeftClickTextCut_6_10 != null)
            //        {
            //            winElem_LeftClickTextCut_6_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCut_6_10}");
            //            return;
            //        }

            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_ConditionCut");

            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (24,8)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (24,8)");
            //        string xpath_LeftClickCustomItemChroma_24_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")]";
            //        var winElem_LeftClickCustomItemChroma_24_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_24_8);
            //        if (winElem_LeftClickCustomItemChroma_24_8 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_24_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_24_8}");
            //            return;
            //        }



            //        // LeftClick on Text "Edit" at (9,7)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (9,7)");
            //        string xpath_LeftClickTextEdit_9_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_9_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_9_7);
            //        if (winElem_LeftClickTextEdit_9_7 != null)
            //        {
            //            winElem_LeftClickTextEdit_9_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_9_7}");
            //            return;
            //        }


            //        // LeftClick on Text "Paste" at (17,8)
            //        Console.WriteLine("LeftClick on Text \"Paste\" at (17,8)");
            //        string xpath_LeftClickTextPaste_17_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //        var winElem_LeftClickTextPaste_17_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_17_8);
            //        if (winElem_LeftClickTextPaste_17_8 != null)
            //        {
            //            winElem_LeftClickTextPaste_17_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_17_8}");
            //            return;
            //        }


            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_ConditionPaste");

            //        bSuccess = true;
            //    }

            //    finally
            //    {
            //        Assert.AreEqual(bSuccess, true);
            //    }
        }

        [TestMethod("B5-7_2")]
        [TestCategory("編輯動作(B5)")]
        //B5-7_2
        public void TIEditor_CutAndPasteVarResult()
        {
            // Create new condition variable
            string CallName = "CAP";
            string resVarDataGridId = VariableTabType.Result.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Result, ShowName: CallName, CallName, VariableDataType.String);

            // Cut and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Cut);
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Call Name]").GetText().ShouldBeNull();

            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Call Name]").ShouldHaveText(CallName);

            //    //MainPanel_TIEditor_OpenNewTI();
            //    TimeSpan.FromSeconds(2);

            //    bool bSuccess = false;

            //    try
            //    {
            //        // LeftClick on Text "Result" at (22,5)
            //        Console.WriteLine("LeftClick on Text \"Result\" at (22,5)");
            //        string xpath_LeftClickTextResult_22_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Result\"][@AutomationId=\"RstRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Result\"]";
            //        var winElem_LeftClickTextResult_22_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextResult_22_5);
            //        if (winElem_LeftClickTextResult_22_5 != null)
            //        {
            //            winElem_LeftClickTextResult_22_5.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextResult_22_5}");
            //            return;
            //        }


            //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (91,7)
            //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (91,7)");
            //        string xpath_LeftDblClickCustomItemChroma_91_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftDblClickCustomItemChroma_91_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_91_7);
            //        if (winElem_LeftDblClickCustomItemChroma_91_7 != null)
            //        {
            //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_91_7.Coordinates);
            //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_91_7}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (109,7)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (109,7)");
            //        string xpath_LeftClickCustomItemChroma_109_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomItemChroma_109_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_109_7);
            //        if (winElem_LeftClickCustomItemChroma_109_7 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_109_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_109_7}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (114,9)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (114,9)");
            //        string xpath_LeftClickCustomItemChroma_114_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomItemChroma_114_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_114_9);
            //        if (winElem_LeftClickCustomItemChroma_114_9 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_114_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_114_9}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""result"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"result\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_114_9.SendKeys("result");


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (29,8)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (29,8)");
            //        string xpath_LeftClickCustomItemChroma_29_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"DisplayedType\"]";
            //        var winElem_LeftClickCustomItemChroma_29_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_29_8);
            //        if (winElem_LeftClickCustomItemChroma_29_8 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_29_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_29_8}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_29_8.SendKeys("flo");
            //        winElem_LeftClickCustomItemChroma_29_8.SendKeys(Keys.Return + Keys.Return);


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (170,5)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (170,5)");
            //        string xpath_LeftClickCustomItemChroma_170_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"ShowName\"]";
            //        var winElem_LeftClickCustomItemChroma_170_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_170_5);
            //        if (winElem_LeftClickCustomItemChroma_170_5 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_170_5.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_170_5}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""rr"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"rr\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_170_5.SendKeys("rr");


            //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (36,4)
            //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (36,4)");
            //        string xpath_LeftDblClickCustomItemChroma_36_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftDblClickCustomItemChroma_36_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_36_4);
            //        if (winElem_LeftDblClickCustomItemChroma_36_4 != null)
            //        {
            //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_36_4.Coordinates);
            //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_36_4}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (48,9)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (48,9)");
            //        string xpath_LeftClickCustomItemChroma_48_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomItemChroma_48_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_48_9);
            //        if (winElem_LeftClickCustomItemChroma_48_9 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_48_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_48_9}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (64,11)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (64,11)");
            //        string xpath_LeftClickCustomItemChroma_64_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomItemChroma_64_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_64_11);
            //        if (winElem_LeftClickCustomItemChroma_64_11 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_64_11.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_64_11}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""result2flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"result2flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_64_11.SendKeys("result2");
            //        winElem_LeftClickCustomItemChroma_64_11.SendKeys(Keys.Return + Keys.Return);


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (47,5)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (47,5)");
            //        string xpath_LeftClickCustomItemChroma_47_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"DisplayedType\"]";
            //        var winElem_LeftClickCustomItemChroma_47_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_47_5);
            //        if (winElem_LeftClickCustomItemChroma_47_5 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_47_5.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_47_5}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_47_5.SendKeys("flo");
            //        winElem_LeftClickCustomItemChroma_47_5.SendKeys(Keys.Return + Keys.Return);



            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (155,17)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (155,17)");
            //        string xpath_LeftClickCustomItemChroma_155_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"ShowName\"]";
            //        var winElem_LeftClickCustomItemChroma_155_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_155_17);
            //        if (winElem_LeftClickCustomItemChroma_155_17 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_155_17.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_155_17}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""rr2"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"rr2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_155_17.SendKeys("rr2");



            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (189,10)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (189,10)");
            //        string xpath_LeftClickCustomItemChroma_189_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"ShowName\"]";
            //        var winElem_LeftClickCustomItemChroma_189_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_189_10);
            //        if (winElem_LeftClickCustomItemChroma_189_10 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_189_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_189_10}");
            //            return;
            //        }


            //        // LeftClick on Custom "result2, Item: Chroma.TestItemEditor.ComposedElement.Default.Rst" at (76,8)
            //        Console.WriteLine("LeftClick on Custom \"result2, Item: Chroma.TestItemEditor.ComposedElement.Default.Rst\" at (76,8)");
            //        string xpath_LeftClickCustomresult2Ite_76_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\"result2, Item: Chroma.TestItemEditor.ComposedElement.Default.Rst\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomresult2Ite_76_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomresult2Ite_76_8);
            //        if (winElem_LeftClickCustomresult2Ite_76_8 != null)
            //        {
            //            winElem_LeftClickCustomresult2Ite_76_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomresult2Ite_76_8}");
            //            return;
            //        }


            //        // LeftClick on Text "Edit" at (14,9)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (14,9)");
            //        string xpath_LeftClickTextEdit_14_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_14_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_14_9);
            //        if (winElem_LeftClickTextEdit_14_9 != null)
            //        {
            //            winElem_LeftClickTextEdit_14_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_14_9}");
            //            return;
            //        }


            //        // LeftClick on Text "Cut" at (14,11)
            //        Console.WriteLine("LeftClick on Text \"Cut\" at (14,11)");
            //        string xpath_LeftClickTextCut_14_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Cut\"]";
            //        var winElem_LeftClickTextCut_14_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCut_14_11);
            //        if (winElem_LeftClickTextCut_14_11 != null)
            //        {
            //            winElem_LeftClickTextCut_14_11.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCut_14_11}");
            //            return;
            //        }

            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_ResultCut");

            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (22,1)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (22,1)");
            //        string xpath_LeftClickCustomItemChroma_22_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")]";
            //        var winElem_LeftClickCustomItemChroma_22_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_22_1);
            //        if (winElem_LeftClickCustomItemChroma_22_1 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_22_1.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_22_1}");
            //            return;
            //        }


            //        // LeftClick on Text "Edit" at (10,9)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (10,9)");
            //        string xpath_LeftClickTextEdit_10_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_10_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_10_9);
            //        if (winElem_LeftClickTextEdit_10_9 != null)
            //        {
            //            winElem_LeftClickTextEdit_10_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_10_9}");
            //            return;
            //        }


            //        // LeftClick on Text "Paste" at (19,12)
            //        Console.WriteLine("LeftClick on Text \"Paste\" at (19,12)");
            //        string xpath_LeftClickTextPaste_19_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //        var winElem_LeftClickTextPaste_19_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_19_12);
            //        if (winElem_LeftClickTextPaste_19_12 != null)
            //        {
            //            winElem_LeftClickTextPaste_19_12.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_19_12}");
            //            return;
            //        }




            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_ResultPaste");

            //        bSuccess = true;
            //    }

            //    finally
            //    {
            //        Assert.AreEqual(bSuccess, true);
            //    }
        }

        [TestMethod("B5-7_3")]
        [TestCategory("編輯動作(B5)")]
        //B5-7_3
        public void TIEditor_CutAndPasteVarTemp()
        {
            // Create new condition variable
            string CallName = "CAP";
            string tempVarDataGridId = VariableTabType.Temp.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Temp, ShowName: CallName, CallName, VariableDataType.String);

            // Cut and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Cut);
            PP5IDEWindow.PerformGetElement($"/ByCell@{tempVarDataGridId}[1,@Call Name]").GetText().ShouldBeNull();

            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);
            PP5IDEWindow.PerformGetElement($"/ByCell@{tempVarDataGridId}[1,@Call Name]").ShouldHaveText(CallName);

            //    //MainPanel_TIEditor_OpenNewTI();
            //    TimeSpan.FromSeconds(2);

            //    bool bSuccess = false;

            //    try
            //    {
            //        // LeftClick on Text "Temp" at (24,13)
            //        Console.WriteLine("LeftClick on Text \"Temp\" at (24,13)");
            //        string xpath_LeftClickTextTemp_24_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Temp\"][@AutomationId=\"TmpRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Temp\"]";
            //        var winElem_LeftClickTextTemp_24_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTemp_24_13);
            //        if (winElem_LeftClickTextTemp_24_13 != null)
            //        {
            //            winElem_LeftClickTextTemp_24_13.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTemp_24_13}");
            //            return;
            //        }


            //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (103,17)
            //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (103,17)");
            //        string xpath_LeftDblClickCustomItemChroma_103_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftDblClickCustomItemChroma_103_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_103_17);
            //        if (winElem_LeftDblClickCustomItemChroma_103_17 != null)
            //        {
            //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_103_17.Coordinates);
            //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_103_17}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (134,12)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (134,12)");
            //        string xpath_LeftClickCustomItemChroma_134_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomItemChroma_134_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_134_12);
            //        if (winElem_LeftClickCustomItemChroma_134_12 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_134_12.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_134_12}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""temp"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"temp\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_134_12.SendKeys("temp");


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (49,10)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (49,10)");
            //        string xpath_LeftClickCustomItemChroma_49_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"DisplayedType\"]";
            //        var winElem_LeftClickCustomItemChroma_49_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_49_10);
            //        if (winElem_LeftClickCustomItemChroma_49_10 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_49_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_49_10}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_49_10.SendKeys("flo");
            //        winElem_LeftClickCustomItemChroma_49_10.SendKeys(Keys.Return + Keys.Return);


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (142,7)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (142,7)");
            //        string xpath_LeftClickCustomItemChroma_142_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"ShowName\"]";
            //        var winElem_LeftClickCustomItemChroma_142_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_142_7);
            //        if (winElem_LeftClickCustomItemChroma_142_7 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_142_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_142_7}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""tt"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"tt\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_142_7.SendKeys("tt");


            //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (60,12)
            //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (60,12)");
            //        string xpath_LeftDblClickCustomItemChroma_60_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftDblClickCustomItemChroma_60_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_60_12);
            //        if (winElem_LeftDblClickCustomItemChroma_60_12 != null)
            //        {
            //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_60_12.Coordinates);
            //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_60_12}");
            //            return;
            //        }


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (121,7)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (121,7)");
            //        string xpath_LeftClickCustomItemChroma_121_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomItemChroma_121_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_121_7);
            //        if (winElem_LeftClickCustomItemChroma_121_7 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_121_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_121_7}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""temp2"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"temp2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_121_7.SendKeys("temp2");


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (36,17)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (36,17)");
            //        string xpath_LeftClickCustomItemChroma_36_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"DisplayedType\"]";
            //        var winElem_LeftClickCustomItemChroma_36_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_36_17);
            //        if (winElem_LeftClickCustomItemChroma_36_17 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_36_17.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_36_17}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_36_17.SendKeys("flo");
            //        winElem_LeftClickCustomItemChroma_36_17.SendKeys(Keys.Return + Keys.Return);


            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (180,7)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (180,7)");
            //        string xpath_LeftClickCustomItemChroma_180_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"ShowName\"]";
            //        var winElem_LeftClickCustomItemChroma_180_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_180_7);
            //        if (winElem_LeftClickCustomItemChroma_180_7 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_180_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_180_7}");
            //            return;
            //        }


            //        // KeyboardInput VirtualKeys=""tt2"" CapsLock=False NumLock=True ScrollLock=False
            //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"tt2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //        System.Threading.Thread.Sleep(100);
            //        winElem_LeftClickCustomItemChroma_180_7.SendKeys("tt2");


            //        // LeftClick on Custom "temp2, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGr" at (81,3)
            //        Console.WriteLine("LeftClick on Custom \"temp2, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGr\" at (81,3)");
            //        string xpath_LeftClickCustomtemp2ItemC_81_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\"temp2, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGr\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomtemp2ItemC_81_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomtemp2ItemC_81_3);
            //        if (winElem_LeftClickCustomtemp2ItemC_81_3 != null)
            //        {
            //            winElem_LeftClickCustomtemp2ItemC_81_3.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomtemp2ItemC_81_3}");
            //            return;
            //        }


            //        // LeftClick on Text "Edit" at (18,9)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (18,9)");
            //        string xpath_LeftClickTextEdit_18_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_18_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_18_9);
            //        if (winElem_LeftClickTextEdit_18_9 != null)
            //        {
            //            winElem_LeftClickTextEdit_18_9.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_18_9}");
            //            return;
            //        }


            //        // LeftClick on Text "Cut" at (13,12)
            //        Console.WriteLine("LeftClick on Text \"Cut\" at (13,12)");
            //        string xpath_LeftClickTextCut_13_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Cut\"]";
            //        var winElem_LeftClickTextCut_13_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCut_13_12);
            //        if (winElem_LeftClickTextCut_13_12 != null)
            //        {
            //            winElem_LeftClickTextCut_13_12.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCut_13_12}");
            //            return;
            //        }

            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_TmpCut");

            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (39,12)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (39,12)");
            //        string xpath_LeftClickCustomItemChroma_39_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")]";
            //        var winElem_LeftClickCustomItemChroma_39_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_39_12);
            //        if (winElem_LeftClickCustomItemChroma_39_12 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_39_12.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_39_12}");
            //            return;
            //        }


            //        // LeftClick on Text "Edit" at (19,8)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (19,8)");
            //        string xpath_LeftClickTextEdit_19_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_19_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_19_8);
            //        if (winElem_LeftClickTextEdit_19_8 != null)
            //        {
            //            winElem_LeftClickTextEdit_19_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_19_8}");
            //            return;
            //        }


            //        // LeftClick on Text "Paste" at (19,10)
            //        Console.WriteLine("LeftClick on Text \"Paste\" at (19,10)");
            //        string xpath_LeftClickTextPaste_19_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //        var winElem_LeftClickTextPaste_19_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_19_10);
            //        if (winElem_LeftClickTextPaste_19_10 != null)
            //        {
            //            winElem_LeftClickTextPaste_19_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_19_10}");
            //            return;
            //        }




            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_TmpPaste");

            //        bSuccess = true;
            //    }

            //    finally
            //    {
            //        Assert.AreEqual(bSuccess, true);
            //    }
        }

        [TestMethod("B5-7_4")]
        [TestCategory("編輯動作(B5)")]
        //B5-7_4
        public void TIEditor_CutAndPasteVarGlobal()
        {
            // Select the first row on callname
            VariableTabNavi(VariableTabType.Global);
            string glbVarDataGridId = VariableTabType.Global.GetDescription();
            string CallName = PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").GetText();

            //GetCellBy(VariableTabType.Global.GetDescription(), 0, "Call Name").LeftClick();
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);

            // Cut and paste by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Cut);
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,3]").GetText().ShouldNotEqualTo(CallName);

            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[1,@Call Name]").ShouldHaveText(CallName);

            // Delete the copied variable 
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[1,@Call Name]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            //    //MainPanel_TIEditor_OpenNewTI();
            //    TimeSpan.FromSeconds(2);

            //    bool bSuccess = false;

            //    try
            //    {
            //        // LeftClick on Text "Global" at (23,15)
            //        Console.WriteLine("LeftClick on Text \"Global\" at (23,15)");
            //        string xpath_LeftClickTextGlobal_23_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Global\"][@AutomationId=\"GlbRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Global\"]";
            //        var winElem_LeftClickTextGlobal_23_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextGlobal_23_15);
            //        if (winElem_LeftClickTextGlobal_23_15 != null)
            //        {
            //            winElem_LeftClickTextGlobal_23_15.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextGlobal_23_15}");
            //            return;
            //        }


            //        // LeftClick on Custom "Global_Temp, Item: Chroma.TestItemEditor.ComposedElement.Default" at (84,4)
            //        Console.WriteLine("LeftClick on Custom \"Global_Temp, Item: Chroma.TestItemEditor.ComposedElement.Default\" at (84,4)");
            //        string xpath_LeftClickCustomGlobal_Tem_84_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\"Global_Temp, Item: Chroma.TestItemEditor.ComposedElement.Default\")][@AutomationId=\"CallName\"]";
            //        var winElem_LeftClickCustomGlobal_Tem_84_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomGlobal_Tem_84_4);
            //        if (winElem_LeftClickCustomGlobal_Tem_84_4 != null)
            //        {
            //            winElem_LeftClickCustomGlobal_Tem_84_4.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomGlobal_Tem_84_4}");
            //            return;
            //        }


            //        // LeftClick on Text "Edit" at (19,10)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (19,10)");
            //        string xpath_LeftClickTextEdit_19_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_19_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_19_10);
            //        if (winElem_LeftClickTextEdit_19_10 != null)
            //        {
            //            winElem_LeftClickTextEdit_19_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_19_10}");
            //            return;
            //        }


            //        // LeftClick on Text "Cut" at (13,6)
            //        Console.WriteLine("LeftClick on Text \"Cut\" at (13,6)");
            //        string xpath_LeftClickTextCut_13_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Cut\"]";
            //        var winElem_LeftClickTextCut_13_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCut_13_6);
            //        if (winElem_LeftClickTextCut_13_6 != null)
            //        {
            //            winElem_LeftClickTextCut_13_6.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCut_13_6}");
            //            return;
            //        }

            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_GlobalCut");

            //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (23,4)
            //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (23,4)");
            //        string xpath_LeftClickCustomItemChroma_23_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")]";
            //        var winElem_LeftClickCustomItemChroma_23_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_23_4);
            //        if (winElem_LeftClickCustomItemChroma_23_4 != null)
            //        {
            //            winElem_LeftClickCustomItemChroma_23_4.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_23_4}");
            //            return;
            //        }


            //        // LeftClick on Text "Edit" at (16,8)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (16,8)");
            //        string xpath_LeftClickTextEdit_16_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_16_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_16_8);
            //        if (winElem_LeftClickTextEdit_16_8 != null)
            //        {
            //            winElem_LeftClickTextEdit_16_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_16_8}");
            //            return;
            //        }


            //        // LeftClick on Text "Paste" at (20,7)
            //        Console.WriteLine("LeftClick on Text \"Paste\" at (20,7)");
            //        string xpath_LeftClickTextPaste_20_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //        var winElem_LeftClickTextPaste_20_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_20_7);
            //        if (winElem_LeftClickTextPaste_20_7 != null)
            //        {
            //            winElem_LeftClickTextPaste_20_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_20_7}");
            //            return;
            //        }


            //        // LeftClick on Pane "DataPanel" at (269,225)
            //        Console.WriteLine("LeftClick on Pane \"DataPanel\" at (269,225)");
            //        string xpath_LeftClickPaneDataPanel_269_225 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //        var winElem_LeftClickPaneDataPanel_269_225 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_269_225);
            //        if (winElem_LeftClickPaneDataPanel_269_225 != null)
            //        {
            //            winElem_LeftClickPaneDataPanel_269_225.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_269_225}");
            //            return;
            //        }



            //        AutoUIExtension.TakeScreenshotPNGformat(true, "B5-7_GlobalPaste");

            //        bSuccess = true;
            //    }

            //    finally
            //    {
            //        Assert.AreEqual(bSuccess, true);
            //    }
        }


        [TestMethod("B5-8")]
        [TestCategory("編輯動作(B5)")]
        //B5-8
        public void TIEditor_InsertCommandInTestItemContext()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CmdName1 = "ABS";
            string CmdName2 = "ADD";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            AddCommandsBy(cgt, CmdName1, CmdName2);

            // LeftClick on Text "ADD"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Insert command "ADD" by clicking on the buttons (not from menu)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Insert);

            // Check command "ADD" is inserted
            PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[2,@Test Command]").ShouldHaveText(CmdName1);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (30,5)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (30,5)");
            //    string xpath_LeftDblClickTextACSource_30_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_30_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_30_5);
            //    if (winElem_LeftDblClickTextACSource_30_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_30_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_30_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (35,13)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (35,13)");
            //    string xpath_LeftDblClickTextReadAC_Cur_35_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_35_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_35_13);
            //    if (winElem_LeftDblClickTextReadAC_Cur_35_13 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_35_13.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_35_13}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (36,8)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (36,8)");
            //    string xpath_LeftDblClickTextReadAC_Fre_36_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_36_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_36_8);
            //    if (winElem_LeftDblClickTextReadAC_Fre_36_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_36_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_36_8}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-8");

            //    // LeftClick on Custom "ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De" at (115,5)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\" at (115,5)");
            //    string xpath_LeftClickCustomReadAC_Fre_115_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Frequency, Item: Chroma.TestItemEditor.ComposedElement.De\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Fre_115_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Fre_115_5);
            //    if (winElem_LeftClickCustomReadAC_Fre_115_5 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Fre_115_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Fre_115_5}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (3,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (3,9)");
            //    string xpath_LeftClickTextEdit_3_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_3_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_3_9);
            //    if (winElem_LeftClickTextEdit_3_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_3_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_3_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Insert" at (22,3)
            //    Console.WriteLine("LeftClick on Text \"Insert\" at (22,3)");
            //    string xpath_LeftClickTextInsert_22_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Insert\"]";
            //    var winElem_LeftClickTextInsert_22_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextInsert_22_3);
            //    if (winElem_LeftClickTextInsert_22_3 != null)
            //    {
            //        winElem_LeftClickTextInsert_22_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextInsert_22_3}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (247,102)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (247,102)");
            //    string xpath_LeftClickPaneDataPanel_247_102 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_247_102 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_247_102);
            //    if (winElem_LeftClickPaneDataPanel_247_102 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_247_102.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_247_102}");
            //        return;
            //    }



            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-8_Inserted");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-9")]
        [TestCategory("編輯動作(B5)")]
        //B5-9
        public void TIEditor_DeleteCommandInTestItemContext()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            AddCommandBy(cgt, CommandName);

            // LeftClick on Text "ABS"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Delete command "ABS" by clicking on the buttons (not from menu)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            // Check command "ABS" is deleted
            PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[1,@Test Command]").GetText().ShouldBeNull();

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (13,12)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (13,12)");
            //    string xpath_LeftDblClickTextACSource_13_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_13_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_13_12);
            //    if (winElem_LeftDblClickTextACSource_13_12 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_13_12.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_13_12}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (26,4)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (26,4)");
            //    string xpath_LeftDblClickTextReadAC_Cur_26_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_26_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_26_4);
            //    if (winElem_LeftDblClickTextReadAC_Cur_26_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_26_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_26_4}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (43,15)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (43,15)");
            //    string xpath_LeftDblClickTextReadAC_Fre_43_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_43_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_43_15);
            //    if (winElem_LeftDblClickTextReadAC_Fre_43_15 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_43_15.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_43_15}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-9");

            //    // LeftClick on Custom "ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa" at (162,16)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\" at (162,16)");
            //    string xpath_LeftClickCustomReadAC_Cur_162_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Cur_162_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Cur_162_16);
            //    if (winElem_LeftClickCustomReadAC_Cur_162_16 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Cur_162_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Cur_162_16}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (14,9)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (14,9)");
            //    string xpath_LeftClickTextEdit_14_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_14_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_14_9);
            //    if (winElem_LeftClickTextEdit_14_9 != null)
            //    {
            //        winElem_LeftClickTextEdit_14_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_14_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Delete" at (26,5)
            //    Console.WriteLine("LeftClick on Text \"Delete\" at (26,5)");
            //    string xpath_LeftClickTextDelete_26_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Delete\"]";
            //    var winElem_LeftClickTextDelete_26_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextDelete_26_5);
            //    if (winElem_LeftClickTextDelete_26_5 != null)
            //    {
            //        winElem_LeftClickTextDelete_26_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextDelete_26_5}");
            //        return;
            //    }




            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-9_Deleted");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-10_1")]
        [TestCategory("編輯動作(B5)")]
        [DisplayName("B5-10_1")]
        //B5-10_1
        public void TIEditor_DeleteVarCondition()
        {
            // Create new condition variable
            string CallName = "CAP";
            string condVarDataGridId = VariableTabType.Condition.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Condition, ShowName: CallName, CallName, VariableDataType.String);

            // Delete by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            // Verify the condition variable is deleted
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Show Name]").GetText().ShouldBeNull();
            PP5IDEWindow.PerformGetElement($"/ByCell@{condVarDataGridId}[1,@Call Name]").GetText().ShouldBeNull();


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "Condition" at (34,9)
            //    Console.WriteLine("LeftDblClick on Text \"Condition\" at (34,9)");
            //    string xpath_LeftDblClickTextCondition_34_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Condition\"][@AutomationId=\"CndRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Condition\"]";
            //    var winElem_LeftDblClickTextCondition_34_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextCondition_34_9);
            //    if (winElem_LeftDblClickTextCondition_34_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextCondition_34_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextCondition_34_9}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (109,12)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (109,12)");
            //    string xpath_LeftDblClickCustomItemChroma_109_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_109_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_109_12);
            //    if (winElem_LeftDblClickCustomItemChroma_109_12 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_109_12.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_109_12}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (175,7)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (175,7)");
            //    string xpath_LeftClickCustomItemChroma_175_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_175_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_175_7);
            //    if (winElem_LeftClickCustomItemChroma_175_7 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_175_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_175_7}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""condition"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"condition\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_175_7.SendKeys("condition");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (32,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (32,9)");
            //    string xpath_LeftClickCustomItemChroma_32_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_32_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_32_9);
            //    if (winElem_LeftClickCustomItemChroma_32_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_32_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_32_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_32_9.SendKeys("flo");
            //    winElem_LeftClickCustomItemChroma_32_9.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (31,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (31,11)");
            //    string xpath_LeftClickCustomItemChroma_31_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_31_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_31_11);
            //    if (winElem_LeftClickCustomItemChroma_31_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_31_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_31_11}");
            //        return;
            //    }


            //    // LeftClick on Text "EditBox" at (15,7)
            //    Console.WriteLine("LeftClick on Text \"EditBox\" at (15,7)");
            //    string xpath_LeftClickTextEditBox_15_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //    var winElem_LeftClickTextEditBox_15_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_15_7);
            //    if (winElem_LeftClickTextEditBox_15_7 != null)
            //    {
            //        winElem_LeftClickTextEditBox_15_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_15_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (161,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (161,11)");
            //    string xpath_LeftClickCustomItemChroma_161_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_161_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_161_11);
            //    if (winElem_LeftClickCustomItemChroma_161_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_161_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_161_11}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""cc"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"cc\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_161_11.SendKeys("cc");


            //    // LeftClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C" at (93,4)
            //    Console.WriteLine("LeftClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\" at (93,4)");
            //    string xpath_LeftClickCustomconditionI_93_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomconditionI_93_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomconditionI_93_4);
            //    if (winElem_LeftClickCustomconditionI_93_4 != null)
            //    {
            //        winElem_LeftClickCustomconditionI_93_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomconditionI_93_4}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_Condition");

            //    // LeftClick on Text "Edit" at (14,0)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (14,0)");
            //    string xpath_LeftClickTextEdit_14_0 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_14_0 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_14_0);
            //    if (winElem_LeftClickTextEdit_14_0 != null)
            //    {
            //        winElem_LeftClickTextEdit_14_0.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_14_0}");
            //        return;
            //    }


            //    // LeftClick on Text "Delete" at (14,7)
            //    Console.WriteLine("LeftClick on Text \"Delete\" at (14,7)");
            //    string xpath_LeftClickTextDelete_14_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Delete\"]";
            //    var winElem_LeftClickTextDelete_14_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextDelete_14_7);
            //    if (winElem_LeftClickTextDelete_14_7 != null)
            //    {
            //        winElem_LeftClickTextDelete_14_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextDelete_14_7}");
            //        return;
            //    }




            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_ConditionDeleted");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-10_2")]
        [TestCategory("編輯動作(B5)")]
        [DisplayName("B5-10_2")]
        //B5-10_2
        public void TIEditor_DeleteVarResult()
        {
            // Create new condition variable
            string CallName = "CAP";
            string resVarDataGridId = VariableTabType.Result.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Result, ShowName: CallName, CallName, VariableDataType.String);

            // Delete by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            // Verify the Result variable is deleted
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Show Name]").GetText().ShouldBeNull();
            PP5IDEWindow.PerformGetElement($"/ByCell@{resVarDataGridId}[1,@Call Name]").GetText().ShouldBeNull();

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Result" at (23,10)
            //    Console.WriteLine("LeftClick on Text \"Result\" at (23,10)");
            //    string xpath_LeftClickTextResult_23_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Result\"][@AutomationId=\"RstRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Result\"]";
            //    var winElem_LeftClickTextResult_23_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextResult_23_10);
            //    if (winElem_LeftClickTextResult_23_10 != null)
            //    {
            //        winElem_LeftClickTextResult_23_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextResult_23_10}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (71,14)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (71,14)");
            //    string xpath_LeftDblClickCustomItemChroma_71_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_71_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_71_14);
            //    if (winElem_LeftDblClickCustomItemChroma_71_14 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_71_14.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_71_14}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (111,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (111,9)");
            //    string xpath_LeftClickCustomItemChroma_111_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_111_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_111_9);
            //    if (winElem_LeftClickCustomItemChroma_111_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_111_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_111_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""result"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"result\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_111_9.SendKeys("result");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (69,20)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (69,20)");
            //    string xpath_LeftClickCustomItemChroma_69_20 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_69_20 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_69_20);
            //    if (winElem_LeftClickCustomItemChroma_69_20 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_69_20.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_69_20}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_69_20.SendKeys("flo");
            //    winElem_LeftClickCustomItemChroma_69_20.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow" at (143,6)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\" at (143,6)");
            //    string xpath_LeftClickCustomItemChroma_143_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.RstGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_143_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_143_6);
            //    if (winElem_LeftClickCustomItemChroma_143_6 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_143_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_143_6}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""rr"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"rr\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_143_6.SendKeys("rr");


            //    // LeftClick on Custom "result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG" at (122,3)
            //    Console.WriteLine("LeftClick on Custom \"result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG\" at (122,3)");
            //    string xpath_LeftClickCustomresultItem_122_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"RstGridView\"]/DataGrid[@AutomationId=\"RstGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.RstGridRowViewMode\")]/Custom[starts-with(@Name,\"result, Item: Chroma.TestItemEditor.ComposedElement.Default.RstG\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomresultItem_122_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomresultItem_122_3);
            //    if (winElem_LeftClickCustomresultItem_122_3 != null)
            //    {
            //        winElem_LeftClickCustomresultItem_122_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomresultItem_122_3}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_Result");

            //    // LeftClick on Text "Edit" at (15,14)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (15,14)");
            //    string xpath_LeftClickTextEdit_15_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_15_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_15_14);
            //    if (winElem_LeftClickTextEdit_15_14 != null)
            //    {
            //        winElem_LeftClickTextEdit_15_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_15_14}");
            //        return;
            //    }


            //    // LeftClick on Text "Delete" at (14,9)
            //    Console.WriteLine("LeftClick on Text \"Delete\" at (14,9)");
            //    string xpath_LeftClickTextDelete_14_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Delete\"]";
            //    var winElem_LeftClickTextDelete_14_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextDelete_14_9);
            //    if (winElem_LeftClickTextDelete_14_9 != null)
            //    {
            //        winElem_LeftClickTextDelete_14_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextDelete_14_9}");
            //        return;
            //    }



            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_ResultDeleted");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-10_3")]
        [TestCategory("編輯動作(B5)")]
        [DisplayName("B5-10_3")]
        //B5-10_3
        public void TIEditor_DeleteVarTemp()
        {
            // Create new condition variable
            string CallName = "CAP";
            string tempVarDataGridId = VariableTabType.Temp.GetDescription();
            InitializeVariableDataGrid(VariableTabType.Temp, ShowName: CallName, CallName, VariableDataType.String);

            // Delete by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            // Verify the Temp variable is deleted
            PP5IDEWindow.PerformGetElement($"/ByCell@{tempVarDataGridId}[1,@Show Name]").GetText().ShouldBeNull();
            PP5IDEWindow.PerformGetElement($"/ByCell@{tempVarDataGridId}[1,@Call Name]").GetText().ShouldBeNull();

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Temp" at (14,10)
            //    Console.WriteLine("LeftClick on Text \"Temp\" at (14,10)");
            //    string xpath_LeftClickTextTemp_14_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Temp\"][@AutomationId=\"TmpRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Temp\"]";
            //    var winElem_LeftClickTextTemp_14_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTemp_14_10);
            //    if (winElem_LeftClickTextTemp_14_10 != null)
            //    {
            //        winElem_LeftClickTextTemp_14_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTemp_14_10}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (99,6)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (99,6)");
            //    string xpath_LeftDblClickCustomItemChroma_99_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_99_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_99_6);
            //    if (winElem_LeftDblClickCustomItemChroma_99_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_99_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_99_6}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (141,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (141,12)");
            //    string xpath_LeftClickCustomItemChroma_141_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_141_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_141_12);
            //    if (winElem_LeftClickCustomItemChroma_141_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_141_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_141_12}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""temp"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"temp\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_141_12.SendKeys("temp");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (22,13)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (22,13)");
            //    string xpath_LeftClickCustomItemChroma_22_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_22_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_22_13);
            //    if (winElem_LeftClickCustomItemChroma_22_13 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_22_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_22_13}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_22_13.SendKeys("flo");
            //    winElem_LeftClickCustomItemChroma_22_13.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow" at (202,15)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\" at (202,15)");
            //    string xpath_LeftClickCustomItemChroma_202_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_202_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_202_15);
            //    if (winElem_LeftClickCustomItemChroma_202_15 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_202_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_202_15}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""tt"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"tt\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_202_15.SendKeys("tt");


            //    // LeftClick on Custom "temp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGri" at (64,13)
            //    Console.WriteLine("LeftClick on Custom \"temp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGri\" at (64,13)");
            //    string xpath_LeftClickCustomtempItemCh_64_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"TmpGridView\"]/DataGrid[@AutomationId=\"TmpGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.TmpGridRowViewMode\")]/Custom[starts-with(@Name,\"temp, Item: Chroma.TestItemEditor.ComposedElement.Default.TmpGri\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomtempItemCh_64_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomtempItemCh_64_13);
            //    if (winElem_LeftClickCustomtempItemCh_64_13 != null)
            //    {
            //        winElem_LeftClickCustomtempItemCh_64_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomtempItemCh_64_13}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_Tmp");

            //    // LeftClick on Text "Edit" at (10,8)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (10,8)");
            //    string xpath_LeftClickTextEdit_10_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_10_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_10_8);
            //    if (winElem_LeftClickTextEdit_10_8 != null)
            //    {
            //        winElem_LeftClickTextEdit_10_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_10_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Delete" at (22,6)
            //    Console.WriteLine("LeftClick on Text \"Delete\" at (22,6)");
            //    string xpath_LeftClickTextDelete_22_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Delete\"]";
            //    var winElem_LeftClickTextDelete_22_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextDelete_22_6);
            //    if (winElem_LeftClickTextDelete_22_6 != null)
            //    {
            //        winElem_LeftClickTextDelete_22_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextDelete_22_6}");
            //        return;
            //    }



            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_TmpDeleted");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-10_4")]
        [TestCategory("編輯動作(B5)")]
        [DisplayName("B5-10_4")]
        //B5-10_4
        public void TIEditor_DeleteVarGlobal()
        {
            string glbVarDataGridId = VariableTabType.Global.GetDescription();

            // Select the first row on callname
            VariableTabNavi(VariableTabType.Global);

            // Create new global variable
            var glbVarDataGrid = InitializeVariableDataGrid(VariableTabType.Global, ShowName: "", "B5-10_4", VariableDataType.String);

            // Delete all global parameters by clicking on the buttons (from toolbar)
            PP5IDEWindow.PerformClick($"/ByCell@{glbVarDataGridId}[{glbVarDataGrid.LastRowNo},@No]", ClickType.LeftClick);

            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[{glbVarDataGrid.LastRowNo + 1},@Show Name]").GetText().ShouldBeNull();
            PP5IDEWindow.PerformGetElement($"/ByCell@{glbVarDataGridId}[{glbVarDataGrid.LastRowNo + 1},@Call Name]").GetText().ShouldBeNull();

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Global" at (14,12)
            //    Console.WriteLine("LeftClick on Text \"Global\" at (14,12)");
            //    string xpath_LeftClickTextGlobal_14_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Global\"][@AutomationId=\"GlbRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Global\"]";
            //    var winElem_LeftClickTextGlobal_14_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextGlobal_14_12);
            //    if (winElem_LeftClickTextGlobal_14_12 != null)
            //    {
            //        winElem_LeftClickTextGlobal_14_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextGlobal_14_12}");
            //        return;
            //    }


            //    // LeftClick on Custom "Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default." at (124,8)
            //    Console.WriteLine("LeftClick on Custom \"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\" at (124,8)");
            //    string xpath_LeftClickCustomInsrc_Type_124_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomInsrc_Type_124_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomInsrc_Type_124_8);
            //    if (winElem_LeftClickCustomInsrc_Type_124_8 != null)
            //    {
            //        winElem_LeftClickCustomInsrc_Type_124_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomInsrc_Type_124_8}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_Global");

            //    // LeftClick on Text "Edit" at (23,8)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (23,8)");
            //    string xpath_LeftClickTextEdit_23_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_23_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_23_8);
            //    if (winElem_LeftClickTextEdit_23_8 != null)
            //    {
            //        winElem_LeftClickTextEdit_23_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_23_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Delete" at (24,5)
            //    Console.WriteLine("LeftClick on Text \"Delete\" at (24,5)");
            //    string xpath_LeftClickTextDelete_24_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Delete\"]";
            //    var winElem_LeftClickTextDelete_24_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextDelete_24_5);
            //    if (winElem_LeftClickTextDelete_24_5 != null)
            //    {
            //        winElem_LeftClickTextDelete_24_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextDelete_24_5}");
            //        return;
            //    }



            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-10_GlobalDeleted");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-11")]
        [TestCategory("編輯動作(B5)")]
        //B5-11
        public void TIEditor_InsertAndUndoInTestItemContext()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;
            int CommandCountAfterUndos = 1;
            int maxUndoCount = 0;
            int maxUndoCountExpected = 20;
            //IElement undoBtn = null;

            // Add the command
            AddCommandBy(cgt, CommandName);

            // LeftClick on Text "ABS"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Repeat inserting command "ABS" for 20 times
            for (int i = 0; i < maxUndoCountExpected; i++) 
            {
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Insert);
            }

            // Click undo button for 20 times (until disabled)
            while (PP5IDEWindow.ToolBarGetSelectionState((int)TIToolBarButton.Undo))
            {
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Undo);
                maxUndoCount++;
            }

            // Check "ABS" command counts after undo actions
            maxUndoCountExpected.ShouldEqualTo(maxUndoCount);
            //CommandCountAfterUndos.ShouldEqualTo(GetRowCount(TIDataTableAutoIDType.PGGrid) - 1);
            CommandCountAfterUndos.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ById[PGGrid]").GetRowCount() - 1);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (21,4)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (21,4)");
            //    string xpath_LeftDblClickTextACSource_21_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_21_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_21_4);
            //    if (winElem_LeftDblClickTextACSource_21_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_21_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_21_4}");
            //        return;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-11_Before");

            //    // LeftDblClick on Text "ReadAC_Current" at (38,11)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (38,11)");
            //    string xpath_LeftDblClickTextReadAC_Cur_38_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_38_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_38_11);
            //    if (winElem_LeftDblClickTextReadAC_Cur_38_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_38_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_38_11}");
            //        return;
            //    }



            //    // LeftClick on Custom "ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa" at (111,7)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\" at (111,7)");
            //    string xpath_LeftClickCustomReadAC_Cur_111_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_Current, Item: Chroma.TestItemEditor.ComposedElement.Defa\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Cur_111_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Cur_111_7);
            //    if (winElem_LeftClickCustomReadAC_Cur_111_7 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Cur_111_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Cur_111_7}");
            //        return;
            //    }



            //    int count = 19;
            //    while (count > 0)
            //    {

            //        // LeftClick on Text "Edit" at (10,10)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (10,10)");
            //        string xpath_LeftClickTextEdit_10_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_10_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_10_10);
            //        if (winElem_LeftClickTextEdit_10_10 != null)
            //        {
            //            winElem_LeftClickTextEdit_10_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_10_10}");
            //            return;
            //        }


            //        // LeftClick on Text "Insert" at (25,3)
            //        Console.WriteLine("LeftClick on Text \"Insert\" at (25,3)");
            //        string xpath_LeftClickTextInsert_25_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Insert\"]";
            //        var winElem_LeftClickTextInsert_25_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextInsert_25_3);
            //        if (winElem_LeftClickTextInsert_25_3 != null)
            //        {
            //            winElem_LeftClickTextInsert_25_3.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextInsert_25_3}");
            //            return;
            //        }



            //        count--;
            //    }


            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-11_Inserted");

            //    int count2 = 20;
            //    while (count2 > 0)
            //    {

            //        // LeftClick on Text "Edit" at (14,10)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (14,10)");
            //        string xpath_LeftClickTextEdit_14_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_14_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_14_10);
            //        if (winElem_LeftClickTextEdit_14_10 != null)
            //        {
            //            winElem_LeftClickTextEdit_14_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_14_10}");
            //            return;
            //        }



            //        // LeftClick on Text "Undo" at (17,12)
            //        Console.WriteLine("LeftClick on Text \"Undo\" at (17,12)");
            //        string xpath_LeftClickTextUndo_17_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Undo\"]";
            //        var winElem_LeftClickTextUndo_17_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextUndo_17_12);
            //        if (winElem_LeftClickTextUndo_17_12 != null)
            //        {
            //            winElem_LeftClickTextUndo_17_12.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextUndo_17_12}");
            //            return;
            //        }



            //        count2--;
            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-11_Undo");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-12")]
        [TestCategory("編輯動作(B5)")]
        //continue last step
        //B5-12
        public void TIEditor_RedoInTestItemContext()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;
            int CommandCountAfterUndosAndRedos = 21;
            int maxRedoCountExpected = 20;
            int maxRedoCount = 0;
            //IElement undoButton = null;
            //IElement redoButton = null;

            // Add the command
            AddCommandBy(cgt, CommandName);

            // LeftClick on Text "ABS"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Repeat inserting command "ABS" for 20 times
            for (int i = 0; i < maxRedoCountExpected; i++)
            {
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Insert);
            }

            // Click undo button for 20 times (until disabled)
            while (PP5IDEWindow.ToolBarGetSelectionState((int)TIToolBarButton.Undo))
            {
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Undo);
            }

            // Click redo button for 20 times (until disabled)
            while (PP5IDEWindow.ToolBarGetSelectionState((int)TIToolBarButton.Redo))
            {
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Redo);
                maxRedoCount++;
            }

            // Check "ABS" command counts after undo & redo actions
            //RefreshDataTable(TIDataTableAutoIDType.PGGrid);
            //CommandCountAfterUndosAndRedos.ShouldEqualTo(GetRowCount(TIDataTableAutoIDType.PGGrid) - 1);
            CommandCountAfterUndosAndRedos.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ById[PGGrid]").GetRowCount() - 1);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //AutoUIExtension.TakeScreenshotPNGformat(true, "B5-12_BeforeRedo");

            //try
            //{
            //    int count = 20;
            //    while (count > 0)
            //    {

            //        // LeftClick on Text "Edit" at (4,7)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (4,7)");
            //        string xpath_LeftClickTextEdit_4_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_4_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_4_7);
            //        if (winElem_LeftClickTextEdit_4_7 != null)
            //        {
            //            winElem_LeftClickTextEdit_4_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_4_7}");
            //            return;
            //        }


            //        // LeftClick on Text "Redo" at (20,10)
            //        Console.WriteLine("LeftClick on Text \"Redo\" at (20,10)");
            //        string xpath_LeftClickTextRedo_20_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Redo\"]";
            //        var winElem_LeftClickTextRedo_20_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextRedo_20_10);
            //        if (winElem_LeftClickTextRedo_20_10 != null)
            //        {
            //            winElem_LeftClickTextRedo_20_10.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextRedo_20_10}");
            //            return;
            //        }

            //        count--;

            //    }

            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-12_Redo");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-13")]
        [TestCategory("編輯動作(B5)")]
        //B5-13
        public void TIEditor_CopySubTICommandAndPasteInSubTI_CheckPasteFailedMessageCorrect()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input 1st Sub Command
            TestCmdGroupType cgt = TestCmdGroupType.Sub_TI;

            // Add the command
            AddCommandBy(cgt, 1);

            // LeftClick on 1st command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Copy the command by clicking on the button (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new sub TI
            PerformOpenNewTI(TestItemType.SubTI, TestItemRunType.UUT);

            // LeftClick on first command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Paste the command by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Check warning message box shows message: "Past abort!! Sub TI cannot be included SubTI Command" 
            string expectedTitle = "Past abort!! Repeat Varaible";
            string expectedMessage = "Past abort!! Sub TI cannot be included SubTI Command";
            var warningBox = PP5IDEWindow.PerformGetElement("/ById[MessageBoxExDialog]");
            warningBox.ShouldHaveText(expectedTitle);
            warningBox.PerformGetElement("/ByClass[ScrollViewer]/ById[txtBlockMsg]").ShouldHaveText(expectedMessage);

            // Click OK to close the warning message box
            warningBox.PerformClick("/ByName[OK]", ClickType.LeftClick);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "Sub TI" at (13,5)
            //    Console.WriteLine("LeftDblClick on Text \"Sub TI\" at (13,5)");
            //    string xpath_LeftDblClickTextSubTI_13_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Sub TI\"]";
            //    var winElem_LeftDblClickTextSubTI_13_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSubTI_13_5);
            //    if (winElem_LeftDblClickTextSubTI_13_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSubTI_13_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSubTI_13_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "LoadIntArrayToBinaryStringArray" at (27,11)
            //    Console.WriteLine("LeftDblClick on Text \"LoadIntArrayToBinaryStringArray\" at (27,11)");
            //    string xpath_LeftDblClickTextLoadIntArr_27_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"LoadIntArrayToBinaryStringArray\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextLoadIntArr_27_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextLoadIntArr_27_11);
            //    if (winElem_LeftDblClickTextLoadIntArr_27_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextLoadIntArr_27_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextLoadIntArr_27_11}");
            //        return;
            //    }



            //    // LeftClick on Custom "LoadIntArrayToBinaryStringArray, Item: Chroma.TestItemEditor.Com" at (156,14)
            //    Console.WriteLine("LeftClick on Custom \"LoadIntArrayToBinaryStringArray, Item: Chroma.TestItemEditor.Com\" at (156,14)");
            //    string xpath_LeftClickCustomLoadIntArr_156_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"LoadIntArrayToBinaryStringArray, Item: Chroma.TestItemEditor.Com\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomLoadIntArr_156_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomLoadIntArr_156_14);
            //    if (winElem_LeftClickCustomLoadIntArr_156_14 != null)
            //    {
            //        winElem_LeftClickCustomLoadIntArr_156_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomLoadIntArr_156_14}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (17,13)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (17,13)");
            //    string xpath_LeftClickTextEdit_17_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_17_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_17_13);
            //    if (winElem_LeftClickTextEdit_17_13 != null)
            //    {
            //        winElem_LeftClickTextEdit_17_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_17_13}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (20,12)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (20,12)");
            //    string xpath_LeftClickTextCopy_20_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_20_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_20_12);
            //    if (winElem_LeftClickTextCopy_20_12 != null)
            //    {
            //        winElem_LeftClickTextCopy_20_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_20_12}");
            //        return;
            //    }



            //    // LeftClick on Text "Functions" at (20,2)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (20,2)");
            //    string xpath_LeftClickTextFunctions_20_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_20_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_20_2);
            //    if (winElem_LeftClickTextFunctions_20_2 != null)
            //    {
            //        winElem_LeftClickTextFunctions_20_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_20_2}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (38,8)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (38,8)");
            //    string xpath_LeftClickTextTIEditor_38_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_38_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_38_8);
            //    if (winElem_LeftClickTextTIEditor_38_8 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_38_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_38_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (9,13)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (9,13)");
            //    string xpath_LeftClickTextOk_9_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_9_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_9_13);
            //    if (winElem_LeftClickTextOk_9_13 != null)
            //    {
            //        winElem_LeftClickTextOk_9_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_9_13}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Sub-TI" at (4,11)
            //    Console.WriteLine("LeftClick on RadioButton \"Sub-TI\" at (4,11)");
            //    string xpath_LeftClickRadioButtonSubTI_4_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Sub-TI\"][@AutomationId=\"SubTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonSubTI_4_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonSubTI_4_11);
            //    if (winElem_LeftClickRadioButtonSubTI_4_11 != null)
            //    {
            //        winElem_LeftClickRadioButtonSubTI_4_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonSubTI_4_11}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (10,10)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (10,10)");
            //    string xpath_LeftClickTextOk_10_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_10_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_10_10);
            //    if (winElem_LeftClickTextOk_10_10 != null)
            //    {
            //        winElem_LeftClickTextOk_10_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_10_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (119,13)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (119,13)");
            //    string xpath_LeftClickCustomItemChroma_119_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomItemChroma_119_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_119_13);
            //    if (winElem_LeftClickCustomItemChroma_119_13 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_119_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_119_13}");
            //        return;
            //    }

            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (25,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (25,12)");
            //    string xpath_LeftClickCustomItemChroma_25_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")]";
            //    var winElem_LeftClickCustomItemChroma_25_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_25_12);
            //    if (winElem_LeftClickCustomItemChroma_25_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_25_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_25_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (11,7)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (11,7)");
            //    string xpath_LeftClickTextEdit_11_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_11_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_11_7);
            //    if (winElem_LeftClickTextEdit_11_7 != null)
            //    {
            //        winElem_LeftClickTextEdit_11_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_11_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (20,9)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (20,9)");
            //    string xpath_LeftClickTextPaste_20_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_20_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_20_9);
            //    if (winElem_LeftClickTextPaste_20_9 != null)
            //    {
            //        winElem_LeftClickTextPaste_20_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_20_9}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (596,174)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (596,174)");
            //    string xpath_LeftClickPaneDataPanel_596_174 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_596_174 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_596_174);
            //    if (winElem_LeftClickPaneDataPanel_596_174 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_596_174.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_596_174}");
            //        return;
            //    }



            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-13");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-14")]
        [TestCategory("編輯動作(B5)")]
        //B5-14
        public void TIEditor_CopySubTICommandAndPasteInThreadTI_CheckPasteFailedMessageCorrect()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input 1st Sub Command
            TestCmdGroupType cgt = TestCmdGroupType.Sub_TI;

            // Add the command
            AddCommandBy(cgt, 1);

            // LeftClick on 1st command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Copy the command by clicking on the button (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new Thread TI
            PerformOpenNewTI(TestItemType.ThreadTI, TestItemRunType.UUT);

            // LeftClick on first command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Paste the command by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Check warning message box shows message: "Past abort!! Thread TI cannot be included SubTI or ThreadTI Command" 
            string expectedTitle = "Past abort!! Repeat Varaible";
            string expectedMessage = "Past abort!! Thread TI cannot be included SubTI or ThreadTI Command";
            var warningBox = PP5IDEWindow.PerformGetElement("/ById[MessageBoxExDialog]");
            warningBox.ShouldHaveText(expectedTitle);
            warningBox.PerformGetElement("/ByClass[ScrollViewer]/ById[txtBlockMsg]").ShouldHaveText(expectedMessage);

            // Click OK to close the warning message box
            warningBox.PerformClick("/ByName[OK]", ClickType.LeftClick);


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "Sub TI" at (13,5)
            //    Console.WriteLine("LeftDblClick on Text \"Sub TI\" at (13,5)");
            //    string xpath_LeftDblClickTextSubTI_13_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Sub TI\"]";
            //    var winElem_LeftDblClickTextSubTI_13_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSubTI_13_5);
            //    if (winElem_LeftDblClickTextSubTI_13_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSubTI_13_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSubTI_13_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "LoadIntArrayToBinaryStringArray" at (27,11)
            //    Console.WriteLine("LeftDblClick on Text \"LoadIntArrayToBinaryStringArray\" at (27,11)");
            //    string xpath_LeftDblClickTextLoadIntArr_27_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"LoadIntArrayToBinaryStringArray\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextLoadIntArr_27_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextLoadIntArr_27_11);
            //    if (winElem_LeftDblClickTextLoadIntArr_27_11 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextLoadIntArr_27_11.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextLoadIntArr_27_11}");
            //        return;
            //    }



            //    // LeftClick on Custom "LoadIntArrayToBinaryStringArray, Item: Chroma.TestItemEditor.Com" at (156,14)
            //    Console.WriteLine("LeftClick on Custom \"LoadIntArrayToBinaryStringArray, Item: Chroma.TestItemEditor.Com\" at (156,14)");
            //    string xpath_LeftClickCustomLoadIntArr_156_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"LoadIntArrayToBinaryStringArray, Item: Chroma.TestItemEditor.Com\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomLoadIntArr_156_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomLoadIntArr_156_14);
            //    if (winElem_LeftClickCustomLoadIntArr_156_14 != null)
            //    {
            //        winElem_LeftClickCustomLoadIntArr_156_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomLoadIntArr_156_14}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (17,13)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (17,13)");
            //    string xpath_LeftClickTextEdit_17_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_17_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_17_13);
            //    if (winElem_LeftClickTextEdit_17_13 != null)
            //    {
            //        winElem_LeftClickTextEdit_17_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_17_13}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (20,12)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (20,12)");
            //    string xpath_LeftClickTextCopy_20_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_20_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_20_12);
            //    if (winElem_LeftClickTextCopy_20_12 != null)
            //    {
            //        winElem_LeftClickTextCopy_20_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_20_12}");
            //        return;
            //    }



            //    // LeftClick on Text "Functions" at (20,2)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (20,2)");
            //    string xpath_LeftClickTextFunctions_20_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_20_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_20_2);
            //    if (winElem_LeftClickTextFunctions_20_2 != null)
            //    {
            //        winElem_LeftClickTextFunctions_20_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_20_2}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (38,8)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (38,8)");
            //    string xpath_LeftClickTextTIEditor_38_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_38_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_38_8);
            //    if (winElem_LeftClickTextTIEditor_38_8 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_38_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_38_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (9,13)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (9,13)");
            //    string xpath_LeftClickTextOk_9_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_9_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_9_13);
            //    if (winElem_LeftClickTextOk_9_13 != null)
            //    {
            //        winElem_LeftClickTextOk_9_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_9_13}");
            //        return;
            //    }

            //    // LeftClick on RadioButton "Thread-TI" at (12,10)
            //    Console.WriteLine("LeftClick on RadioButton \"Thread-TI\" at (12,10)");
            //    string xpath_LeftClickRadioButtonThreadTI_12_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Thread-TI\"][@AutomationId=\"ThreadTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonThreadTI_12_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonThreadTI_12_10);
            //    if (winElem_LeftClickRadioButtonThreadTI_12_10 != null)
            //    {
            //        winElem_LeftClickRadioButtonThreadTI_12_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonThreadTI_12_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (10,13)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (10,13)");
            //    string xpath_LeftClickTextOk_10_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_10_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_10_13);
            //    if (winElem_LeftClickTextOk_10_13 != null)
            //    {
            //        winElem_LeftClickTextOk_10_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_10_13}");
            //        return;
            //    }

            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (119,13)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (119,13)");
            //    string xpath_LeftClickCustomItemChroma_119_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomItemChroma_119_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_119_13);
            //    if (winElem_LeftClickCustomItemChroma_119_13 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_119_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_119_13}");
            //        return;
            //    }

            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (25,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (25,12)");
            //    string xpath_LeftClickCustomItemChroma_25_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")]";
            //    var winElem_LeftClickCustomItemChroma_25_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_25_12);
            //    if (winElem_LeftClickCustomItemChroma_25_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_25_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_25_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (11,7)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (11,7)");
            //    string xpath_LeftClickTextEdit_11_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_11_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_11_7);
            //    if (winElem_LeftClickTextEdit_11_7 != null)
            //    {
            //        winElem_LeftClickTextEdit_11_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_11_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (20,9)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (20,9)");
            //    string xpath_LeftClickTextPaste_20_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_20_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_20_9);
            //    if (winElem_LeftClickTextPaste_20_9 != null)
            //    {
            //        winElem_LeftClickTextPaste_20_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_20_9}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (596,174)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (596,174)");
            //    string xpath_LeftClickPaneDataPanel_596_174 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_596_174 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_596_174);
            //    if (winElem_LeftClickPaneDataPanel_596_174 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_596_174.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_596_174}");
            //        return;
            //    }




            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-14");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-15")]
        [TestCategory("編輯動作(B5)")]
        //B5-15
        public void TIEditor_CopyThreadTICommandAndPasteInThreadTI_CheckPasteFailedMessageCorrect()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input 1st Thread Command
            TestCmdGroupType cgt = TestCmdGroupType.Thread_TI;

            // Add the command
            AddCommandBy(cgt, 1);

            // LeftClick on 1st command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Copy the command by clicking on the button (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            // Open new Thread TI
            PerformOpenNewTI(TestItemType.ThreadTI, TestItemRunType.UUT);

            // LeftClick on first command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Paste the command by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            // Check warning message box shows message: "Past abort!! Thread TI cannot be included SubTI or ThreadTI Command" 
            string expectedTitle = "Past abort!! Repeat Varaible";
            string expectedMessage = "Past abort!! Thread TI cannot be included SubTI or ThreadTI Command";
            var warningBox = PP5IDEWindow.PerformGetElement("/ById[MessageBoxExDialog]");
            warningBox.ShouldHaveText(expectedTitle);
            warningBox.PerformGetElement("/ByClass[ScrollViewer]/ById[txtBlockMsg]").ShouldHaveText(expectedMessage);

            // Click OK to close the warning message box
            warningBox.PerformClick("/ByName[OK]", ClickType.LeftClick);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "Thread TI" at (23,1)
            //    Console.WriteLine("LeftDblClick on Text \"Thread TI\" at (23,1)");
            //    string xpath_LeftDblClickTextThreadTI_23_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Thread TI\"]";
            //    var winElem_LeftDblClickTextThreadTI_23_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextThreadTI_23_1);
            //    if (winElem_LeftDblClickTextThreadTI_23_1 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextThreadTI_23_1.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextThreadTI_23_1}");
            //        return;
            //    }


            //    // LeftDblClick on Text "Ramp_AC frequency" at (34,7)
            //    Console.WriteLine("LeftDblClick on Text \"Ramp_AC frequency\" at (34,7)");
            //    string xpath_LeftDblClickTextRamp_ACfre_34_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"Ramp_AC frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextRamp_ACfre_34_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextRamp_ACfre_34_7);
            //    if (winElem_LeftDblClickTextRamp_ACfre_34_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextRamp_ACfre_34_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextRamp_ACfre_34_7}");
            //        return;
            //    }


            //    // LeftClick on Custom "Ramp_AC frequency, Item: Chroma.TestItemEditor.ComposedElement.D" at (163,3)
            //    Console.WriteLine("LeftClick on Custom \"Ramp_AC frequency, Item: Chroma.TestItemEditor.ComposedElement.D\" at (163,3)");
            //    string xpath_LeftClickCustomRamp_ACfre_163_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Ramp_AC frequency, Item: Chroma.TestItemEditor.ComposedElement.D\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomRamp_ACfre_163_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomRamp_ACfre_163_3);
            //    if (winElem_LeftClickCustomRamp_ACfre_163_3 != null)
            //    {
            //        winElem_LeftClickCustomRamp_ACfre_163_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomRamp_ACfre_163_3}");
            //        return;
            //    }



            //    // LeftClick on Text "Edit" at (17,13)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (17,13)");
            //    string xpath_LeftClickTextEdit_17_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_17_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_17_13);
            //    if (winElem_LeftClickTextEdit_17_13 != null)
            //    {
            //        winElem_LeftClickTextEdit_17_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_17_13}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (20,12)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (20,12)");
            //    string xpath_LeftClickTextCopy_20_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_20_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_20_12);
            //    if (winElem_LeftClickTextCopy_20_12 != null)
            //    {
            //        winElem_LeftClickTextCopy_20_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_20_12}");
            //        return;
            //    }



            //    // LeftClick on Text "Functions" at (20,2)
            //    Console.WriteLine("LeftClick on Text \"Functions\" at (20,2)");
            //    string xpath_LeftClickTextFunctions_20_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Functions\"]";
            //    var winElem_LeftClickTextFunctions_20_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFunctions_20_2);
            //    if (winElem_LeftClickTextFunctions_20_2 != null)
            //    {
            //        winElem_LeftClickTextFunctions_20_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFunctions_20_2}");
            //        return;
            //    }


            //    // LeftClick on Text "TI Editor" at (38,8)
            //    Console.WriteLine("LeftClick on Text \"TI Editor\" at (38,8)");
            //    string xpath_LeftClickTextTIEditor_38_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"TI Editor\"]";
            //    var winElem_LeftClickTextTIEditor_38_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextTIEditor_38_8);
            //    if (winElem_LeftClickTextTIEditor_38_8 != null)
            //    {
            //        winElem_LeftClickTextTIEditor_38_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextTIEditor_38_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (9,13)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (9,13)");
            //    string xpath_LeftClickTextOk_9_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Enter Point\"][@AutomationId=\"winEntryPoint\"]/Button[@Name=\"Ok\"][@AutomationId=\"btnOk\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_9_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_9_13);
            //    if (winElem_LeftClickTextOk_9_13 != null)
            //    {
            //        winElem_LeftClickTextOk_9_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_9_13}");
            //        return;
            //    }

            //    // LeftClick on RadioButton "Thread-TI" at (12,10)
            //    Console.WriteLine("LeftClick on RadioButton \"Thread-TI\" at (12,10)");
            //    string xpath_LeftClickRadioButtonThreadTI_12_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/RadioButton[@Name=\"Thread-TI\"][@AutomationId=\"ThreadTIRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonThreadTI_12_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonThreadTI_12_10);
            //    if (winElem_LeftClickRadioButtonThreadTI_12_10 != null)
            //    {
            //        winElem_LeftClickRadioButtonThreadTI_12_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonThreadTI_12_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (10,13)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (10,13)");
            //    string xpath_LeftClickTextOk_10_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"New Test Item\"][@AutomationId=\"LoginDialog\"]/Button[@Name=\"Ok\"][@AutomationId=\"OkBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_10_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_10_13);
            //    if (winElem_LeftClickTextOk_10_13 != null)
            //    {
            //        winElem_LeftClickTextOk_10_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_10_13}");
            //        return;
            //    }

            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (119,13)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (119,13)");
            //    string xpath_LeftClickCustomItemChroma_119_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomItemChroma_119_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_119_13);
            //    if (winElem_LeftClickCustomItemChroma_119_13 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_119_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_119_13}");
            //        return;
            //    }

            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (25,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (25,12)");
            //    string xpath_LeftClickCustomItemChroma_25_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")]";
            //    var winElem_LeftClickCustomItemChroma_25_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_25_12);
            //    if (winElem_LeftClickCustomItemChroma_25_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_25_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_25_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (11,7)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (11,7)");
            //    string xpath_LeftClickTextEdit_11_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_11_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_11_7);
            //    if (winElem_LeftClickTextEdit_11_7 != null)
            //    {
            //        winElem_LeftClickTextEdit_11_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_11_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Paste" at (20,9)
            //    Console.WriteLine("LeftClick on Text \"Paste\" at (20,9)");
            //    string xpath_LeftClickTextPaste_20_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //    var winElem_LeftClickTextPaste_20_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_20_9);
            //    if (winElem_LeftClickTextPaste_20_9 != null)
            //    {
            //        winElem_LeftClickTextPaste_20_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_20_9}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (596,174)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (596,174)");
            //    string xpath_LeftClickPaneDataPanel_596_174 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_596_174 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_596_174);
            //    if (winElem_LeftClickPaneDataPanel_596_174 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_596_174.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_596_174}");
            //        return;
            //    }




            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-15");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-16")]
        [TestCategory("編輯動作(B5)")]
        //B5-16
        public void TIEditor_CopyAndPasteInVariableBy5times()
        {
            // Create new condition variable
            int repeatCount = 5;
            string CallName = "CAP";
            InitializeVariableDataGrid(VariableTabType.Condition, ShowName: CallName, CallName: CallName, VariableDataType.String);

            // Copy And Paste 5 times by clicking on the buttons (from toolbar)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);

            for (int i = 0; i < repeatCount; i++)
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);

            //StringBuilder copiedCallName = new StringBuilder(CallName + "-Copy_");
            string[] copiedCallNames = new string[repeatCount];
            string prefix = CallName + "-Copy_";

            for (int i = 1; i <= repeatCount; i++)
            {
                copiedCallNames[i - 1] = prefix + i;
            }

            //string[] copiedCallNamesActual = GetSingleColumnValues(TIDataTableAutoIDType.CndGrid, 3/*Call Name*/).GetRange(0, 5).ToArray();
            //copiedCallNames.ShouldEqualTo(copiedCallNamesActual);
            string[] copiedCallNamesActual = PP5IDEWindow.PerformGetElement("/ById[CndGrid]").GetSingleColumnValues(3/*Call Name*/).GetRange(0, repeatCount).ToArray();
            copiedCallNames.ShouldBe(copiedCallNamesActual);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (119,18)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (119,18)");
            //    string xpath_LeftDblClickCustomItemChroma_119_18 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_119_18 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_119_18);
            //    if (winElem_LeftDblClickCustomItemChroma_119_18 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_119_18.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_119_18}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (136,5)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (136,5)");
            //    string xpath_LeftClickCustomItemChroma_136_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_136_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_136_5);
            //    if (winElem_LeftClickCustomItemChroma_136_5 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_136_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_136_5}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""condition"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"condition\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_136_5.SendKeys("condition");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (44,16)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (44,16)");
            //    string xpath_LeftClickCustomItemChroma_44_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_44_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_44_16);
            //    if (winElem_LeftClickCustomItemChroma_44_16 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_44_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_44_16}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""flo"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"flo\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_44_16.SendKeys("flo");
            //    winElem_LeftClickCustomItemChroma_44_16.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (30,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (30,10)");
            //    string xpath_LeftClickCustomItemChroma_30_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_30_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_30_10);
            //    if (winElem_LeftClickCustomItemChroma_30_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_30_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_30_10}");
            //        return;
            //    }


            //    // LeftClick on Text "EditBox" at (25,7)
            //    Console.WriteLine("LeftClick on Text \"EditBox\" at (25,7)");
            //    string xpath_LeftClickTextEditBox_25_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //    var winElem_LeftClickTextEditBox_25_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_25_7);
            //    if (winElem_LeftClickTextEditBox_25_7 != null)
            //    {
            //        winElem_LeftClickTextEditBox_25_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_25_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (160,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (160,10)");
            //    string xpath_LeftClickCustomItemChroma_160_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_160_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_160_10);
            //    if (winElem_LeftClickCustomItemChroma_160_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_160_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_160_10}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""cc"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"cc\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_160_10.SendKeys("cc");


            //    // LeftClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C" at (64,7)
            //    Console.WriteLine("LeftClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\" at (64,7)");
            //    string xpath_LeftClickCustomconditionI_64_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomconditionI_64_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomconditionI_64_7);
            //    if (winElem_LeftClickCustomconditionI_64_7 != null)
            //    {
            //        winElem_LeftClickCustomconditionI_64_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomconditionI_64_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (19,15)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (19,15)");
            //    string xpath_LeftClickTextEdit_19_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_19_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_19_15);
            //    if (winElem_LeftClickTextEdit_19_15 != null)
            //    {
            //        winElem_LeftClickTextEdit_19_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_19_15}");
            //        return;
            //    }


            //    // LeftClick on Text "Copy" at (19,14)
            //    Console.WriteLine("LeftClick on Text \"Copy\" at (19,14)");
            //    string xpath_LeftClickTextCopy_19_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Copy\"]";
            //    var winElem_LeftClickTextCopy_19_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCopy_19_14);
            //    if (winElem_LeftClickTextCopy_19_14 != null)
            //    {
            //        winElem_LeftClickTextCopy_19_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCopy_19_14}");
            //        return;
            //    }


            //    // LeftClick on Custom "condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C" at (141,14)
            //    Console.WriteLine("LeftClick on Custom \"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\" at (141,14)");
            //    string xpath_LeftClickCustomconditionI_141_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\"condition, Item: Chroma.TestItemEditor.ComposedElement.Default.C\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomconditionI_141_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomconditionI_141_14);
            //    if (winElem_LeftClickCustomconditionI_141_14 != null)
            //    {
            //        winElem_LeftClickCustomconditionI_141_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomconditionI_141_14}");
            //        return;
            //    }

            //    for (int i = 1; i < 6; i++)
            //    {

            //        // LeftClick on Text "Edit" at (7,7)
            //        Console.WriteLine("LeftClick on Text \"Edit\" at (7,7)");
            //        string xpath_LeftClickTextEdit_7_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //        var winElem_LeftClickTextEdit_7_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_7_7);
            //        if (winElem_LeftClickTextEdit_7_7 != null)
            //        {
            //            winElem_LeftClickTextEdit_7_7.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_7_7}");
            //            return;
            //        }


            //        // LeftClick on Text "Paste" at (17,8)
            //        Console.WriteLine("LeftClick on Text \"Paste\" at (17,8)");
            //        string xpath_LeftClickTextPaste_17_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Paste\"]";
            //        var winElem_LeftClickTextPaste_17_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextPaste_17_8);
            //        if (winElem_LeftClickTextPaste_17_8 != null)
            //        {
            //            winElem_LeftClickTextPaste_17_8.Click();
            //        }
            //        else
            //        {
            //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextPaste_17_8}");
            //            return;
            //        }

            //        AutoUIExtension.TakeScreenshotPNGformat(true, $"B5-16_Copy{i}");

            //    }



            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-17")]
        [TestCategory("編輯動作(B5)")]
        //B5-17
        public void TIEditor_TestPGGridFocusedAfterDelete()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "ABS"
            string CommandName = "ABS";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;

            // Add the command
            AddCommandBy(cgt, CommandName);

            // LeftClick on Text "ABS"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Delete command "ABS" by clicking on the buttons (not from menu)
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);

            // Check PG Grid area is still focused after the deletion
            PP5IDEWindow.PerformGetElement($"/ByCell@PGGrid[1,@Test Command]").ShouldBeSelected();

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "AC Source" at (44,10)
            //    Console.WriteLine("LeftDblClick on Text \"AC Source\" at (44,10)");
            //    string xpath_LeftDblClickTextACSource_44_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"AC Source\"]";
            //    var winElem_LeftDblClickTextACSource_44_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextACSource_44_10);
            //    if (winElem_LeftDblClickTextACSource_44_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextACSource_44_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextACSource_44_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Current" at (37,7)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Current\" at (37,7)");
            //    string xpath_LeftDblClickTextReadAC_Cur_37_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Current\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Cur_37_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Cur_37_7);
            //    if (winElem_LeftDblClickTextReadAC_Cur_37_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Cur_37_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Cur_37_7}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_Frequency" at (31,5)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_Frequency\" at (31,5)");
            //    string xpath_LeftDblClickTextReadAC_Fre_31_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_Frequency\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Fre_31_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Fre_31_5);
            //    if (winElem_LeftDblClickTextReadAC_Fre_31_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Fre_31_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Fre_31_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ReadAC_HarmonicReading" at (37,3)
            //    Console.WriteLine("LeftDblClick on Text \"ReadAC_HarmonicReading\" at (37,3)");
            //    string xpath_LeftDblClickTextReadAC_Har_37_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ReadAC_HarmonicReading\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextReadAC_Har_37_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextReadAC_Har_37_3);
            //    if (winElem_LeftDblClickTextReadAC_Har_37_3 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextReadAC_Har_37_3.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextReadAC_Har_37_3}");
            //        return;
            //    }


            //    // LeftClick on Custom "ReadAC_HarmonicReading, Item: Chroma.TestItemEditor.ComposedElem" at (140,9)
            //    Console.WriteLine("LeftClick on Custom \"ReadAC_HarmonicReading, Item: Chroma.TestItemEditor.ComposedElem\" at (140,9)");
            //    string xpath_LeftClickCustomReadAC_Har_140_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ReadAC_HarmonicReading, Item: Chroma.TestItemEditor.ComposedElem\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomReadAC_Har_140_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomReadAC_Har_140_9);
            //    if (winElem_LeftClickCustomReadAC_Har_140_9 != null)
            //    {
            //        winElem_LeftClickCustomReadAC_Har_140_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomReadAC_Har_140_9}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (6,7)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (6,7)");
            //    string xpath_LeftClickTextEdit_6_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_6_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_6_7);
            //    if (winElem_LeftClickTextEdit_6_7 != null)
            //    {
            //        winElem_LeftClickTextEdit_6_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_6_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Delete" at (9,17)
            //    Console.WriteLine("LeftClick on Text \"Delete\" at (9,17)");
            //    string xpath_LeftClickTextDelete_9_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Delete\"]";
            //    var winElem_LeftClickTextDelete_9_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextDelete_9_17);
            //    if (winElem_LeftClickTextDelete_9_17 != null)
            //    {
            //        winElem_LeftClickTextDelete_9_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextDelete_9_17}");
            //        return;
            //    }


            //    // LeftClick on Text "User-TI-UnClassified-UnClassified" at (55,11)
            //    Console.WriteLine("LeftClick on Text \"User-TI-UnClassified-UnClassified\" at (55,11)");
            //    string xpath_LeftClickTextUserTIUnCl_55_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/Text[@Name=\"User-TI-UnClassified-UnClassified\"][@AutomationId=\"TitleTxtBlk\"]";
            //    var winElem_LeftClickTextUserTIUnCl_55_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextUserTIUnCl_55_11);
            //    if (winElem_LeftClickTextUserTIUnCl_55_11 != null)
            //    {
            //        winElem_LeftClickTextUserTIUnCl_55_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextUserTIUnCl_55_11}");
            //        return;
            //    }



            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-17");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-18")]
        [TestCategory("編輯動作(B5)")]
        //B5-18
        public void TIEditor_CompileByConditionVar()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "StopEVGate_DBCData"
            string CommandName = "StopEVGate_DBCData";
            TestCmdGroupType cgt = TestCmdGroupType.EV_Gate;

            // Add command: "StopEVGate_DBCData" for 3 times
            var cmdEle = GetCommandBy(cgt, CommandName);
            for (int i = 0; i < 3; i++)
                cmdEle.DoubleClick();

            // Add 3 variables, where datatype: string and EditType are EditBox、ComboBox、External_Signal
            var enumItemValues = new OrderedDictionary { ["0"] = "0" };
            InitializeVariableDataGrid(VariableTabType.Condition, "str_EditBox", "str_EdtBx", VariableDataType.String, VariableEditType.EditBox);
            CreateNewVariable1(VariableTabType.Condition, "str_ComboBox", "str_CmbBx", VariableDataType.String, VariableEditType.ComboBox, enumItems: enumItemValues);
            InitializeVariableDataGrid(VariableTabType.Condition, "str_ExternalSignal", "str_ExtSig", VariableDataType.String, VariableEditType.External_Signal);

            //// Map the variables to the commands' DBC Signal parameter
            // 1st StopEVGate_DBCData, specified index: 0
            // LeftClick on 1st command: "StopEVGate_DBCData"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Parameter: "Specified index" > input "0", "Specified DBC signal" > select "str_EdtBx"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys("0");

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cndRdoBtn]/ByName[Test Condition]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByCell@ParameterGrid[2,@Parameter Value]", InputType.SendContent, "str_EdtBx");
            Press(Keys.Enter);

            // 2nd StopEVGate_DBCData, specified index: 1
            // LeftClick on 2nd command: "StopEVGate_DBCData"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[2,@Test Command]", ClickType.LeftClick);

            // Parameter: "Specified index" > input "1", "Specified DBC signal" > select "str_CmbBx"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys("1");

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cndRdoBtn]/ByName[Test Condition]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByCell@ParameterGrid[2,@Parameter Value]", InputType.SendContent, "str_CmbBx");
            Press(Keys.Enter);

            // 3rd StopEVGate_DBCData, specified index: 2
            // LeftClick on 2nd command: "StopEVGate_DBCData"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[3,@Test Command]", ClickType.LeftClick);


            // Parameter: "Specified index" > input "2", "Specified DBC signal" > select "str_ExtSig"
            //GetCellBy("ParameterGrid", 0, "No").LeftClick();
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys("2");

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cndRdoBtn]/ByName[Test Condition]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByCell@ParameterGrid[2,@Parameter Value]", InputType.SendContent, "str_ExtSig");
            Press(Keys.Enter);

            // LeftClick on Text "Utility" > "Compile"
            MenuSelect("Utility", "Compile");

            // Check message box shows message: "Compilation is complete" with title: "Compile"
            string expectedTitle = "Compile";
            string expectedMessage = "Compilation is complete";
            var warningBox = PP5IDEWindow.PerformGetElement("/ById[MessageBoxExDialog]");
            warningBox.ShouldHaveText(expectedTitle);
            warningBox.PerformGetElement("/ByClass[ScrollViewer]/ById[txtBlockMsg]").ShouldHaveText(expectedMessage);

            // Click OK to close the message box
            warningBox.PerformClick("/ByName[OK]", ClickType.LeftClick);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Edit "" at (92,12)
            //    Console.WriteLine("LeftClick on Edit \"\" at (92,12)");
            //    string xpath_LeftClickEdit_92_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
            //    var winElem_LeftClickEdit_92_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_92_12);
            //    if (winElem_LeftClickEdit_92_12 != null)
            //    {
            //        winElem_LeftClickEdit_92_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_92_12}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "s" + Keys.LeftShift"top"Keys.LeftShift + "e" + "v" + "g" + Keys.LeftShift"ate"Keys.LeftShift + "-" + Keys.LeftShiftKeys.LeftShift + "d" + "b" + "c" + Keys.LeftShiftKeys.LeftShift + "d" + Keys.LeftShift"ata"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"s\" + Keys.LeftShift\"top\"Keys.LeftShift + \"e\" + \"v\" + \"g\" + Keys.LeftShift\"ate\"Keys.LeftShift + \"-\" + Keys.LeftShiftKeys.LeftShift + \"d\" + \"b\" + \"c\" + Keys.LeftShiftKeys.LeftShift + \"d\" + Keys.LeftShift\"ata\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys("top");
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "e" + "v" + "g" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys("ate");
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "d" + "b" + "c" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "d" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys("ata");


            //    // LeftClick on Button "" at (11,9)
            //    Console.WriteLine("LeftClick on Button \"\" at (11,9)");
            //    string xpath_LeftClickButton_11_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]";
            //    var winElem_LeftClickButton_11_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton_11_9);
            //    if (winElem_LeftClickButton_11_9 != null)
            //    {
            //        winElem_LeftClickButton_11_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton_11_9}");
            //        return;
            //    }



            //    // LeftDblClick on Text "StopEVGate_DBCData" at (35,2)
            //    Console.WriteLine("LeftDblClick on Text \"StopEVGate_DBCData\" at (35,2)");
            //    string xpath_LeftDblClickTextStopEVGate_35_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"StopEVGate_DBCData\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextStopEVGate_35_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextStopEVGate_35_2);
            //    if (winElem_LeftDblClickTextStopEVGate_35_2 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextStopEVGate_35_2.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextStopEVGate_35_2}");
            //        return;
            //    }



            //    // LeftDblClick on Text "StopEVGate_DBCData" at (35,2)
            //    Console.WriteLine("LeftDblClick on Text \"StopEVGate_DBCData\" at (35,2)");
            //    xpath_LeftDblClickTextStopEVGate_35_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"StopEVGate_DBCData\"][@AutomationId=\"cmdTxtBlk\"]";
            //    winElem_LeftDblClickTextStopEVGate_35_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextStopEVGate_35_2);
            //    if (winElem_LeftDblClickTextStopEVGate_35_2 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextStopEVGate_35_2.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextStopEVGate_35_2}");
            //        return;
            //    }



            //    // LeftDblClick on Text "StopEVGate_DBCData" at (35,2)
            //    Console.WriteLine("LeftDblClick on Text \"StopEVGate_DBCData\" at (35,2)");
            //    xpath_LeftDblClickTextStopEVGate_35_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"StopEVGate_DBCData\"][@AutomationId=\"cmdTxtBlk\"]";
            //    winElem_LeftDblClickTextStopEVGate_35_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextStopEVGate_35_2);
            //    if (winElem_LeftDblClickTextStopEVGate_35_2 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextStopEVGate_35_2.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextStopEVGate_35_2}");
            //        return;
            //    }



            //    // LeftClick on Pane "DataPanel" at (721,365)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (721,365)");
            //    string xpath_LeftClickPaneDataPanel_721_365 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_721_365 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_721_365);
            //    if (winElem_LeftClickPaneDataPanel_721_365 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_721_365.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_721_365}");
            //        return;
            //    }


            //    // LeftClick on Text "Condition" at (45,9)
            //    Console.WriteLine("LeftClick on Text \"Condition\" at (45,9)");
            //    string xpath_LeftClickTextCondition_45_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Condition\"][@AutomationId=\"CndRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Condition\"]";
            //    var winElem_LeftClickTextCondition_45_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCondition_45_9);
            //    if (winElem_LeftClickTextCondition_45_9 != null)
            //    {
            //        winElem_LeftClickTextCondition_45_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCondition_45_9}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (53,7)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (53,7)");
            //    string xpath_LeftDblClickCustomItemChroma_53_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_53_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_53_7);
            //    if (winElem_LeftDblClickCustomItemChroma_53_7 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_53_7.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_53_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (121,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (121,10)");
            //    string xpath_LeftClickCustomItemChroma_121_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_121_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_121_10);
            //    if (winElem_LeftClickCustomItemChroma_121_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_121_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_121_10}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""str"Keys.LeftShift + "-" + Keys.LeftShift"edi"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"str\"Keys.LeftShift + \"-\" + Keys.LeftShift\"edi\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_121_10.SendKeys("str");
            //    winElem_LeftClickCustomItemChroma_121_10.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickCustomItemChroma_121_10.SendKeys("edi");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (59,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (59,8)");
            //    string xpath_LeftClickCustomItemChroma_59_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_59_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_59_8);
            //    if (winElem_LeftClickCustomItemChroma_59_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_59_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_59_8}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "s" + Keys.LeftShift"tr"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"s\" + Keys.LeftShift\"tr\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_59_8.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickCustomItemChroma_59_8.SendKeys("tr");
            //    winElem_LeftClickCustomItemChroma_59_8.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (37,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (37,10)");
            //    string xpath_LeftClickCustomItemChroma_37_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_37_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_37_10);
            //    if (winElem_LeftClickCustomItemChroma_37_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_37_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_37_10}");
            //        return;
            //    }


            //    // LeftClick on Text "EditBox" at (28,10)
            //    Console.WriteLine("LeftClick on Text \"EditBox\" at (28,10)");
            //    string xpath_LeftClickTextEditBox_28_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //    var winElem_LeftClickTextEditBox_28_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_28_10);
            //    if (winElem_LeftClickTextEditBox_28_10 != null)
            //    {
            //        winElem_LeftClickTextEditBox_28_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_28_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (148,17)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (148,17)");
            //    string xpath_LeftClickCustomItemChroma_148_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_148_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_148_17);
            //    if (winElem_LeftClickCustomItemChroma_148_17 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_148_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_148_17}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""stredi"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"stredi\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_148_17.SendKeys("stredi");


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (102,9)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (102,9)");
            //    string xpath_LeftDblClickCustomItemChroma_102_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_102_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_102_9);
            //    if (winElem_LeftDblClickCustomItemChroma_102_9 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_102_9.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_102_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (118,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (118,11)");
            //    string xpath_LeftClickCustomItemChroma_118_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_118_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_118_11);
            //    if (winElem_LeftClickCustomItemChroma_118_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_118_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_118_11}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (104,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (104,9)");
            //    string xpath_LeftClickCustomItemChroma_104_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_104_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_104_9);
            //    if (winElem_LeftClickCustomItemChroma_104_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_104_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_104_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""str"Keys.LeftShift + "-" + Keys.LeftShift"com"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"str\"Keys.LeftShift + \"-\" + Keys.LeftShift\"com\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_104_9.SendKeys("str");
            //    winElem_LeftClickCustomItemChroma_104_9.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickCustomItemChroma_104_9.SendKeys("com");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (24,4)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (24,4)");
            //    string xpath_LeftClickCustomItemChroma_24_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_24_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_24_4);
            //    if (winElem_LeftClickCustomItemChroma_24_4 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_24_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_24_4}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "s" + Keys.LeftShift"tr"Keys.Return + Keys.Return" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"s\" + Keys.LeftShift\"tr\"Keys.Return + Keys.Return\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_24_4.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickCustomItemChroma_24_4.SendKeys("tr");
            //    winElem_LeftClickCustomItemChroma_24_4.SendKeys(Keys.Return + Keys.Return);


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (40,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (40,14)");
            //    string xpath_LeftClickCustomItemChroma_40_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_40_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_40_14);
            //    if (winElem_LeftClickCustomItemChroma_40_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_40_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_40_14}");
            //        return;
            //    }


            //    // LeftClick on Text "ComboBox" at (36,3)
            //    Console.WriteLine("LeftClick on Text \"ComboBox\" at (36,3)");
            //    string xpath_LeftClickTextComboBox_36_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"ComboBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"ComboBox\"]";
            //    var winElem_LeftClickTextComboBox_36_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextComboBox_36_3);
            //    if (winElem_LeftClickTextComboBox_36_3 != null)
            //    {
            //        winElem_LeftClickTextComboBox_36_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextComboBox_36_3}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (156,9)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (156,9)");
            //    string xpath_LeftClickCustomItemChroma_156_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_156_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_156_9);
            //    if (winElem_LeftClickCustomItemChroma_156_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_156_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_156_9}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""strcom"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"strcom\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_156_9.SendKeys("strcom");



            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (76,8)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (76,8)");
            //    string xpath_LeftDblClickCustomItemChroma_76_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_76_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_76_8);
            //    if (winElem_LeftDblClickCustomItemChroma_76_8 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_76_8.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_76_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (92,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (92,10)");
            //    string xpath_LeftClickCustomItemChroma_92_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_92_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_92_10);
            //    if (winElem_LeftClickCustomItemChroma_92_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_92_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_92_10}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""str"Keys.LeftShift + "-" + Keys.LeftShift"exter"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"str\"Keys.LeftShift + \"-\" + Keys.LeftShift\"exter\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_92_10.SendKeys("str");
            //    winElem_LeftClickCustomItemChroma_92_10.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickCustomItemChroma_92_10.SendKeys("exter");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (42,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (42,12)");
            //    string xpath_LeftClickCustomItemChroma_42_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_42_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_42_12);
            //    if (winElem_LeftClickCustomItemChroma_42_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_42_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_42_12}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "s" + Keys.LeftShift"tr"Keys.LeftShift + "s" + Keys.LeftShift"t"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"s\" + Keys.LeftShift\"tr\"Keys.LeftShift + \"s\" + Keys.LeftShift\"t\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_42_12.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickCustomItemChroma_42_12.SendKeys("tr");
            //    winElem_LeftClickCustomItemChroma_42_12.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickCustomItemChroma_42_12.SendKeys("t");


            //    // LeftClick on Text "String" at (16,10)
            //    Console.WriteLine("LeftClick on Text \"String\" at (16,10)");
            //    string xpath_LeftClickTextString_16_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"String\"]/Text[@ClassName=\"TextBlock\"][@Name=\"String\"]";
            //    var winElem_LeftClickTextString_16_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextString_16_10);
            //    if (winElem_LeftClickTextString_16_10 != null)
            //    {
            //        winElem_LeftClickTextString_16_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextString_16_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (40,4)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (40,4)");
            //    string xpath_LeftClickCustomItemChroma_40_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_40_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_40_4);
            //    if (winElem_LeftClickCustomItemChroma_40_4 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_40_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_40_4}");
            //        return;
            //    }


            //    // LeftClick on Text "External_Signal" at (23,4)
            //    Console.WriteLine("LeftClick on Text \"External_Signal\" at (23,4)");
            //    string xpath_LeftClickTextExternal_S_23_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"External_Signal\"]/Text[@ClassName=\"TextBlock\"][@Name=\"External_Signal\"]";
            //    var winElem_LeftClickTextExternal_S_23_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextExternal_S_23_4);
            //    if (winElem_LeftClickTextExternal_S_23_4 != null)
            //    {
            //        winElem_LeftClickTextExternal_S_23_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextExternal_S_23_4}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (91,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (91,8)");
            //    string xpath_LeftClickCustomItemChroma_91_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_91_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_91_8);
            //    if (winElem_LeftClickCustomItemChroma_91_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_91_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_91_8}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""strexter"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"strexter\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_91_8.SendKeys("strexter");


            //    // LeftClick on Custom ",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow" at (163,20)
            //    Console.WriteLine("LeftClick on Custom \",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\" at (163,20)");
            //    string xpath_LeftClickCustomItemChroma_163_20 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\")][@AutomationId=\"DisplayedParameters\"]";
            //    var winElem_LeftClickCustomItemChroma_163_20 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_163_20);
            //    if (winElem_LeftClickCustomItemChroma_163_20 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_163_20.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_163_20}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (28,6)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (28,6)");
            //    string xpath_LeftClickCustomItemChroma_28_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_28_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_28_6);
            //    if (winElem_LeftClickCustomItemChroma_28_6 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_28_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_28_6}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Constant" at (7,12)
            //    Console.WriteLine("LeftClick on RadioButton \"Constant\" at (7,12)");
            //    string xpath_LeftClickRadioButtonConstant_7_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonConstant_7_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonConstant_7_12);
            //    if (winElem_LeftClickRadioButtonConstant_7_12 != null)
            //    {
            //        winElem_LeftClickRadioButtonConstant_7_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonConstant_7_12}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (63,4)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (63,4)");
            //    string xpath_LeftClickCustomItemChroma_63_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_63_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_63_4);
            //    if (winElem_LeftClickCustomItemChroma_63_4 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_63_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_63_4}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""1"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"1\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_63_4.SendKeys("1");


            //    //can't click test command parameter's number
            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (278,5)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (278,5)");
            //    string xpath_LeftClickCustomItemChroma_278_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_278_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_278_5);
            //    if (winElem_LeftClickCustomItemChroma_278_5 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_278_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_278_5}");
            //        return;
            //    }



            //    // LeftClick on RadioButton "Test Condition" at (7,9)
            //    Console.WriteLine("LeftClick on RadioButton \"Test Condition\" at (7,9)");
            //    string xpath_LeftClickRadioButtonTestCondit_7_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Test Condition\"][@AutomationId=\"cndRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTestCondit_7_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTestCondit_7_9);
            //    if (winElem_LeftClickRadioButtonTestCondit_7_9 != null)
            //    {
            //        winElem_LeftClickRadioButtonTestCondit_7_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTestCondit_7_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow" at (204,10)
            //    Console.WriteLine("LeftClick on Custom \",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\" at (204,10)");
            //    string xpath_LeftClickCustomItemChroma_204_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\")][@AutomationId=\"DisplayedParameters\"]";
            //    var winElem_LeftClickCustomItemChroma_204_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_204_10);
            //    if (winElem_LeftClickCustomItemChroma_204_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_204_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_204_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (15,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (15,8)");
            //    string xpath_LeftClickCustomItemChroma_15_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_15_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_15_8);
            //    if (winElem_LeftClickCustomItemChroma_15_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_15_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_15_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Constant" at (7,10)
            //    Console.WriteLine("LeftClick on RadioButton \"Constant\" at (7,10)");
            //    string xpath_LeftClickRadioButtonConstant_7_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonConstant_7_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonConstant_7_10);
            //    if (winElem_LeftClickRadioButtonConstant_7_10 != null)
            //    {
            //        winElem_LeftClickRadioButtonConstant_7_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonConstant_7_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (63,3)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (63,3)");
            //    string xpath_LeftClickCustomItemChroma_63_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_63_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_63_3);
            //    if (winElem_LeftClickCustomItemChroma_63_3 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_63_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_63_3}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.NumberPad5 + Keys.NumberPad5" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.NumberPad5 + Keys.NumberPad5\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_63_3.SendKeys(Keys.NumberPad5);


            //    //can't click test command parameter's number
            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (189,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (189,11)");
            //    string xpath_LeftClickCustomItemChroma_189_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_189_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_189_11);
            //    if (winElem_LeftClickCustomItemChroma_189_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_189_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_189_11}");
            //        return;
            //    }



            //    // LeftClick on RadioButton "Test Condition" at (5,7)
            //    Console.WriteLine("LeftClick on RadioButton \"Test Condition\" at (5,7)");
            //    string xpath_LeftClickRadioButtonTestCondit_5_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Test Condition\"][@AutomationId=\"cndRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTestCondit_5_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTestCondit_5_7);
            //    if (winElem_LeftClickRadioButtonTestCondit_5_7 != null)
            //    {
            //        winElem_LeftClickRadioButtonTestCondit_5_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTestCondit_5_7}");
            //        return;
            //    }


            //    // LeftClick on Custom "str_edi, Item: Chroma.TestItemEditor.ComposedElement.Default.Par" at (91,16)
            //    Console.WriteLine("LeftClick on Custom \"str_edi, Item: Chroma.TestItemEditor.ComposedElement.Default.Par\" at (91,16)");
            //    string xpath_LeftClickCustomstr_ediIte_91_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\"str_edi, Item: Chroma.TestItemEditor.ComposedElement.Default.Par\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomstr_ediIte_91_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomstr_ediIte_91_16);
            //    if (winElem_LeftClickCustomstr_ediIte_91_16 != null)
            //    {
            //        winElem_LeftClickCustomstr_ediIte_91_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomstr_ediIte_91_16}");
            //        return;
            //    }


            //    // LeftClick on Text "str_com" at (31,9)
            //    Console.WriteLine("LeftClick on Text \"str_com\" at (31,9)");
            //    string xpath_LeftClickTextstr_com_31_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"str_com\"]/Text[@ClassName=\"TextBlock\"][@Name=\"str_com\"]";
            //    var winElem_LeftClickTextstr_com_31_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextstr_com_31_9);
            //    if (winElem_LeftClickTextstr_com_31_9 != null)
            //    {
            //        winElem_LeftClickTextstr_com_31_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextstr_com_31_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow" at (136,8)
            //    Console.WriteLine("LeftClick on Custom \",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\" at (136,8)");
            //    string xpath_LeftClickCustomItemChroma_136_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\")][@AutomationId=\"DisplayedParameters\"]";
            //    var winElem_LeftClickCustomItemChroma_136_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_136_8);
            //    if (winElem_LeftClickCustomItemChroma_136_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_136_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_136_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (99,7)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (99,7)");
            //    string xpath_LeftClickCustomItemChroma_99_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_99_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_99_7);
            //    if (winElem_LeftClickCustomItemChroma_99_7 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_99_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_99_7}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Constant" at (2,11)
            //    Console.WriteLine("LeftClick on RadioButton \"Constant\" at (2,11)");
            //    string xpath_LeftClickRadioButtonConstant_2_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonConstant_2_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonConstant_2_11);
            //    if (winElem_LeftClickRadioButtonConstant_2_11 != null)
            //    {
            //        winElem_LeftClickRadioButtonConstant_2_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonConstant_2_11}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (67,15)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (67,15)");
            //    string xpath_LeftClickCustomItemChroma_67_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_67_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_67_15);
            //    if (winElem_LeftClickCustomItemChroma_67_15 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_67_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_67_15}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.NumberPad3 + Keys.NumberPad3" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.NumberPad3 + Keys.NumberPad3\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_67_15.SendKeys(Keys.NumberPad3 + Keys.NumberPad3);


            //    //can't click test command parameter's number
            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (294,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (294,12)");
            //    string xpath_LeftClickCustomItemChroma_294_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_294_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_294_12);
            //    if (winElem_LeftClickCustomItemChroma_294_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_294_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_294_12}");
            //        return;
            //    }



            //    // LeftClick on RadioButton "Test Condition" at (6,8)
            //    Console.WriteLine("LeftClick on RadioButton \"Test Condition\" at (6,8)");
            //    string xpath_LeftClickRadioButtonTestCondit_6_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Test Condition\"][@AutomationId=\"cndRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTestCondit_6_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTestCondit_6_8);
            //    if (winElem_LeftClickRadioButtonTestCondit_6_8 != null)
            //    {
            //        winElem_LeftClickRadioButtonTestCondit_6_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTestCondit_6_8}");
            //        return;
            //    }


            //    // LeftClick on Custom "str_edi, Item: Chroma.TestItemEditor.ComposedElement.Default.Par" at (92,4)
            //    Console.WriteLine("LeftClick on Custom \"str_edi, Item: Chroma.TestItemEditor.ComposedElement.Default.Par\" at (92,4)");
            //    string xpath_LeftClickCustomstr_ediIte_92_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\"str_edi, Item: Chroma.TestItemEditor.ComposedElement.Default.Par\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomstr_ediIte_92_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomstr_ediIte_92_4);
            //    if (winElem_LeftClickCustomstr_ediIte_92_4 != null)
            //    {
            //        winElem_LeftClickCustomstr_ediIte_92_4.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomstr_ediIte_92_4}");
            //        return;
            //    }


            //    // LeftClick on Text "str_exter" at (31,10)
            //    Console.WriteLine("LeftClick on Text \"str_exter\" at (31,10)");
            //    string xpath_LeftClickTextstr_exter_31_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"str_exter\"]/Text[@ClassName=\"TextBlock\"][@Name=\"str_exter\"]";
            //    var winElem_LeftClickTextstr_exter_31_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextstr_exter_31_10);
            //    if (winElem_LeftClickTextstr_exter_31_10 != null)
            //    {
            //        winElem_LeftClickTextstr_exter_31_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextstr_exter_31_10}");
            //        return;
            //    }



            //    System.Threading.Thread.Sleep(3000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-18");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B5-19")]
        [TestCategory("編輯動作(B5)")]
        //B5-19
        public void TIEditor_CompileByGlobalVar()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "StopEVGate_DBCData"
            string CommandName = "StopEVGate_DBCData";
            TestCmdGroupType cgt = TestCmdGroupType.EV_Gate;

            // Add command: "StopEVGate_DBCData" for 3 times
            var cmdEle = GetCommandBy(cgt, CommandName);
            for (int i = 0; i < 3; i++)
                cmdEle.DoubleClick();

            // Add 3 variables, where datatype: string and EditType are EditBox、ComboBox、External_Signal
            var enumItemValues = new OrderedDictionary { ["0"] = "0" };
            InitializeVariableDataGrid(VariableTabType.Global, "str_EditBox", "str_EdtBx", VariableDataType.String, VariableEditType.EditBox);
            CreateNewVariable1(VariableTabType.Global, "str_ComboBox", "str_CmbBx", VariableDataType.String, VariableEditType.ComboBox, enumItems: enumItemValues);
            InitializeVariableDataGrid(VariableTabType.Global, "str_ExternalSignal", "str_ExtSig", VariableDataType.String, VariableEditType.External_Signal);

            //// Map the variables to the commands' DBC Signal parameter
            // 1st StopEVGate_DBCData, specified index: 0
            // LeftClick on 1st command: "StopEVGate_DBCData"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);

            // Parameter: "Specified index" > input "0", "Specified DBC signal" > select "str_EdtBx"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys("0");

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[glbRdoBtn]/ByName[Global Var.]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByCell@ParameterGrid[2,@Parameter Value]", InputType.SendContent, "str_EdtBx");
            Press(Keys.Enter);

            // 2nd StopEVGate_DBCData, specified index: 1
            // LeftClick on 2nd command: "StopEVGate_DBCData"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[2,@Test Command]", ClickType.LeftClick);

            // Parameter: "Specified index" > input "1", "Specified DBC signal" > select "str_CmbBx"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys("1");

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[glbRdoBtn]/ByName[Global Var.]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByCell@ParameterGrid[2,@Parameter Value]", InputType.SendContent, "str_CmbBx");
            Press(Keys.Enter);

            // 3rd StopEVGate_DBCData, specified index: 2
            // LeftClick on 2nd command: "StopEVGate_DBCData"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[3,@Test Command]", ClickType.LeftClick);

            // Parameter: "Specified index" > input "2", "Specified DBC signal" > select "str_ExtSig"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys("2");

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[glbRdoBtn]/ByName[Global Var.]", ClickType.LeftClick);
            PP5IDEWindow.PerformInput("/ByCell@ParameterGrid[2,@Parameter Value]", InputType.SendContent, "str_ExtSig");
            Press(Keys.Enter);

            // LeftClick on Text "Utility" > "Compile"
            MenuSelect("Utility", "Compile");

            // Check message box shows message: "Compilation is complete" with title: "Compile"
            string expectedTitle = "Compile";
            string expectedMessage = "Compilation is complete";
            var warningBox = PP5IDEWindow.PerformGetElement("/ById[MessageBoxExDialog]");
            warningBox.ShouldHaveText(expectedTitle);
            warningBox.PerformGetElement("/ByClass[ScrollViewer]/ById[txtBlockMsg]").ShouldHaveText(expectedMessage);

            // Click OK to close the message box
            warningBox.PerformClick("/ByName[OK]", ClickType.LeftClick);

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Text "Global" at (15,11)
            //    Console.WriteLine("LeftClick on Text \"Global\" at (15,11)");
            //    string xpath_LeftClickTextGlobal_15_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/RadioButton[@Name=\"Global\"][@AutomationId=\"GlbRdoBtn\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Global\"]";
            //    var winElem_LeftClickTextGlobal_15_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextGlobal_15_11);
            //    if (winElem_LeftClickTextGlobal_15_11 != null)
            //    {
            //        winElem_LeftClickTextGlobal_15_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextGlobal_15_11}");
            //        return;
            //    }



            //    // LeftClick on Custom "Integer, Item: Chroma.TestItemEditor.ComposedElement.Default.Glb" at (31,7)
            //    Console.WriteLine("LeftClick on Custom \"Integer, Item: Chroma.TestItemEditor.ComposedElement.Default.Glb\" at (31,7)");
            //    string xpath_LeftClickCustomIntegerIte_31_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\"Integer, Item: Chroma.TestItemEditor.ComposedElement.Default.Glb\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomIntegerIte_31_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomIntegerIte_31_7);
            //    if (winElem_LeftClickCustomIntegerIte_31_7 != null)
            //    {
            //        winElem_LeftClickCustomIntegerIte_31_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomIntegerIte_31_7}");
            //        return;
            //    }


            //    // LeftClick on Text "String" at (15,12)
            //    Console.WriteLine("LeftClick on Text \"String\" at (15,12)");
            //    string xpath_LeftClickTextString_15_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"String\"]/Text[@ClassName=\"TextBlock\"][@Name=\"String\"]";
            //    var winElem_LeftClickTextString_15_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextString_15_12);
            //    if (winElem_LeftClickTextString_15_12 != null)
            //    {
            //        winElem_LeftClickTextString_15_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextString_15_12}");
            //        return;
            //    }


            //    // LeftClick on Custom "Integer, Item: Chroma.TestItemEditor.ComposedElement.Default.Glb" at (28,9)
            //    Console.WriteLine("LeftClick on Custom \"Integer, Item: Chroma.TestItemEditor.ComposedElement.Default.Glb\" at (28,9)");
            //    string xpath_LeftClickCustomIntegerIte_28_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\"Integer, Item: Chroma.TestItemEditor.ComposedElement.Default.Glb\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomIntegerIte_28_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomIntegerIte_28_9);
            //    if (winElem_LeftClickCustomIntegerIte_28_9 != null)
            //    {
            //        winElem_LeftClickCustomIntegerIte_28_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomIntegerIte_28_9}");
            //        return;
            //    }


            //    // LeftClick on Text "String" at (19,12)
            //    Console.WriteLine("LeftClick on Text \"String\" at (19,12)");
            //    string xpath_LeftClickTextString_19_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"String\"]/Text[@ClassName=\"TextBlock\"][@Name=\"String\"]";
            //    var winElem_LeftClickTextString_19_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextString_19_12);
            //    if (winElem_LeftClickTextString_19_12 != null)
            //    {
            //        winElem_LeftClickTextString_19_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextString_19_12}");
            //        return;
            //    }


            //    // LeftClick on Custom "Float, Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGr" at (25,3)
            //    Console.WriteLine("LeftClick on Custom \"Float, Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGr\" at (25,3)");
            //    string xpath_LeftClickCustomFloatItemC_25_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\"Float, Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGr\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomFloatItemC_25_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomFloatItemC_25_3);
            //    if (winElem_LeftClickCustomFloatItemC_25_3 != null)
            //    {
            //        winElem_LeftClickCustomFloatItemC_25_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomFloatItemC_25_3}");
            //        return;
            //    }


            //    // LeftClick on Text "String" at (10,9)
            //    Console.WriteLine("LeftClick on Text \"String\" at (10,9)");
            //    string xpath_LeftClickTextString_10_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"String\"]/Text[@ClassName=\"TextBlock\"][@Name=\"String\"]";
            //    var winElem_LeftClickTextString_10_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextString_10_9);
            //    if (winElem_LeftClickTextString_10_9 != null)
            //    {
            //        winElem_LeftClickTextString_10_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextString_10_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (44,20)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (44,20)");
            //    string xpath_LeftClickCustomItemChroma_44_20 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_44_20 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_44_20);
            //    if (winElem_LeftClickCustomItemChroma_44_20 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_44_20.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_44_20}");
            //        return;
            //    }


            //    // LeftClick on Text "EditBox" at (25,8)
            //    Console.WriteLine("LeftClick on Text \"EditBox\" at (25,8)");
            //    string xpath_LeftClickTextEditBox_25_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //    var winElem_LeftClickTextEditBox_25_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_25_8);
            //    if (winElem_LeftClickTextEditBox_25_8 != null)
            //    {
            //        winElem_LeftClickTextEditBox_25_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_25_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (25,7)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (25,7)");
            //    string xpath_LeftClickCustomItemChroma_25_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_25_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_25_7);
            //    if (winElem_LeftClickCustomItemChroma_25_7 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_25_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_25_7}");
            //        return;
            //    }


            //    // LeftClick on Text "ComboBox" at (25,10)
            //    Console.WriteLine("LeftClick on Text \"ComboBox\" at (25,10)");
            //    string xpath_LeftClickTextComboBox_25_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"ComboBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"ComboBox\"]";
            //    var winElem_LeftClickTextComboBox_25_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextComboBox_25_10);
            //    if (winElem_LeftClickTextComboBox_25_10 != null)
            //    {
            //        winElem_LeftClickTextComboBox_25_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextComboBox_25_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (30,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (30,11)");
            //    string xpath_LeftClickCustomItemChroma_30_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_30_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_30_11);
            //    if (winElem_LeftClickCustomItemChroma_30_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_30_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_30_11}");
            //        return;
            //    }


            //    // LeftClick on Text "External_Signal" at (37,3)
            //    Console.WriteLine("LeftClick on Text \"External_Signal\" at (37,3)");
            //    string xpath_LeftClickTextExternal_S_37_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"External_Signal\"]/Text[@ClassName=\"TextBlock\"][@Name=\"External_Signal\"]";
            //    var winElem_LeftClickTextExternal_S_37_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextExternal_S_37_3);
            //    if (winElem_LeftClickTextExternal_S_37_3 != null)
            //    {
            //        winElem_LeftClickTextExternal_S_37_3.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextExternal_S_37_3}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (33,12)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (33,12)");
            //    string xpath_LeftClickCustomItemChroma_33_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")][@AutomationId=\"DisplayedEnum\"]";
            //    var winElem_LeftClickCustomItemChroma_33_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_33_12);
            //    if (winElem_LeftClickCustomItemChroma_33_12 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_33_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_33_12}");
            //        return;
            //    }


            //    // LeftClick on Text "New" at (10,12)
            //    Console.WriteLine("LeftClick on Text \"New\" at (10,12)");
            //    string xpath_LeftClickTextNew_10_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Editor\"]/Button[@ClassName=\"Button\"][@Name=\"New\"]/Text[@ClassName=\"TextBlock\"][@Name=\"New\"]";
            //    var winElem_LeftClickTextNew_10_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextNew_10_12);
            //    if (winElem_LeftClickTextNew_10_12 != null)
            //    {
            //        winElem_LeftClickTextNew_10_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextNew_10_12}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (119,18)
            //    Console.WriteLine("LeftClick on Edit \"\" at (119,18)");
            //    string xpath_LeftClickEdit_119_18 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Creater\"]/Edit[@AutomationId=\"enumItemNameTxtBox\"]";
            //    var winElem_LeftClickEdit_119_18 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_119_18);
            //    if (winElem_LeftClickEdit_119_18 != null)
            //    {
            //        winElem_LeftClickEdit_119_18.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_119_18}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""1"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"1\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_119_18.SendKeys("1");


            //    // LeftClick on Edit "" at (112,8)
            //    Console.WriteLine("LeftClick on Edit \"\" at (112,8)");
            //    string xpath_LeftClickEdit_112_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Creater\"]/Edit[@ClassName=\"TextBox\"]";
            //    var winElem_LeftClickEdit_112_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_112_8);
            //    if (winElem_LeftClickEdit_112_8 != null)
            //    {
            //        winElem_LeftClickEdit_112_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_112_8}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""1"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"1\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_112_8.SendKeys("1");


            //    // LeftClick on Text "Ok" at (8,12)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (8,12)");
            //    string xpath_LeftClickTextOk_8_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Creater\"]/Button[@ClassName=\"Button\"][@Name=\"Ok\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_8_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_8_12);
            //    if (winElem_LeftClickTextOk_8_12 != null)
            //    {
            //        winElem_LeftClickTextOk_8_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_8_12}");
            //        return;
            //    }


            //    // LeftClick on Text "Ok" at (11,15)
            //    Console.WriteLine("LeftClick on Text \"Ok\" at (11,15)");
            //    string xpath_LeftClickTextOk_11_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Editor\"]/Button[@ClassName=\"Button\"][@Name=\"Ok\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
            //    var winElem_LeftClickTextOk_11_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_11_15);
            //    if (winElem_LeftClickTextOk_11_15 != null)
            //    {
            //        winElem_LeftClickTextOk_11_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_11_15}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (54,1)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (54,1)");
            //    string xpath_LeftClickCustomItemChroma_54_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")][@AutomationId=\"Default\"]";
            //    var winElem_LeftClickCustomItemChroma_54_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_54_1);
            //    if (winElem_LeftClickCustomItemChroma_54_1 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_54_1.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_54_1}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow" at (51,7)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\" at (51,7)");
            //    string xpath_LeftClickCustomItemChroma_51_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"GlbGridView\"]/DataGrid[@AutomationId=\"GlbGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.GlbGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.GlbGridRow\")][@AutomationId=\"Default\"]";
            //    var winElem_LeftClickCustomItemChroma_51_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_51_7);
            //    if (winElem_LeftClickCustomItemChroma_51_7 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_51_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_51_7}");
            //        return;
            //    }


            //    // LeftClick on Text "1" at (3,6)
            //    Console.WriteLine("LeftClick on Text \"1\" at (3,6)");
            //    string xpath_LeftClickText1_3_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"1\"]/Text[@ClassName=\"TextBlock\"][@Name=\"1\"]";
            //    var winElem_LeftClickText1_3_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickText1_3_6);
            //    if (winElem_LeftClickText1_3_6 != null)
            //    {
            //        winElem_LeftClickText1_3_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickText1_3_6}");
            //        return;
            //    }


            //    // LeftClick on Edit "" at (143,13)
            //    Console.WriteLine("LeftClick on Edit \"\" at (143,13)");
            //    string xpath_LeftClickEdit_143_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
            //    var winElem_LeftClickEdit_143_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_143_13);
            //    if (winElem_LeftClickEdit_143_13 != null)
            //    {
            //        winElem_LeftClickEdit_143_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_143_13}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "s" + Keys.LeftShift"top"Keys.LeftShift + "e" + "v" + "g" + Keys.LeftShift"ate"Keys.LeftShift + "-" + Keys.LeftShiftKeys.LeftShift + "d" + "b" + "c" + "d" + Keys.LeftShift"ata"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"s\" + Keys.LeftShift\"top\"Keys.LeftShift + \"e\" + \"v\" + \"g\" + Keys.LeftShift\"ate\"Keys.LeftShift + \"-\" + Keys.LeftShiftKeys.LeftShift + \"d\" + \"b\" + \"c\" + \"d\" + Keys.LeftShift\"ata\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_143_13.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickEdit_143_13.SendKeys("top");
            //    winElem_LeftClickEdit_143_13.SendKeys(Keys.LeftShift + "e" + "v" + "g" + Keys.LeftShift);
            //    winElem_LeftClickEdit_143_13.SendKeys("ate");
            //    winElem_LeftClickEdit_143_13.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickEdit_143_13.SendKeys(Keys.LeftShift + "d" + "b" + "c" + "d" + Keys.LeftShift);
            //    winElem_LeftClickEdit_143_13.SendKeys("ata");


            //    // LeftClick on Button "" at (5,10)
            //    Console.WriteLine("LeftClick on Button \"\" at (5,10)");
            //    string xpath_LeftClickButton_5_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]";
            //    var winElem_LeftClickButton_5_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton_5_10);
            //    if (winElem_LeftClickButton_5_10 != null)
            //    {
            //        winElem_LeftClickButton_5_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton_5_10}");
            //        return;
            //    }


            //    // LeftDblClick on Text "StopEVGate_DBCData" at (104,1)
            //    Console.WriteLine("LeftDblClick on Text \"StopEVGate_DBCData\" at (104,1)");
            //    string xpath_LeftDblClickTextStopEVGate_104_1 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"StopEVGate_DBCData\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextStopEVGate_104_1 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextStopEVGate_104_1);
            //    if (winElem_LeftDblClickTextStopEVGate_104_1 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextStopEVGate_104_1.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextStopEVGate_104_1}");
            //        return;
            //    }


            //    // LeftClick on Custom "StopEVGate_DBCData, Item: Chroma.TestItemEditor.ComposedElement." at (226,17)
            //    Console.WriteLine("LeftClick on Custom \"StopEVGate_DBCData, Item: Chroma.TestItemEditor.ComposedElement.\" at (226,17)");
            //    string xpath_LeftClickCustomStopEVGate_226_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"StopEVGate_DBCData, Item: Chroma.TestItemEditor.ComposedElement.\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomStopEVGate_226_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomStopEVGate_226_17);
            //    if (winElem_LeftClickCustomStopEVGate_226_17 != null)
            //    {
            //        winElem_LeftClickCustomStopEVGate_226_17.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomStopEVGate_226_17}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (18,7)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (18,7)");
            //    string xpath_LeftClickTextEdit_18_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_18_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_18_7);
            //    if (winElem_LeftClickTextEdit_18_7 != null)
            //    {
            //        winElem_LeftClickTextEdit_18_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_18_7}");
            //        return;
            //    }


            //    // LeftClick on Text "Insert" at (19,10)
            //    Console.WriteLine("LeftClick on Text \"Insert\" at (19,10)");
            //    string xpath_LeftClickTextInsert_19_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Insert\"]";
            //    var winElem_LeftClickTextInsert_19_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextInsert_19_10);
            //    if (winElem_LeftClickTextInsert_19_10 != null)
            //    {
            //        winElem_LeftClickTextInsert_19_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextInsert_19_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Edit" at (19,8)
            //    Console.WriteLine("LeftClick on Text \"Edit\" at (19,8)");
            //    string xpath_LeftClickTextEdit_19_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Edit\"]";
            //    var winElem_LeftClickTextEdit_19_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEdit_19_8);
            //    if (winElem_LeftClickTextEdit_19_8 != null)
            //    {
            //        winElem_LeftClickTextEdit_19_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEdit_19_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Insert" at (15,8)
            //    Console.WriteLine("LeftClick on Text \"Insert\" at (15,8)");
            //    string xpath_LeftClickTextInsert_15_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Insert\"]";
            //    var winElem_LeftClickTextInsert_15_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextInsert_15_8);
            //    if (winElem_LeftClickTextInsert_15_8 != null)
            //    {
            //        winElem_LeftClickTextInsert_15_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextInsert_15_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow" at (194,9)
            //    Console.WriteLine("LeftClick on Custom \",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\" at (194,9)");
            //    string xpath_LeftClickCustomItemChroma_194_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\")][@AutomationId=\"DisplayedParameters\"]";
            //    var winElem_LeftClickCustomItemChroma_194_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_194_9);
            //    if (winElem_LeftClickCustomItemChroma_194_9 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_194_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_194_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (96,5)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (96,5)");
            //    string xpath_LeftClickCustomItemChroma_96_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_96_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_96_5);
            //    if (winElem_LeftClickCustomItemChroma_96_5 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_96_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_96_5}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Constant" at (4,15)
            //    Console.WriteLine("LeftClick on RadioButton \"Constant\" at (4,15)");
            //    string xpath_LeftClickRadioButtonConstant_4_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonConstant_4_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonConstant_4_15);
            //    if (winElem_LeftClickRadioButtonConstant_4_15 != null)
            //    {
            //        winElem_LeftClickRadioButtonConstant_4_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonConstant_4_15}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (43,16)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (43,16)");
            //    string xpath_LeftClickCustomItemChroma_43_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_43_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_43_16);
            //    if (winElem_LeftClickCustomItemChroma_43_16 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_43_16.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_43_16}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""1"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"1\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_43_16.SendKeys("1");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (21,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (21,8)");
            //    string xpath_LeftClickCustomItemChroma_21_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_21_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_21_8);
            //    if (winElem_LeftClickCustomItemChroma_21_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_21_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_21_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Global Var." at (5,5)
            //    Console.WriteLine("LeftClick on RadioButton \"Global Var.\" at (5,5)");
            //    string xpath_LeftClickRadioButtonGlobalVar_5_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Global Var.\"][@AutomationId=\"glbRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonGlobalVar_5_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonGlobalVar_5_5);
            //    if (winElem_LeftClickRadioButtonGlobalVar_5_5 != null)
            //    {
            //        winElem_LeftClickRadioButtonGlobalVar_5_5.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonGlobalVar_5_5}");
            //        return;
            //    }


            //    // LeftClick on Custom ",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow" at (126,8)
            //    Console.WriteLine("LeftClick on Custom \",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\" at (126,8)");
            //    string xpath_LeftClickCustomItemChroma_126_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\")][@AutomationId=\"DisplayedParameters\"]";
            //    var winElem_LeftClickCustomItemChroma_126_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_126_8);
            //    if (winElem_LeftClickCustomItemChroma_126_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_126_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_126_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (21,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (21,8)");
            //    xpath_LeftClickCustomItemChroma_21_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    winElem_LeftClickCustomItemChroma_21_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_21_8);
            //    if (winElem_LeftClickCustomItemChroma_21_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_21_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_21_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Constant" at (8,15)
            //    Console.WriteLine("LeftClick on RadioButton \"Constant\" at (8,15)");
            //    string xpath_LeftClickRadioButtonConstant_8_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonConstant_8_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonConstant_8_15);
            //    if (winElem_LeftClickRadioButtonConstant_8_15 != null)
            //    {
            //        winElem_LeftClickRadioButtonConstant_8_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonConstant_8_15}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (96,2)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (96,2)");
            //    string xpath_LeftClickCustomItemChroma_96_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_96_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_96_2);
            //    if (winElem_LeftClickCustomItemChroma_96_2 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_96_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_96_2}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""2"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"2\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_96_2.SendKeys("2");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (20,2)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (20,2)");
            //    string xpath_LeftClickCustomItemChroma_20_2 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_20_2 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_20_2);
            //    if (winElem_LeftClickCustomItemChroma_20_2 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_20_2.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_20_2}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Global Var." at (2,22)
            //    Console.WriteLine("LeftClick on RadioButton \"Global Var.\" at (2,22)");
            //    string xpath_LeftClickRadioButtonGlobalVar_2_22 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Global Var.\"][@AutomationId=\"glbRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonGlobalVar_2_22 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonGlobalVar_2_22);
            //    if (winElem_LeftClickRadioButtonGlobalVar_2_22 != null)
            //    {
            //        winElem_LeftClickRadioButtonGlobalVar_2_22.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonGlobalVar_2_22}");
            //        return;
            //    }


            //    // LeftClick on Custom "Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default." at (109,12)
            //    Console.WriteLine("LeftClick on Custom \"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\" at (109,12)");
            //    string xpath_LeftClickCustomInsrc_Type_109_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomInsrc_Type_109_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomInsrc_Type_109_12);
            //    if (winElem_LeftClickCustomInsrc_Type_109_12 != null)
            //    {
            //        winElem_LeftClickCustomInsrc_Type_109_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomInsrc_Type_109_12}");
            //        return;
            //    }


            //    // LeftClick on Text "ThreadHandle" at (59,10)
            //    Console.WriteLine("LeftClick on Text \"ThreadHandle\" at (59,10)");
            //    string xpath_LeftClickTextThreadHand_59_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"ThreadHandle\"]/Text[@ClassName=\"TextBlock\"][@Name=\"ThreadHandle\"]";
            //    var winElem_LeftClickTextThreadHand_59_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextThreadHand_59_10);
            //    if (winElem_LeftClickTextThreadHand_59_10 != null)
            //    {
            //        winElem_LeftClickTextThreadHand_59_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextThreadHand_59_10}");
            //        return;
            //    }


            //    // LeftClick on Custom ",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow" at (71,11)
            //    Console.WriteLine("LeftClick on Custom \",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\" at (71,11)");
            //    string xpath_LeftClickCustomItemChroma_71_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\",, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRow\")][@AutomationId=\"DisplayedParameters\"]";
            //    var winElem_LeftClickCustomItemChroma_71_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_71_11);
            //    if (winElem_LeftClickCustomItemChroma_71_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_71_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_71_11}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (68,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (68,10)");
            //    string xpath_LeftClickCustomItemChroma_68_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_68_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_68_10);
            //    if (winElem_LeftClickCustomItemChroma_68_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_68_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_68_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Constant" at (5,6)
            //    Console.WriteLine("LeftClick on RadioButton \"Constant\" at (5,6)");
            //    string xpath_LeftClickRadioButtonConstant_5_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonConstant_5_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonConstant_5_6);
            //    if (winElem_LeftClickRadioButtonConstant_5_6 != null)
            //    {
            //        winElem_LeftClickRadioButtonConstant_5_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonConstant_5_6}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (27,19)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (27,19)");
            //    string xpath_LeftClickCustomItemChroma_27_19 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_27_19 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_27_19);
            //    if (winElem_LeftClickCustomItemChroma_27_19 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_27_19.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_27_19}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""3"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"3\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_27_19.SendKeys("3");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (25,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (25,10)");
            //    string xpath_LeftClickCustomItemChroma_25_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_25_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_25_10);
            //    if (winElem_LeftClickCustomItemChroma_25_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_25_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_25_10}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Global Var." at (5,6)
            //    Console.WriteLine("LeftClick on RadioButton \"Global Var.\" at (5,6)");
            //    string xpath_LeftClickRadioButtonGlobalVar_5_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Global Var.\"][@AutomationId=\"glbRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonGlobalVar_5_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonGlobalVar_5_6);
            //    if (winElem_LeftClickRadioButtonGlobalVar_5_6 != null)
            //    {
            //        winElem_LeftClickRadioButtonGlobalVar_5_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonGlobalVar_5_6}");
            //        return;
            //    }


            //    // LeftClick on Custom "Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default." at (98,10)
            //    Console.WriteLine("LeftClick on Custom \"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\" at (98,10)");
            //    string xpath_LeftClickCustomInsrc_Type_98_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\"Insrc_Type, Item: Chroma.TestItemEditor.ComposedElement.Default.\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomInsrc_Type_98_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomInsrc_Type_98_10);
            //    if (winElem_LeftClickCustomInsrc_Type_98_10 != null)
            //    {
            //        winElem_LeftClickCustomInsrc_Type_98_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomInsrc_Type_98_10}");
            //        return;
            //    }


            //    // LeftClick on Text "Global_Temp" at (40,6)
            //    Console.WriteLine("LeftClick on Text \"Global_Temp\" at (40,6)");
            //    string xpath_LeftClickTextGlobal_Tem_40_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"Global_Temp\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Global_Temp\"]";
            //    var winElem_LeftClickTextGlobal_Tem_40_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextGlobal_Tem_40_6);
            //    if (winElem_LeftClickTextGlobal_Tem_40_6 != null)
            //    {
            //        winElem_LeftClickTextGlobal_Tem_40_6.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextGlobal_Tem_40_6}");
            //        return;
            //    }


            //    // LeftClick on Text "Utility" at (12,8)
            //    Console.WriteLine("LeftClick on Text \"Utility\" at (12,8)");
            //    string xpath_LeftClickTextUtility_12_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Menu[@ClassName=\"Menu\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Utility\"]";
            //    var winElem_LeftClickTextUtility_12_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextUtility_12_8);
            //    if (winElem_LeftClickTextUtility_12_8 != null)
            //    {
            //        winElem_LeftClickTextUtility_12_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextUtility_12_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Compile" at (24,9)
            //    Console.WriteLine("LeftClick on Text \"Compile\" at (24,9)");
            //    string xpath_LeftClickTextCompile_24_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/MenuItem[@ClassName=\"MenuItem\"][@Name=\"Chroma.UI.Wpf.MDI.MenuItemViewModel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Compile\"]";
            //    var winElem_LeftClickTextCompile_24_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextCompile_24_9);
            //    if (winElem_LeftClickTextCompile_24_9 != null)
            //    {
            //        winElem_LeftClickTextCompile_24_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextCompile_24_9}");
            //        return;
            //    }


            //    // LeftClick on Pane "DataPanel" at (665,443)
            //    Console.WriteLine("LeftClick on Pane \"DataPanel\" at (665,443)");
            //    string xpath_LeftClickPaneDataPanel_665_443 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]";
            //    var winElem_LeftClickPaneDataPanel_665_443 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickPaneDataPanel_665_443);
            //    if (winElem_LeftClickPaneDataPanel_665_443 != null)
            //    {
            //        winElem_LeftClickPaneDataPanel_665_443.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickPaneDataPanel_665_443}");
            //        return;
            //    }



            //    System.Threading.Thread.Sleep(3000);
            //    AutoUIExtension.TakeScreenshotPNGformat(true, "B5-19");

            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B6-1_1")]
        [TestCategory("命令編輯頁面搜尋(B6)")]
        //B6-1_1
        public void TIEditor_SearchInTestCommandEditList_ByPressingEnter()
        {
            // Add 2 Commands with names: "ReadAC_Current", "ReadAC_Frequency" in group: "AC Source"
            string cmdName1 = "ReadAC_Current";
            string cmdName2 = "ReadAC_Frequency";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string searchPattern = "ReadAC";

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 2 commands
            AddCommandsBy(cgt, cmdName1, cmdName2);

            // Get the Command Edit page search box
            // Command Edit Search box sendkey: cmdName2
            PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendContent, searchPattern);
            Press(Keys.Return);

            // After searching, the matched command row will be selected, check the Test Command Cell value
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[5]").ShouldHaveText(cmdName1);
        }

        [TestMethod("B6-1_2")]
        [TestCategory("命令編輯頁面搜尋(B6)")]
        //B6-1_2
        public void TIEditor_SearchInTestCommandEditList_ByPressingSearchButton()
        {
            // Add 2 Commands with names: "ReadAC_Current", "ReadAC_Frequency" in group: "AC Source"
            string cmdName1 = "ReadAC_Current";
            string cmdName2 = "ReadAC_Frequency";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string searchPattern = "ReadAC";

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 2 commands
            AddCommandsBy(cgt, cmdName1, cmdName2);

            // Get the Command Edit page search box
            // Command Edit Search box sendkey: cmdName2
            PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendContent, searchPattern);
            PP5IDEWindow.PerformClick("/ById[TIContextPanel,SearchBtn]", ClickType.LeftClick);

            // After searching, the matched command row will be selected, check the Test Command Cell value
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[5]").ShouldHaveText(cmdName1);
        }

        [TestMethod("B6-2_1")]
        [TestCategory("命令編輯頁面搜尋(B6)")]
        //B6-2_1
        public void TIEditor_SearchInTestCommandEditListDown_ByPressingNextButton()
        {
            // Add 2 Commands with names: "ReadAC_Current", "ReadAC_Frequency" in group: "AC Source"
            string cmdName1 = "ReadAC_Current";
            string cmdName2 = "ReadAC_Frequency";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string searchPattern = "ReadAC";
            int SearchingCountExpected = 3; 
            int SearchingCountActual = 0;

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 2 commands
            AddCommandsBy(cgt, cmdName1, cmdName2);

            // Get the Command Edit page search box, type in cmdName2 and click search button
            PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendContent, searchPattern);

            // Keep pressing "search Next" button until message box: "Search Result" show up
            while (!CheckMessageBoxOpened(PP5By.Id("MessageBoxExDialog")))
            {
                PP5IDEWindow.PerformClick("/ById[TIContextPanel,NextBtn]", ClickType.LeftClick);
                SearchingCountActual++;
            }

            // Check search to the end message box: "Search Result" show up
            CheckMessageBoxOpened(PP5By.Id("MessageBoxExDialog")).ShouldBeTrue();
            SearchingCountExpected.ShouldEqualTo(SearchingCountActual);

            // Close the window: "Search Result"
            PP5IDEWindow.PerformClick("/ById[MessageBoxExDialog,Close]", ClickType.LeftClick);


            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Edit "" at (178,15)
            //    Console.WriteLine("LeftClick on Edit \"\" at (178,15)");
            //    string xpath_LeftClickEdit_178_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
            //    var winElem_LeftClickEdit_178_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_178_15);
            //    if (winElem_LeftClickEdit_178_15 != null)
            //    {
            //        winElem_LeftClickEdit_178_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_178_15}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "s" + Keys.LeftShift"et"Keys.LeftShift + "a" + Keys.LeftShiftKeys.LeftShift + "c" + Keys.LeftShift"-"Keys.Backspace + Keys.BackspaceKeys.LeftShift + "-" + Keys.LeftShiftKeys.LeftShift + "p" + Keys.LeftShiftKeys.LeftShift + "l" + Keys.LeftShiftKeys.LeftShift + "d" + Keys.LeftShift" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"s\" + Keys.LeftShift\"et\"Keys.LeftShift + \"a\" + Keys.LeftShiftKeys.LeftShift + \"c\" + Keys.LeftShift\"-\"Keys.Backspace + Keys.BackspaceKeys.LeftShift + \"-\" + Keys.LeftShiftKeys.LeftShift + \"p\" + Keys.LeftShiftKeys.LeftShift + \"l\" + Keys.LeftShiftKeys.LeftShift + \"d\" + Keys.LeftShift\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_178_15.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickEdit_178_15.SendKeys("et");
            //    winElem_LeftClickEdit_178_15.SendKeys(Keys.LeftShift + "a" + Keys.LeftShift);
            //    winElem_LeftClickEdit_178_15.SendKeys(Keys.LeftShift + "c" + Keys.LeftShift);
            //    winElem_LeftClickEdit_178_15.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickEdit_178_15.SendKeys(Keys.LeftShift + "p" + Keys.LeftShift);
            //    winElem_LeftClickEdit_178_15.SendKeys(Keys.LeftShift + "l" + Keys.LeftShift);
            //    winElem_LeftClickEdit_178_15.SendKeys(Keys.LeftShift + "d" + Keys.LeftShift);


            //    // LeftClick on Button "" at (6,22)
            //    Console.WriteLine("LeftClick on Button \"\" at (6,22)");
            //    string xpath_LeftClickButton_6_22 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]";
            //    var winElem_LeftClickButton_6_22 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton_6_22);
            //    if (winElem_LeftClickButton_6_22 != null)
            //    {
            //        winElem_LeftClickButton_6_22.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton_6_22}");
            //        return;
            //    }

            //    int count = 0;

            //    // LeftClick on Button "" at (14,12)
            //    Console.WriteLine("LeftClick on Button \"\" at (14,12)");
            //    string xpath_LeftClickButton_14_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"NextBtn\"]";
            //    var winElem_LeftClickButton_14_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton_14_12);
            //    if (winElem_LeftClickButton_14_12 != null)
            //    {
            //        winElem_LeftClickButton_14_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton_14_12}");
            //        return;
            //    }
            //    count++;

            //    // LeftClick on Button "" at (14,12)
            //    Console.WriteLine("LeftClick on Button \"\" at (14,12)");
            //    xpath_LeftClickButton_14_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"NextBtn\"]";
            //    winElem_LeftClickButton_14_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton_14_12);
            //    if (winElem_LeftClickButton_14_12 != null)
            //    {
            //        winElem_LeftClickButton_14_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton_14_12}");
            //        return;
            //    }
            //    count++;


            //    // LeftClick on Text "No" at (9,11)
            //    Console.WriteLine("LeftClick on Text \"No\" at (9,11)");
            //    string xpath_LeftClickTextNo_9_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@Name=\"Search Result\"][@AutomationId=\"MessageBoxExDialog\"]/Button[@Name=\"No\"][@AutomationId=\"btnNo\"]/Text[@ClassName=\"TextBlock\"][@Name=\"No\"]";
            //    var winElem_LeftClickTextNo_9_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextNo_9_11);
            //    if (winElem_LeftClickTextNo_9_11 != null)
            //    {
            //        winElem_LeftClickTextNo_9_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextNo_9_11}");
            //        return;
            //    }


            //    // LeftClick on Image "" at (16,22)
            //    Console.WriteLine("LeftClick on Image \"\" at (16,22)");
            //    string xpath_LeftClickImage_16_22 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"PreviosBtn\"]/Image[@ClassName=\"Image\"]";
            //    var winElem_LeftClickImage_16_22 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_16_22);
            //    if (winElem_LeftClickImage_16_22 != null)
            //    {
            //        winElem_LeftClickImage_16_22.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_16_22}");
            //        return;
            //    }


            //    // LeftClick on Image "" at (11,19)
            //    Console.WriteLine("LeftClick on Image \"\" at (11,19)");
            //    string xpath_LeftClickImage_11_19 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"PreviosBtn\"]/Image[@ClassName=\"Image\"]";
            //    var winElem_LeftClickImage_11_19 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_11_19);
            //    if (winElem_LeftClickImage_11_19 != null)
            //    {
            //        winElem_LeftClickImage_11_19.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_11_19}");
            //        return;
            //    }



            //    Assert.AreEqual(count, 2);


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B6-2_2")]
        [TestCategory("命令編輯頁面搜尋(B6)")]
        //B6-2_2
        public void TIEditor_SearchInTestCommandEditListDown_ByPressingF3()
        {
            // Add 2 Commands with names: "ReadAC_Current", "ReadAC_Frequency" in group: "AC Source"
            string cmdName1 = "ReadAC_Current";
            string cmdName2 = "ReadAC_Frequency";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            string searchPattern = "ReadAC";
            int SearchingCountExpected = 3;
            int SearchingCountActual = 0;

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 2 commands
            AddCommandsBy(cgt, cmdName1, cmdName2);

            // Get the Command Edit page search box, type in cmdName2 and click search button
            PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendContent, searchPattern);

            // Keep pressing "search Next" button until message box: "Search Result" show up
            while (!CheckMessageBoxOpened(PP5By.Id("MessageBoxExDialog")))
            {
                PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendSingleKeys, Keys.F3);
                SearchingCountActual++;
            }

            // Check search to the end message box: "Search Result" show up
            CheckMessageBoxOpened(PP5By.Id("MessageBoxExDialog")).ShouldBeTrue();
            SearchingCountExpected.ShouldEqualTo(SearchingCountActual);

            // Close the window: "Search Result"
            PP5IDEWindow.PerformClick("/ById[MessageBoxExDialog,Close]", ClickType.LeftClick);
        }

        [TestMethod("B6-3_1")]
        [TestCategory("命令編輯頁面搜尋(B6)")]
        //B6-3_1
        public void TIEditor_SearchInTestCommandEditListUp_ByPressingPreviousButton()
        {
            // Add 2 Commands with names: "ReadAC_Current", "ReadAC_Frequency" in group: "AC Source"
            string cmdName1 = "ReadAC_Current";
            string cmdName2 = "ReadAC_Frequency";
            string searchPattern = "ReadAC";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            int SearchingCountExpected = 3;
            int SearchingCountActual = 0;

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 2 commands
            AddCommandsBy(cgt, cmdName1, cmdName2);

            // Get the Command Edit page search box, type in cmdName2 and click search button
            PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendContent, searchPattern);

            // Keep pressing "search Previus" button until message box: "Search Result" show up
            while (!CheckMessageBoxOpened(PP5By.Name("Search Result")))
            {
                PP5IDEWindow.PerformClick("/ById[TIContextPanel,PreviosBtn]", ClickType.LeftClick);
                SearchingCountActual++;
            }

            // Check search to the end message box: "Search Result" show up
            CheckMessageBoxOpened(PP5By.Name("Search Result")).ShouldBeTrue();
            SearchingCountExpected.ShouldEqualTo(SearchingCountActual);

            // Close the window: "Search Result"
            PP5IDEWindow.PerformClick("/ByIdOrName[Search Result,Close]", ClickType.LeftClick);
        }

        [TestMethod("B6-3_2")]
        [TestCategory("命令編輯頁面搜尋(B6)")]
        //B6-3_2
        public void TIEditor_SearchInTestCommandEditListUp_ByPressingShiftAndF3()
        {
            // Add 2 Commands with names: "ReadAC_Current", "ReadAC_Frequency" in group: "AC Source"
            string cmdName1 = "ReadAC_Current";
            string cmdName2 = "ReadAC_Frequency";
            string searchPattern = "ReadAC";
            TestCmdGroupType cgt = TestCmdGroupType.AC_Source;
            int SearchingCountExpected = 3;
            int SearchingCountActual = 0;

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add 2 commands
            AddCommandsBy(cgt, cmdName1, cmdName2);

            // Get the Command Edit page search box, type in cmdName2 and click search button
            PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendContent, searchPattern);

            // Keep pressing "search Previus" button until message box: "Search Result" show up
            while (!CheckMessageBoxOpened(PP5By.Name("Search Result")))
            {
                PP5IDEWindow.PerformInput("/ById[TIContextPanel,searchText]", InputType.SendComboKeys, new string[] { Keys.Shift, Keys.F3 });
                SearchingCountActual++;
            }

            // Check search to the end message box: "Search Result" show up
            CheckMessageBoxOpened(PP5By.Name("Search Result")).ShouldBeTrue();
            SearchingCountExpected.ShouldEqualTo(SearchingCountActual);

            // Close the window: "Search Result"
            PP5IDEWindow.PerformClick("/ByIdOrName[Search Result,Close]", ClickType.LeftClick);
        }

        [TestMethod("B7-1_1")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("0", typeof(object), DisplayName = "Constant value is 0")]                                // zero
        [DataRow("-2147483648", typeof(object), DisplayName = "Constant value is Int32 min value")]        // Int32 min value
        [DataRow("2147483647", typeof(object), DisplayName = "Constant value is Int32 max value")]         // Int32 max value
        //B7-1_1
        public void TIEditor_EditVariableWithParameterTypeConstant_VerifyWithCorrectConstantValue(string ConstantValue, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "EXP"
            string CommandName = "EXP";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;


            // Add command: "EXP"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command: "EXP"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Parameter: "Variable and constant, pvoid" > input constantValue: "0"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,1]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys(ConstantValue);

            // Verify the constant value same as in parameter value
            ConstantValue.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]").GetText());

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftDblClick on Text "Arithmetic" at (27,5)
            //    Console.WriteLine("LeftDblClick on Text \"Arithmetic\" at (27,5)");
            //    string xpath_LeftDblClickTextArithmetic_27_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"Arithmetic\"]";
            //    var winElem_LeftDblClickTextArithmetic_27_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextArithmetic_27_5);
            //    if (winElem_LeftDblClickTextArithmetic_27_5 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextArithmetic_27_5.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextArithmetic_27_5}");
            //        return;
            //    }


            //    // LeftDblClick on Text "ABS" at (12,4)
            //    Console.WriteLine("LeftDblClick on Text \"ABS\" at (12,4)");
            //    string xpath_LeftDblClickTextABS_12_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"SystemCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"ABS\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextABS_12_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextABS_12_4);
            //    if (winElem_LeftDblClickTextABS_12_4 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextABS_12_4.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextABS_12_4}");
            //        return;
            //    }


            //    // LeftClick on Custom "ABS, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridR" at (239,8)
            //    Console.WriteLine("LeftClick on Custom \"ABS, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridR\" at (239,8)");
            //    string xpath_LeftClickCustomABSItemChr_239_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"ABS, Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridR\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomABSItemChr_239_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomABSItemChr_239_8);
            //    if (winElem_LeftClickCustomABSItemChr_239_8 != null)
            //    {
            //        winElem_LeftClickCustomABSItemChr_239_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomABSItemChr_239_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (188,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (188,8)");
            //    string xpath_LeftClickCustomItemChroma_188_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_188_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_188_8);
            //    if (winElem_LeftClickCustomItemChroma_188_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_188_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_188_8}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Constant" at (4,9)
            //    Console.WriteLine("LeftClick on RadioButton \"Constant\" at (4,9)");
            //    string xpath_LeftClickRadioButtonConstant_4_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Constant\"][@AutomationId=\"cntRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonConstant_4_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonConstant_4_9);
            //    if (winElem_LeftClickRadioButtonConstant_4_9 != null)
            //    {
            //        winElem_LeftClickRadioButtonConstant_4_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonConstant_4_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (45,15)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (45,15)");
            //    string xpath_LeftClickCustomItemChroma_45_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_45_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_45_15);
            //    if (winElem_LeftClickCustomItemChroma_45_15 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_45_15.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_45_15}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.NumberPad1 + Keys.NumberPad1" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.NumberPad1 + Keys.NumberPad1\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_45_15.SendKeys(Keys.NumberPad1);




            //    Assert.AreEqual(4, 4);


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B7-1_2")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("a", typeof(object), DisplayName = "Constant value is an alphabet")]           // alphabet
        [DataRow(".", typeof(object), DisplayName = "Constant value is a Special character")]   // Special character
        [DataRow("1.5", typeof(object), DisplayName = "Constant value is a float number")]      // float number
        //B7-1_2
        public void TIEditor_EditVariableWithParameterTypeConstant_VerifyWithIncorrectValues(string ConstantValue, object dummy)
        {
            // Arrange
            string errorTooltipMsg = "Value must be Integer Format";

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "EXP"
            string CommandName = "EXP";
            TestCmdGroupType cgt = TestCmdGroupType.Arithmetic;


            // Add command: "EXP"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command: "EXP"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // first Parameter, input constantValue: "0"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,1]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            SendSingleKeys(ConstantValue);

            // Verify the tooltip message that indicate the error format of ConstantValue
            AutoUIExecutor.SwitchTo(SessionType.Desktop);
            errorTooltipMsg.ShouldEqualTo(CurrentDriver.GetToolTipMessage(((PP5Element)CurrentDriver.PerformGetElement($"/ByCell@ParameterGrid[1,3]"))));
            //PP5IDEWindowRefresh();
        }

        [TestMethod("B7-2_1")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("EXP", TestCmdGroupType.Arithmetic, "baseNumber_int", VariableDataType.Integer, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: EXP)")]         // Cmd is EXP
        [DataRow("FLOOR", TestCmdGroupType.Arithmetic, "input_float", VariableDataType.Float, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: FLOOR)")]          // Cmd is FLOOR
        [DataRow("ATOF", TestCmdGroupType.String, "ASCIIChar_string", VariableDataType.String, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: ATOF)")]          // Cmd is ATOF
        //B7-2_1
        public void TIEditor_EditVariableWithParameterTypeTestCondition_VerifyWithCorrectValue(string cmdName, TestCmdGroupType groupType, string condVarCallName, VariableDataType dataType, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add command
            AddCommandBy(groupType, cmdName);

            // Add condition variable, where datatype: string and EditType: EditBox
            CreateNewVariable1(VariableTabType.Condition, condVarCallName, condVarCallName, dataType, VariableEditType.EditBox);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // first Parameter, select condVarCallName
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,1]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cndRdoBtn]/ByName[Test Condition]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]")
                        .SelectComboBoxItemByName2(condVarCallName);

            // Verify the condition variable is mapped to the parameter value cell
            condVarCallName.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]").GetText());

            ////MainPanel_TIEditor_OpenNewTI();
            //TimeSpan.FromSeconds(2);

            //bool bSuccess = false;

            //try
            //{
            //    // LeftClick on Edit "" at (92,12)
            //    Console.WriteLine("LeftClick on Edit \"\" at (92,12)");
            //    string xpath_LeftClickEdit_92_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
            //    var winElem_LeftClickEdit_92_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_92_12);
            //    if (winElem_LeftClickEdit_92_12 != null)
            //    {
            //        winElem_LeftClickEdit_92_12.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_92_12}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys="Keys.LeftShift + "s" + Keys.LeftShift"top"Keys.LeftShift + "e" + "v" + "g" + Keys.LeftShift"ate"Keys.LeftShift + "-" + Keys.LeftShiftKeys.LeftShift + "d" + "b" + "c" + Keys.LeftShiftKeys.LeftShift + "d" + Keys.LeftShift"ata"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"Keys.LeftShift + \"s\" + Keys.LeftShift\"top\"Keys.LeftShift + \"e\" + \"v\" + \"g\" + Keys.LeftShift\"ate\"Keys.LeftShift + \"-\" + Keys.LeftShiftKeys.LeftShift + \"d\" + \"b\" + \"c\" + Keys.LeftShiftKeys.LeftShift + \"d\" + Keys.LeftShift\"ata\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "s" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys("top");
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "e" + "v" + "g" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys("ate");
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "-" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "d" + "b" + "c" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys(Keys.LeftShift + "d" + Keys.LeftShift);
            //    winElem_LeftClickEdit_92_12.SendKeys("ata");


            //    // LeftClick on Button "" at (28,8)
            //    Console.WriteLine("LeftClick on Button \"\" at (28,8)");
            //    string xpath_LeftClickButton_28_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]";
            //    var winElem_LeftClickButton_28_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButton_28_8);
            //    if (winElem_LeftClickButton_28_8 != null)
            //    {
            //        winElem_LeftClickButton_28_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButton_28_8}");
            //        return;
            //    }


            //    // LeftDblClick on Text "StopEVGate_DBCData" at (71,10)
            //    Console.WriteLine("LeftDblClick on Text \"StopEVGate_DBCData\" at (71,10)");
            //    string xpath_LeftDblClickTextStopEVGate_71_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"StopEVGate_DBCData\"][@AutomationId=\"cmdTxtBlk\"]";
            //    var winElem_LeftDblClickTextStopEVGate_71_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextStopEVGate_71_10);
            //    if (winElem_LeftDblClickTextStopEVGate_71_10 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextStopEVGate_71_10.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextStopEVGate_71_10}");
            //        return;
            //    }


            //    // LeftClick on Custom "StopEVGate_DBCData, Item: Chroma.TestItemEditor.ComposedElement." at (259,7)
            //    Console.WriteLine("LeftClick on Custom \"StopEVGate_DBCData, Item: Chroma.TestItemEditor.ComposedElement.\" at (259,7)");
            //    string xpath_LeftClickCustomStopEVGate_259_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"StopEVGate_DBCData, Item: Chroma.TestItemEditor.ComposedElement.\")][@AutomationId=\"CommandName\"]";
            //    var winElem_LeftClickCustomStopEVGate_259_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomStopEVGate_259_7);
            //    if (winElem_LeftClickCustomStopEVGate_259_7 != null)
            //    {
            //        winElem_LeftClickCustomStopEVGate_259_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomStopEVGate_259_7}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (120,11)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (120,11)");
            //    string xpath_LeftClickCustomItemChroma_120_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")]";
            //    var winElem_LeftClickCustomItemChroma_120_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_120_11);
            //    if (winElem_LeftClickCustomItemChroma_120_11 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_120_11.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_120_11}");
            //        return;
            //    }


            //    // LeftClick on RadioButton "Test Condition" at (9,8)
            //    Console.WriteLine("LeftClick on RadioButton \"Test Condition\" at (9,8)");
            //    string xpath_LeftClickRadioButtonTestCondit_9_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/Pane[@ClassName=\"ScrollViewer\"]/RadioButton[@Name=\"Test Condition\"][@AutomationId=\"cndRdoBtn\"]";
            //    var winElem_LeftClickRadioButtonTestCondit_9_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickRadioButtonTestCondit_9_8);
            //    if (winElem_LeftClickRadioButtonTestCondit_9_8 != null)
            //    {
            //        winElem_LeftClickRadioButtonTestCondit_9_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickRadioButtonTestCondit_9_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (87,14)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (87,14)");
            //    string xpath_LeftClickCustomItemChroma_87_14 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_87_14 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_87_14);
            //    if (winElem_LeftClickCustomItemChroma_87_14 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_87_14.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_87_14}");
            //        return;
            //    }


            //    // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (113,6)
            //    Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (113,6)");
            //    string xpath_LeftDblClickCustomItemChroma_113_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftDblClickCustomItemChroma_113_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_113_6);
            //    if (winElem_LeftDblClickCustomItemChroma_113_6 != null)
            //    {
            //        AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_113_6.Coordinates);
            //        AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_113_6}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (151,13)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (151,13)");
            //    string xpath_LeftClickCustomItemChroma_151_13 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
            //    var winElem_LeftClickCustomItemChroma_151_13 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_151_13);
            //    if (winElem_LeftClickCustomItemChroma_151_13 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_151_13.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_151_13}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""condition"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"condition\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_151_13.SendKeys("condition");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (43,8)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (43,8)");
            //    string xpath_LeftClickCustomItemChroma_43_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
            //    var winElem_LeftClickCustomItemChroma_43_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_43_8);
            //    if (winElem_LeftClickCustomItemChroma_43_8 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_43_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_43_8}");
            //        return;
            //    }


            //    // LeftClick on Text "Integer" at (27,8)
            //    Console.WriteLine("LeftClick on Text \"Integer\" at (27,8)");
            //    string xpath_LeftClickTextInteger_27_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"Integer\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Integer\"]";
            //    var winElem_LeftClickTextInteger_27_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextInteger_27_8);
            //    if (winElem_LeftClickTextInteger_27_8 != null)
            //    {
            //        winElem_LeftClickTextInteger_27_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextInteger_27_8}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (22,7)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (22,7)");
            //    string xpath_LeftClickCustomItemChroma_22_7 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
            //    var winElem_LeftClickCustomItemChroma_22_7 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_22_7);
            //    if (winElem_LeftClickCustomItemChroma_22_7 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_22_7.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_22_7}");
            //        return;
            //    }


            //    // LeftClick on Text "EditBox" at (22,9)
            //    Console.WriteLine("LeftClick on Text \"EditBox\" at (22,9)");
            //    string xpath_LeftClickTextEditBox_22_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"EditBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"EditBox\"]";
            //    var winElem_LeftClickTextEditBox_22_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextEditBox_22_9);
            //    if (winElem_LeftClickTextEditBox_22_9 != null)
            //    {
            //        winElem_LeftClickTextEditBox_22_9.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextEditBox_22_9}");
            //        return;
            //    }


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (162,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (162,10)");
            //    string xpath_LeftClickCustomItemChroma_162_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
            //    var winElem_LeftClickCustomItemChroma_162_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_162_10);
            //    if (winElem_LeftClickCustomItemChroma_162_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_162_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_162_10}");
            //        return;
            //    }


            //    // KeyboardInput VirtualKeys=""cc"" CapsLock=False NumLock=True ScrollLock=False
            //    Console.WriteLine("KeyboardInput VirtualKeys=\"\"cc\"\" CapsLock=False NumLock=True ScrollLock=False");
            //    System.Threading.Thread.Sleep(100);
            //    winElem_LeftClickCustomItemChroma_162_10.SendKeys("cc");


            //    // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG" at (24,10)
            //    Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\" at (24,10)");
            //    string xpath_LeftClickCustomItemChroma_24_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem3\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem9\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem7\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@AutomationId=\"editParamAreaView\"]/DataGrid[@AutomationId=\"ParameterGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.ParameterGridRowVi\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.ParameterG\")][@AutomationId=\"Value\"]";
            //    var winElem_LeftClickCustomItemChroma_24_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_24_10);
            //    if (winElem_LeftClickCustomItemChroma_24_10 != null)
            //    {
            //        winElem_LeftClickCustomItemChroma_24_10.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_24_10}");
            //        return;
            //    }


            //    // LeftClick on Text "condition" at (21,8)
            //    Console.WriteLine("LeftClick on Text \"condition\" at (21,8)");
            //    string xpath_LeftClickTextcondition_21_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"condition\"]/Text[@ClassName=\"TextBlock\"][@Name=\"condition\"]";
            //    var winElem_LeftClickTextcondition_21_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextcondition_21_8);
            //    if (winElem_LeftClickTextcondition_21_8 != null)
            //    {
            //        winElem_LeftClickTextcondition_21_8.Click();
            //    }
            //    else
            //    {
            //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextcondition_21_8}");
            //        return;
            //    }



            //    Assert.AreEqual(4, 4);


            //    bSuccess = true;
            //}

            //finally
            //{
            //    Assert.AreEqual(bSuccess, true);
            //}
        }

        [TestMethod("B7-3")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("EXP", TestCmdGroupType.Arithmetic, "baseNumber_int", VariableDataType.Integer, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: EXP)")]         // Cmd is EXP
        [DataRow("FLOOR", TestCmdGroupType.Arithmetic, "input_float", VariableDataType.Float, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: FLOOR)")]          // Cmd is FLOOR
        [DataRow("ATOF", TestCmdGroupType.String, "ASCIIChar_string", VariableDataType.String, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: ATOF)")]          // Cmd is ATOF
        //B7-3
        public void TIEditor_EditVariableWithParameterTypeTestResult_VerifyWithCorrectValue(string cmdName, TestCmdGroupType groupType, string resVarCallName, VariableDataType dataType, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add command
            AddCommandBy(groupType, cmdName);

            // Add condition variable, where datatype: string
            InitializeVariableDataGrid(VariableTabType.Result, resVarCallName, resVarCallName, dataType);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // first Parameter, select resVarCallName
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,1]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[rstRdoBtn]/ByName[Test Result]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]")
                        .SelectItem(resVarCallName);

            // Verify the result variable is mapped to the parameter value cell
            resVarCallName.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]").GetText());
        }

        [TestMethod("B7-4")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("EXP", TestCmdGroupType.Arithmetic, "baseNumber_int", VariableDataType.Integer, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: EXP)")]         // Cmd is EXP
        [DataRow("FLOOR", TestCmdGroupType.Arithmetic, "input_float", VariableDataType.Float, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: FLOOR)")]          // Cmd is FLOOR
        [DataRow("ATOF", TestCmdGroupType.String, "ASCIIChar_string", VariableDataType.String, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: ATOF)")]          // Cmd is ATOF
        //B7-4
        public void TIEditor_EditVariableWithParameterTypeTemporaryVar_VerifyWithCorrectValue(string cmdName, TestCmdGroupType groupType, string tempVarCallName, VariableDataType dataType, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add command: "ABS"
            AddCommandBy(groupType, cmdName);

            // Add condition variable, where datatype: string
            CreateNewVariable2(VariableTabType.Temp, tempVarCallName, tempVarCallName, dataType);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // first Parameter, select resVarCallName
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,1]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[tmpRdoBtn]/ByName[Temporary Var.]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]")
                        .SelectItem(tempVarCallName);

            // Verify the temperary variable is mapped to the parameter value cell
            tempVarCallName.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]").GetText());
        }

        [TestMethod("B7-5")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("EXP", TestCmdGroupType.Arithmetic, "baseNumber_int", VariableDataType.Integer, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: EXP)")]         // Cmd is EXP
        [DataRow("FLOOR", TestCmdGroupType.Arithmetic, "input_float", VariableDataType.Float, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: FLOOR)")]          // Cmd is FLOOR
        [DataRow("ATOF", TestCmdGroupType.String, "ASCIIChar_string", VariableDataType.String, typeof(object), DisplayName = "Verify Test condition callName on parameter cell (cmd: ATOF)")]          // Cmd is ATOF
        //B7-5
        public void TIEditor_EditVariableWithParameterTypeGlobalVar_VerifyWithCorrectValue(string cmdName, TestCmdGroupType groupType, string glbVarCallName, VariableDataType dataType, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add command: "ABS"
            AddCommandBy(groupType, cmdName);

            // Add condition variable, where datatype: string
            CreateNewVariable1(VariableTabType.Global, glbVarCallName, glbVarCallName, dataType, VariableEditType.EditBox);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // first Parameter, select resVarCallName
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,1]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[glbRdoBtn]/ByName[Global Var.]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]")
                        .SelectItem(glbVarCallName);

            // Verify the global variable is mapped to the parameter value cell
            glbVarCallName.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,3]").GetText());
        }

        [TestMethod("B7-6")]
        [TestCategory("參數編輯(B7)")]
        //B7-6
        public void TIEditor_EditVariableWithParameterTypeOperator()
        {
            // Arrange
            string expectedOperator = ">";

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "If_Then"
            string CommandName = "If_Then";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "If_Then"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 2nd parameter of this command > select operator item: ">"
            //PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,3]", ClickType.LeftDoubleClick);
            //SelectItem("PART_Content", expectedOperator);
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[2,3]")
                        .SelectItem(expectedOperator);

            // Check the operator is ">"
            //expectedOperator.ShouldEqualTo(GetCellValue("ParameterGrid", 1, "Parameter Value"));
            expectedOperator.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[2,3]").GetText());
        }

        [TestMethod("B7-7")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("TestFAIL", typeof(object), DisplayName = "Verify label is TestFAIL")]     // label is TestFAIL
        [DataRow("TestPASS", typeof(object), DisplayName = "Verify label is TestPASS")]     // label is TestPASS
        //B7-7
        public void TIEditor_EditVariableWithParameterTypeLabel(string label, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "If_Then"
            string CommandName = "If_Then";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "If_Then"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 4th parameter of this command > Label selection on TestFail and TestPass
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[4,@No]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[4,@Parameter Value]")
                        .SelectItem(label);

            // Check the label is same as input
            label.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[4,@Parameter Value]").GetText());
        }

        [TestMethod("B7-8")]
        [TestCategory("參數編輯(B7)")]
        //B7-8
        public void TIEditor_EditVariableWithParameterTypeExpression()
        {
            // Arrange
            string expressionText = "\"\"Insrc_Type\"+1>0\"";

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "If"
            string CommandName = "If";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "If"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 1st parameter of this command > input the expression: "Insrc_Type+1
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@Parameter Value]", ClickType.LeftClick);

            IElement expressionWindow = PP5IDEWindow.PerformGetElement("/Window[Expression Editor]");

            expressionWindow.PerformClick("/ById[TB_Value,UI_textbox]", ClickType.LeftClick);

            SendSingleKeys("\"");
            expressionWindow.PerformGetElement("/ById[UI_combobox]")
                            .SelectItem(0);
            SendSingleKeys("\"");
            SendSingleKeys("+1>0");

            var okButton = expressionWindow.PerformGetElement("/ByName[Ok]");
            expressionWindow.PerformClick("/ByName[Check]", ClickType.LeftClick);
            okButton.LeftClick();

            // Check the expression string is selected
            expressionText.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,@Parameter Value]").GetText());
            //Assert.That.StringEquals(expressionText, PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,@Parameter Value]").GetText());
        }

        [TestMethod("B7-9_1")]
        [TestCategory("參數編輯(B7)")]
        [DataRow(1, typeof(object), DisplayName = "Verify parameter mapping with 1 parameter (Data Type: Constant)")]
        [DataRow(2, typeof(object), DisplayName = "Verify parameter mapping with 2 parameters (Data Type: Constant)")]
        //B7-9_1
        public void TIEditor_EditVariableWithParameterTypeFuncPar_MapConstantParameter(int paramCount, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "Call_Dll"
            string CommandName = "Call_Dll";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "Call_Dll"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 1st parameter of this command > input the expression: "Insrc_Type+1
            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@Parameter Value]", InputType.SendSingleKeys, paramCount.ToString());
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@Parameter Value]", ClickType.LeftClick);

            IElement funcParEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Func Parameter Editor]");

            for (int iter = 1; iter <= paramCount; iter++)
            {
                funcParEdtWindow.PerformClick($"/ByCell@MappingGrid[{iter},@No]", ClickType.LeftClick);
                funcParEdtWindow.PerformClick("/ById[CntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
                funcParEdtWindow.PerformInput($"/ByCell@MappingGrid[{iter},@Mapping Parameter]", InputType.SendSingleKeys, iter.ToString());
                Press(Keys.Enter);
            }

            funcParEdtWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // Check the expression string is selected
            StringBuilder expTextSb = new StringBuilder();
            string expText;
            for (int iter = 1; iter <= paramCount; iter++)
                expTextSb.AppendFormat("{0},", iter);
            expTextSb.Remove(expTextSb.Length - 1, 1);
            expText = "\"" + expTextSb.ToString() + "\"";

            expText.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[5,@Parameter Value]").GetText());
        }

        [TestMethod("B7-9_2")]
        [TestCategory("參數編輯(B7)")]
        [DataRow(1, "param1", typeof(object), DisplayName = "Verify parameter mapping with 1 parameter (Data Type: Condition)")]
        [DataRow(2, "param1,param2", typeof(object), DisplayName = "Verify parameter mapping with 2 parameters (Data Type: Condition)")]
        //B7-9_2
        public void TIEditor_EditVariableWithParameterTypeFuncPar_MapConditionParameter(int paramCount, string condVarNameStr, object dummy)
        {
            // Add 1 condition variable
            string[] condVarNames = condVarNameStr.Split(',');
            for (int iter = 0; iter < paramCount; iter++)
                InitializeVariableDataGrid(VariableTabType.Condition, condVarNames[iter], condVarNames[iter], VariableDataType.String, VariableEditType.EditBox);

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "Call_Dll"
            string CommandName = "Call_Dll";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "Call_Dll"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 1st parameter of this command > input the expression: "Insrc_Type+1
            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@Parameter Value]", InputType.SendSingleKeys, paramCount.ToString());
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@Parameter Value]", ClickType.LeftClick);

            IElement funcParEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Func Parameter Editor]");

            for (int iter = 1; iter <= paramCount; iter++)
            {
                funcParEdtWindow.PerformClick($"/ByCell@MappingGrid[{iter},@No]", ClickType.LeftClick);
                funcParEdtWindow.PerformClick("/ById[CndRdoBtn]/ByName[Condition]", ClickType.LeftClick);
                funcParEdtWindow.PerformGetElement($"/ByCell@MappingGrid[{iter},@Mapping Parameter]")
                                .SelectItem(condVarNames[iter - 1]);
            }

            funcParEdtWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // Check the expression string is selected
            StringBuilder expTextSb = new StringBuilder();
            string expText;
            for (int iter = 0; iter < paramCount; iter++)
                expTextSb.AppendFormat("{0},", condVarNames[iter]);
            expTextSb.Remove(expTextSb.Length - 1, 1);
            expText = "\"" + expTextSb.ToString() + "\"";

            expText.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[5,@Parameter Value]").GetText());
        }

        [TestMethod("B7-9_3")]
        [TestCategory("參數編輯(B7)")]
        [DataRow(1, "param1", typeof(object), DisplayName = "Verify parameter mapping with 1 parameter (Data Type: Result)")]
        [DataRow(2, "param1,param2", typeof(object), DisplayName = "Verify parameter mapping with 2 parameters (Data Type: Result)")]
        //B7-9_3
        public void TIEditor_EditVariableWithParameterTypeFuncPar_MapResultParameter(int paramCount, string resVarNameStr, object dummy)
        {
            // Add 1 Result variable
            string[] resVarNames = resVarNameStr.Split(',');
            for (int iter = 0; iter < paramCount; iter++)
                InitializeVariableDataGrid(VariableTabType.Result, resVarNames[iter], resVarNames[iter], VariableDataType.String);

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "Call_Dll"
            string CommandName = "Call_Dll";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "Call_Dll"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 1st parameter of this command > input the expression: "Insrc_Type+1
            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@Parameter Value]", InputType.SendSingleKeys, paramCount.ToString());
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@Parameter Value]", ClickType.LeftClick);

            IElement funcParEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Func Parameter Editor]");

            for (int iter = 1; iter <= paramCount; iter++)
            {
                funcParEdtWindow.PerformClick($"/ByCell@MappingGrid[{iter},@No]", ClickType.LeftClick);
                funcParEdtWindow.PerformClick("/ById[RstRdoBtn]/ByName[Result]", ClickType.LeftClick);
                funcParEdtWindow.PerformGetElement($"/ByCell@MappingGrid[{iter},@Mapping Parameter]")
                                .SelectItem(resVarNames[iter - 1]);
            }

            funcParEdtWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // Check the expression string is selected
            StringBuilder expTextSb = new StringBuilder();
            string expText;
            for (int iter = 0; iter < paramCount; iter++)
                expTextSb.AppendFormat("{0},", resVarNames[iter]);
            expTextSb.Remove(expTextSb.Length - 1, 1);
            expText = "\"" + expTextSb.ToString() + "\"";

            expText.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[5,@Parameter Value]").GetText());
        }

        [TestMethod("B7-9_4")]
        [TestCategory("參數編輯(B7)")]
        [DataRow(1, "param1", typeof(object), DisplayName = "Verify parameter mapping with 1 parameter (Data Type: Temp)")]
        [DataRow(2, "param1,param2", typeof(object), DisplayName = "Verify parameter mapping with 2 parameters (Data Type: Temp)")]
        //B7-9_4
        public void TIEditor_EditVariableWithParameterTypeFuncPar_MapTempParameter(int paramCount, string tempVarNameStr, object dummy)
        {
            // Add 1 Temp variable
            string[] tempVarNames = tempVarNameStr.Split(',');
            for (int iter = 0; iter < paramCount; iter++)
                InitializeVariableDataGrid(VariableTabType.Temp, tempVarNames[iter], tempVarNames[iter], VariableDataType.String);

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "Call_Dll"
            string CommandName = "Call_Dll";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "Call_Dll"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 1st parameter of this command > input the expression: "Insrc_Type+1
            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@Parameter Value]", InputType.SendSingleKeys, paramCount.ToString());
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@Parameter Value]", ClickType.LeftClick);

            IElement funcParEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Func Parameter Editor]");

            for (int iter = 1; iter <= paramCount; iter++)
            {
                funcParEdtWindow.PerformClick($"/ByCell@MappingGrid[{iter},@No]", ClickType.LeftClick);
                PP5IDEWindow.PerformClick("/ById[TmpRdoBtn]/ByName[Temporary]", ClickType.LeftClick);
                funcParEdtWindow.PerformGetElement($"/ByCell@MappingGrid[{iter},@Mapping Parameter]")
                                .SelectItem(tempVarNames[iter - 1]);
            }

            funcParEdtWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // Check the expression string is selected
            StringBuilder expTextSb = new StringBuilder();
            string expText;
            for (int iter = 0; iter < paramCount; iter++)
                expTextSb.AppendFormat("{0},", tempVarNames[iter]);
            expTextSb.Remove(expTextSb.Length - 1, 1);
            expText = "\"" + expTextSb.ToString() + "\"";

            expText.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[5,@Parameter Value]").GetText());
        }

        [TestMethod("B7-9_5")]
        [TestCategory("參數編輯(B7)")]
        [DataRow(1, "param1", typeof(object), DisplayName = "Verify parameter mapping with 1 parameter (Data Type: Global)")]
        [DataRow(2, "param1,param2", typeof(object), DisplayName = "Verify parameter mapping with 2 parameters (Data Type: Global)")]
        //B7-9_5
        public void TIEditor_EditVariableWithParameterTypeFuncPar_MapGlobalParameter(int paramCount, string glbVarNameStr, object dummy)
        {
            // Add 1 Global variable
            PP5DataGrid dgGlb = null;
            string[] glbVarNames = glbVarNameStr.Split(',');
            for (int iter = 0; iter < paramCount; iter++)
                dgGlb = InitializeVariableDataGrid(VariableTabType.Global, glbVarNames[iter], glbVarNames[iter], VariableDataType.String, VariableEditType.EditBox);

            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Input Command name: "Call_Dll"
            string CommandName = "Call_Dll";
            TestCmdGroupType cgt = TestCmdGroupType.System_Flow_Control;

            // Add command: "Call_Dll"
            AddCommandBy(cgt, CommandName);

            // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);

            // Edit the 1st parameter of this command > input the expression: "Insrc_Type+1
            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@Parameter Value]", InputType.SendSingleKeys, paramCount.ToString());
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@Parameter Value]", ClickType.LeftClick);

            IElement funcParEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Func Parameter Editor]");

            for (int iter = 1; iter <= paramCount; iter++)
            {
                funcParEdtWindow.PerformClick($"/ByCell@MappingGrid[{iter},@No]", ClickType.LeftClick);
                funcParEdtWindow.PerformClick("/ById[GlbRdoBtn]/ByName[Global]", ClickType.LeftClick);
                funcParEdtWindow.PerformGetElement($"/ByCell@MappingGrid[{iter},@Mapping Parameter]")
                                .SelectItem(glbVarNames[iter - 1]);
            }

            funcParEdtWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // Check the expression string is selected
            StringBuilder expTextSb = new StringBuilder();
            string expText;
            for (int iter = 0; iter < paramCount; iter++)
                expTextSb.AppendFormat("{0},", glbVarNames[iter]);
            expTextSb.Remove(expTextSb.Length - 1, 1);
            expText = "\"" + expTextSb.ToString() + "\"";

            expText.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[5,@Parameter Value]").GetText());

            // Delete the global variables
            //for (int iter = 0; iter < paramCount; iter++)
            //    DeleteVariable(glbVarNames[iter]);
            int rowNo = dgGlb.LastRowNo;
            for (int currRow = rowNo; currRow >= rowNo - 1; currRow--)
            {
                dgGlb.PerformClick($"/ByCell[{currRow},@Call Name]", ClickType.LeftClick);
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
            }
        }

        [TestMethod("B7-10")]
        [TestCategory("參數編輯(B7)")]
        public void TIEditor_EditVariableWithParameterTypeTiCondition_MapNewConditionParameter()
        {
            // Steps:
            // 1. Create a thread TI, add a condition variable then save the TI, close it.
            //    1-1. Condition variable showName and callName set to "newCondParam", DataType set to "Float", Edit Type set to "EditBox".
            //    1-2. Save the threadTI with name: ""
            // 2. Switch to management, activate the ThreadTI (Active set to true).
            // 3. Open a new TI window with type: TI, include the threadTI, edit on parameter: Condition Parameters, string.
            // 4. Test Item Var Editor window showup, map the condition variable in threadTI to that in current TI.
            //    4-1. Click "Scan" to find the condition variable in threadTI, should showup in "New Parameter" column.
            //    4-2. Click "Ok" to confirm the mapping.
            // 5. Verify the threadTI condition parameter is mapped in the current TI.
            //    5-1. Check the new parameter is added into Condition Variable datagrid.
            //    5-2. Check the new parameter's callName same as Parameter Value column in Test Command Parameter datagrid, on parameter: Condition Parameters, string.

            // Step 1.
            //string ThreadTIName = "ThreadTICondVar";
            TIName = "ThreadTICondVar";
            string ThreadTICondShowName = "newCondParam";
            string ThreadTICondCallName = "newCondParam";
            VariableDataType ThreadTICondDataType = VariableDataType.Float;
            VariableEditType ThreadTICondEditType = VariableEditType.EditBox;
            PerformCloseTI();
           
            MenuSelect("Functions", "TI Editor");
            OpenNewTI(TestItemType.ThreadTI, TestItemRunType.UUT);
            CreateNewVariable1(VariableTabType.Condition, ThreadTICondShowName, ThreadTICondCallName, ThreadTICondDataType, ThreadTICondEditType);
            SaveAsNewTI(TIName);
            PerformCloseTI();

            // Step 2.
            TIExecuteAction(TIAction.SetTIActive, TIName);

            // Step 3.
            MenuSelect("Functions", "TI Editor");
            OpenNewTI(TestItemType.TI, TestItemRunType.UUT);
            AddCommandBy(TestCmdGroupType.Thread_TI, TIName);

            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,5]", ClickType.LeftClick);                         // Select on the command
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@Parameter Value]", ClickType.LeftClick);   // Select on the parameter

            // Step 4.
            IElement tiVarEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Test Item Var Editor]");
            tiVarEdtWindow.PerformClick($"/ByName[Scan]", ClickType.LeftClick);
            tiVarEdtWindow.PerformClick($"/ByName[Ok]", ClickType.LeftClick);

            // Step 5.
            VariableTabNavi(VariableTabType.Condition);
            PP5IDEWindow.PerformGetElement("/ByCell@CndGrid[1,@Show Name]").GetText().ShouldContain(ThreadTICondShowName);                      // Compare the parameter in condition variable
            PP5IDEWindow.PerformGetElement("/ByCell@CndGrid[1,@Call Name]").GetText().ShouldContain(ThreadTICondCallName);
            ThreadTICondDataType.GetDescription().ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByCell@CndGrid[1,@Data Type]").GetText());
            ThreadTICondEditType.GetDescription().ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByCell@CndGrid[1,@Edit Type]").GetText());
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[2,@Parameter Value]").GetText().ShouldContain(ThreadTICondCallName);
        }

        //[TestMethod("B7-11")]
        //[TestCategory("參數編輯(B7)")]
        ////B7-11
        //public void TIEditor_EditVariableWithParameterTypeTICondition()
        //{
        //    // Switch to test item context window
        //    TestItemTabNavi(TestItemTabType.TIContext);

        //    // Input Command name: "LoadIntArrayToBinaryStringArray"
        //    string CommandName = "LoadIntArrayToBinaryStringArray";
        //    string GroupName = "Sub TI";

        //    // Add command: "LoadIntArrayToBinaryStringArray"
        //    AddCommandBy(GroupName, CommandName);

        //    // LeftClick on Text "LoadIntArrayToBinaryStringArray"
        //    //Console.WriteLine("LeftClick on Text \"LoadIntArrayToBinaryStringArray\"");
        //    PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);                         // Select on the command
        //    //GetCellBy("PGGrid", 0, "Test Command").LeftClick();

        //    // Edit the 2nd parameter of this command > Test Item Var Editor popup
        //    //GetCellBy("ParameterGrid", 1, "Parameter Value").LeftClick();
        //    PP5IDEWindow.PerformClick("/ByCell@ParameterGrid[1,@Parameter Value]", ClickType.LeftClick);

        //    //IElement tiVarEdtWindow = PP5IDEWindow.GetFirstChildOfControlType(ElementControlType.Window);
        //    IElement tiVarEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Test Item Var Editor]");
        //    IElement dgMapping = tiVarEdtWindow.GetFirstDataGridElement();

        //    // Get default values of the mapping parameters
        //    tiVarEdtWindow.PerformClick($"/ByName[Default]", ClickType.LeftClick);
        //    //string mappingValuePara1 = dgMapping.GetCellValue(rowNo: 1, colName: "Mapping Parameter");
        //    //string mappingValuePara2 = dgMapping.GetCellValue(rowNo: 2, colName: "Mapping Parameter");
        //    string mappingValuePara1 = dgMapping.PerformGetElement("/ByCell[1,@Mapping Parameter]").GetText();
        //    string mappingValuePara2 = dgMapping.PerformGetElement("/ByCell[2,@Mapping Parameter]").GetText();

        //    tiVarEdtWindow.PerformClick($"/ByName[Scan]", ClickType.LeftClick);
        //    //string mappingPara1 = dgMapping.GetCellValue(rowNo: 1, colName: "New Parameter");
        //    //string mappingPara2 = dgMapping.GetCellValue(rowNo: 2, colName: "New Parameter");
        //    string mappingPara1 = dgMapping.PerformGetElement("/ByCell[1,@New Parameter]").GetText();
        //    string mappingPara2 = dgMapping.PerformGetElement("/ByCell[2,@New Parameter]").GetText();

        //    //IElement okButton = tiVarEdtWindow.GetBtnElement("Ok");
        //    //while (!okButton.Enabled)
        //    //{
        //    //    Press(Keys.Enter);
        //    //}
        //    //okButton.LeftClick();
        //    tiVarEdtWindow.PerformClick($"/ByName[Ok]", ClickType.LeftClick);

        //    // Check the 2nd parameter string is correct
        //    //string conditionText = $"\"\"{mappingPara1},{mappingPara2}\"\"";
        //    //conditionText.ShouldEqualTo(GetCellValue("ParameterGrid", 1, "Parameter Value"));
        //    string conditionText = $"{mappingPara1},{mappingPara2}";
        //    //GetCellValue("ParameterGrid", 1, "Parameter Value").ShouldContain(conditionText);
        //    PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[1,@Parameter Value]").GetText().ShouldContain(conditionText);

        //    VariableTabNavi(VariableTabType.Condition);
        //    //IElement dgCnd = PP5IDEWindow.GetExtendedElement(PP5By.Id(TIDataTableAutoIDType.CndGrid.ToString()));
        //    IElement dgCnd = PP5IDEWindow.PerformGetElement("/ByCell@CndGrid[1,@Parameter Value]");
        //    //IWebElement dgCnd = CurrentDriver.GetElementFromWebElement(MobileBy.AccessibilityId("dockItem8"))
        //    //                                 .GetFirstDataGridElement();

        //    //string mappingValuePara1Actual = dgCnd.GetCellValue(rowNo: 1, colName: "Default");
        //    //string mappingValuePara2Actual = dgCnd.GetCellValue(rowNo: 2, colName: "Default");
        //    //string mappingCallNamePara1Actual = dgCnd.GetCellValue(rowNo: 1, colName: "Call Name");
        //    //string mappingCallNamePara2Actual = dgCnd.GetCellValue(rowNo: 2, colName: "Call Name");
        //    string mappingValuePara1Actual = dgCnd.PerformGetElement("/ByCell[1,@Default]").GetText();
        //    string mappingValuePara2Actual = dgCnd.PerformGetElement("/ByCell[2,@Default]").GetText();
        //    string mappingCallNamePara1Actual = dgCnd.PerformGetElement("/ByCell[1,@Call Name]").GetText();
        //    string mappingCallNamePara2Actual = dgCnd.PerformGetElement("/ByCell[2,@Call Name").GetText();
        //    mappingValuePara1.ShouldEqualTo(mappingValuePara1Actual);
        //    mappingValuePara2.ShouldEqualTo(mappingValuePara2Actual);
        //    mappingPara1.ShouldEqualTo(mappingCallNamePara1Actual);
        //    mappingPara2.ShouldEqualTo(mappingCallNamePara2Actual);
        //}

        [TestMethod("B7-11")]
        [TestCategory("參數編輯(B7)")]
        public void TIEditor_EditVariableWithParameterTypeTIResult()
        {
            // Steps:
            // 1. Create a thread TI, add a result variable then save the TI, close it.
            //    1-1. Result variable showName and callName set to "newCondParam", DataType set to "Float", Edit Type set to "EditBox".
            //    1-2. Save the threadTI with name: ""
            // 2. Switch to management, activate the ThreadTI (Active set to true).
            // 3. Open a new TI window with type: TI, include the threadTI, edit on parameter: Result Parameters, string.
            // 4. Test Item Var Editor window showup, map the Result variable in threadTI to that in current TI.
            //    4-1. Click "Scan" to find the Result variable in threadTI, should showup in "New Parameter" column.
            //    4-2. Click "Ok" to confirm the mapping.
            // 5. Verify the threadTI Result parameter is mapped in the current TI.
            //    5-1. Check the new parameter is added into Result Variable datagrid.
            //    5-2. Check the new parameter's callName same as Parameter Value column in Test Command Parameter datagrid, on parameter: Result Parameters, string.

            // Step 1.
            TIName = "ThreadTIResVar";
            string ThreadTIResShowName = "newResParam";
            string ThreadTIResCallName = "newResParam";
            VariableDataType ThreadTIResDataType = VariableDataType.Float;
            PerformCloseTI();

            MenuSelect("Functions", "TI Editor");
            OpenNewTI(TestItemType.ThreadTI, TestItemRunType.UUT);
            CreateNewVariable2(VariableTabType.Result, ThreadTIResShowName, ThreadTIResCallName, ThreadTIResDataType);
            SaveAsNewTI(TIName);
            PerformCloseTI();

            // Step 2.
            TIExecuteAction(TIAction.SetTIActive, TIName);

            // Step 3.
            MenuSelect("Functions", "TI Editor");
            OpenNewTI(TestItemType.TI, TestItemRunType.UUT);
            AddCommandBy(TestCmdGroupType.Thread_TI, TIName);

            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);             // Select on the command
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[3,@Parameter Value]", ClickType.LeftClick);   // Select on the parameter

            // Step 4.
            IElement tiVarEdtWindow = PP5IDEWindow.PerformGetElement("/Window[Test Item Var Editor]");
            tiVarEdtWindow.PerformClick($"/ByName[Scan]", ClickType.LeftClick);
            tiVarEdtWindow.PerformClick($"/ByName[Ok]", ClickType.LeftClick);

            // Step 5.
            VariableTabNavi(VariableTabType.Result);
            PP5IDEWindow.PerformGetElement("/ByCell@RstGrid[1,@Show Name]").GetText().ShouldContain(ThreadTIResShowName);                      // Compare the parameter in condition variable
            PP5IDEWindow.PerformGetElement("/ByCell@RstGrid[1,@Call Name]").GetText().ShouldContain(ThreadTIResCallName);
            ThreadTIResDataType.GetDescription().ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByCell@RstGrid[1,@Data Type]").GetText());
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[3,@Parameter Value]").GetText().ShouldContain(ThreadTIResCallName);
        }

        [TestMethod("B7-12")]
        [TestCategory("參數編輯(B7)")]
        //B7-12
        public void TIEditor_EditVariableWithParameterTypeByte()
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.HexString, "SetHexStringElement");

            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);             // Select on the command
            PP5IDEWindow.PerformClick("/ByCell@ParameterGrid[1,@Parameter Value]", ClickType.LeftClick);   // Select on the parameter
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[cntRdoBtn]/ByName[Constant]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement("/ByClass[ScrollViewer]/ById[byteRdoBtn]/ByName[Byte]").Selected.ShouldBeTrue();

            // Input "ff" in the 1st parameter of this command: Element to be set, byte
            PP5IDEWindow.PerformInput("/ByCell@ParameterGrid[1,@Parameter Value]", InputType.SendContent, "ff");
            Press(Keys.Enter);

            // Check the Parameter in show as 0xff in TIContext
            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Parameters]").GetText().ShouldContain("0xff");
        }

        [TestMethod("B7-13")]
        [TestCategory("參數編輯(B7)")]
        [DataRow("TestPASS", typeof(object), DisplayName = "Verify Goto Command Label: \"TestPASS\"")]
        [DataRow("TestFAIL", typeof(object), DisplayName = "Verify Goto Command Label: \"TestFAIL\"")]
        //B7-13
        public void TIEditor_SetGotoCommandByLabel_CheckLabelName(string label, object dummy)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.System_Flow_Control, "Goto");

            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);             // Select on the command
            PP5IDEWindow.PerformClick("/ByCell@ParameterGrid[1,@Parameter Value]", ClickType.LeftClick);   // Select on the parameter

            PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[1,@Parameter Value]")
                        .SelectItem(label);

            PP5IDEWindow.PerformGetElement("/ByCell@PGGrid[1,@Parameters]").GetText().ShouldEqualTo(label);
        }

        [TestMethod("B7-14")]
        [TestCategory("參數編輯(B7)")]
        //B7-14
        public void TIEditor_SetSETCommandByLineInVector_CheckParameterIsCorrect()
        {
            // Switch to test item context window
            string vecCallName = "lineVec";
            string Voltage = "Voltage";
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.Arithmetic, "SET");
            CreateNewVariable1(VariableTabType.Condition, "", vecCallName, VariableDataType.LineInVector, VariableEditType.ComboBox);

            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);                                  // Select on the command
            PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[2,@Parameter Value]").SelectItem(vecCallName);      // Select on the parameter

            PP5IDEWindow.PerformClick($"/ByName[Vector Member]/ById[VectorListBox]/ByName[{Voltage}]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Vector Member,Ok]", ClickType.LeftClick);

            PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[2,@Parameter Value]").GetText().ShouldEqualTo($"{vecCallName}.{Voltage}");
        }

        [TestMethod("B7-15")]
        [TestCategory("參數編輯(B7)")]
        //B7-15
        public void TIEditor_SetCommandReadEVCAN_DBCData4ByDBCSignal_CheckParameterIsCorrect()
        {
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.CAN_Card, "ReadEVCAN_DBCData4");

            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);              // Select on the command
            PP5IDEWindow.PerformClick("/ByCell@ParameterGrid[3,@Parameter Value]", ClickType.LeftClick);    // Select on the parameter

            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[dbcSignalRdoBtn]/ByName[DBC Signal]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByCell@ParameterGrid[3,@Parameter Value]", ClickType.LeftClick);    // Select on the parameter again to open the dbc window

            //Logger.LogMessage($"DBC treeview element: {PP5IDEWindow.PerformGetElement("/ById[tvCluster]")}");

            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");
        }

        [TestMethod("B8-1")]
        [TestCategory("變數編輯(B8)")]
        //B8-1
        public void TIEditor_SetShowNameInConditionVariable_CheckShowNameIsSet()
        {
            string ShowName = "B8-1";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, ShowName);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);
            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Show Name").SendSingleKeys(ShowName);
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Show Name").GetText().ShouldEqualTo(ShowName);
        }

        [TestMethod("B8-2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(1, typeof(object), DisplayName = "Verify CallName is set properly (single variable)")]
        [DataRow(2, typeof(object), DisplayName = "Verify CallName is set properly (two variables)")]
        //B8-2
        public void TIEditor_SetCallNameInConditionVariable(int varCount, object dummy)
        {
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            for (int rowNo = 1; rowNo <= varCount; rowNo++)
            {
                string CallName = $"B8-2_{rowNo}";
                //varDataGrid.GetCellBy(rowNo, "Show Name").DoubleClick();
                //varDataGrid.GetCellBy(rowNo, "Call Name").SendSingleKeys(CallName);
                //Press(Keys.Enter);
                PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName);
                CallName.ShouldEqualTo(varDataGrid.GetCellBy(rowNo, "Call Name").GetText());
            }
        }

        [TestMethod("B8-2_1")]
        [TestCategory("變數編輯(B8)")]
        //B8-2_1
        public void TIEditor_SetCallNameInConditionVariable_CheckCallNameIsRepeated()
        {
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);
            PP5DataGrid varDataGrid = null;
            for (int rowNo = 1; rowNo <= 2; rowNo++)
            {
                string CallName = "B8-2_1";
                varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName);
                //varDataGrid.GetCellBy(rowNo, "Show Name").DoubleClick();
                //varDataGrid.GetCellBy(rowNo, "Call Name").SendSingleKeys(CallName);
                //Press(Keys.Enter);
            }
            
            string errorTooltipMsg = "CallName repeat";
            errorTooltipMsg.ShouldEqualTo(varDataGrid.PerformGetElement($"/ByCell[1,@Call Name]").GetToolTipMessage());
            errorTooltipMsg.ShouldEqualTo(varDataGrid.PerformGetElement($"/ByCell[2,@Call Name]").GetToolTipMessage());
        }

        [TestMethod("B8-3_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, typeof(object), DisplayName = "Verify DataType is \"Float\"")]
        [DataRow(VariableDataType.Integer, typeof(object), DisplayName = "Verify DataType is \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, typeof(object), DisplayName = "Verify DataType is \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, typeof(object), DisplayName = "Verify DataType is \"Short\"")]
        [DataRow(VariableDataType.String, typeof(object), DisplayName = "Verify DataType is \"String\"")]
        [DataRow(VariableDataType.Byte, typeof(object), DisplayName = "Verify DataType is \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, typeof(object), DisplayName = "Verify DataType is \"HexString\"")]
        [DataRow(VariableDataType.LineInVector, typeof(object), DisplayName = "Verify DataType is \"LineInVector\"")]
        [DataRow(VariableDataType.LoadVector, typeof(object), DisplayName = "Verify DataType is \"LoadVector\"")]
        [DataRow(VariableDataType.SpecVector, typeof(object), DisplayName = "Verify DataType is \"SpecVector\"")]
        [DataRow(VariableDataType.ExtMeasVector, typeof(object), DisplayName = "Verify DataType is \"ExtMeasVector\"")]
        [DataRow(VariableDataType.ACLoadVector, typeof(object), DisplayName = "Verify DataType is \"ACLoadVector\"")]
        [DataRow(VariableDataType.ACSpecVector, typeof(object), DisplayName = "Verify DataType is \"ACSpecVector\"")]
        [DataRow(VariableDataType.ConstantVector, typeof(object), DisplayName = "Verify DataType is \"ConstantVector\"")]
        [DataRow(VariableDataType.Double, typeof(object), DisplayName = "Verify DataType is \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, typeof(object), DisplayName = "Verify DataType is \"Long\"")]
        //B8-3_1
        public void TIEditor_SetDataTypeInConditionVariable_VerifyRegularDataTypes(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-3_1";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            varDataType.GetDescription().ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
        }

        [TestMethod("B8-3_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", typeof(object), DisplayName = "Verify DataType is \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", typeof(object), DisplayName = "Verify DataType is \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", typeof(object), DisplayName = "Verify DataType is \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", typeof(object), DisplayName = "Verify DataType is \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", typeof(object), DisplayName = "Verify DataType is \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", typeof(object), DisplayName = "Verify DataType is \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", typeof(object), DisplayName = "Verify DataType is \"HexStringArray\"")]
        //B8-3_2
        public void TIEditor_SetDataTypeInConditionVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, object dummy)
        {
            string CallName = "B8-3_2";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            string dataTypeShowName = string.Format("{0}[{1}]", varDataType.GetDescription().Replace("[]", ""), arrSize1);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
        }

        [TestMethod("B8-3_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-3_3
        public void TIEditor_SetDataTypeInConditionVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-3_3";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, arrSize1, arrSize2);

            string dataTypeShowName = string.Format("{0}[{1},{2}]", varDataType.GetDescription().Replace("[,]", ""), arrSize1, arrSize2);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
        }

        [TestMethod("B8-4")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, typeof(object), DisplayName = "Verify EditType is \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.ComboBox, typeof(object), DisplayName = "Verify EditType is \"ComboBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.External_Signal, typeof(object), DisplayName = "Verify EditType is \"External_Signal\"")]
        //B8-4
        public void TIEditor_SetEditTypeInConditionVariable(VariableDataType varDataType, VariableEditType varEditType, object dummy)
        {
            string CallName = "B8-4";
            IElement varDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            varEditType.ToString().ShouldEqualTo(varDataGrid.GetCellBy(1, "Edit Type").GetText());

            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);
        }

        [TestMethod("B8-5")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Integer\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Short, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Short\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Byte\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        //[DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        //[DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, VariableEditType.EditBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"HexString\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LineInVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"LineInVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.LoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"LoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.SpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"SpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ExtMeasVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ExtMeasVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACLoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ACLoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACSpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ACSpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ConstantVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ConstantVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Double\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Long\" variable with EditType \"EditBox\"")]
        //B8-5
        public void TIEditor_SetMinimumInConditionVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, bool canSetMinimum, object dummy)
        {
            string CallName = "B8-5";
            string minValue = "0";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            PP5DataGrid varDataGrid = CreateNewVariableWithMinValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, minValue);

            varDataGrid.RefreshSelectedCell();
            varDataGrid.SelectedCellInfo.SelectedCell.LeftClick();
            //varDataGrid.GetCellBy(1, "Min.").LeftClick();
            Cursor expectedCursor = canSetMinimum ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            Cursor currentCursor = DllHelper.GetCursor();
            expectedCursor.ShouldEqualTo(currentCursor);

            //minValue = canSetMinimum ? minValue : "";
            if (canSetMinimum)
            {
                //string minValue = "0";
                //varDataGrid.GetCellBy(1, "Min.").SendText(minValue);
                //Press(Keys.Enter);
                //minValue.ShouldEqualTo(varDataGrid.GetCellBy(1, "Min.").GetText());
                minValue.ShouldEqualTo(varDataGrid.SelectedCellInfo.SelectedCell.GetText());
            }
        }

        [TestMethod("B8-5_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Integer[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Double[L]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        //B8-5_1
        public void TIEditor_SetMinimumInConditionVariable_VerifyArrayDataTypes(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-5_1";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);0,0,0,0,0,0,

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Min.").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int sizeExpected = 640;
            string valuePattern = string.Format("{0}[{1}]", value, sizeExpected);
            IElement varDataGrid = CreateNewVariableWithMinValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, sizeExpected.ToString());
            sizeExpected.ShouldEqualTo(varDataGrid.GetCellBy(1, "Min.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-5_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"String[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.ByteArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.HexStringArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"HexString[]\" variable with EditType \"EditBox\"")]
        //B8-5_2
        public void TIEditor_SetMinimumInConditionVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, char value, object dummy)
        {
            string CallName = "B8-5_2";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Min.").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            string valuePattern = string.Format("{0}[{1}]", value, arrSize1);
            IElement varDataGrid = CreateNewVariableWithMinValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, arrSize1);
            int size = int.Parse(arrSize1);
            size.ShouldEqualTo(varDataGrid.GetCellBy(1, "Min.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-5_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Integer[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.Byte2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Byte[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.String2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"String[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.HexString2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"HexString[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Long[,]\" variable with EditType \"EditBox\"")]
        //B8-5_3
        public void TIEditor_SetMinimumInConditionVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-5_3";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Min.").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            string valuePattern = string.Format("{0}[{1},{2}]", value, arrSize1, arrSize2);
            IElement varDataGrid = CreateNewVariableWithMinValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, arrSize1, arrSize2);
            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            size.ShouldEqualTo(varDataGrid.GetCellBy(1, "Min.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-6")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Integer\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Short, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Short\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Byte\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        //[DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        //[DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.LineInVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"LineInVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.LoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"LoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.SpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"SpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ExtMeasVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ExtMeasVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACLoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ACLoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACSpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ACSpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ConstantVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ConstantVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Double\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Long\" variable with EditType \"EditBox\"")]
        //B8-6
        public void TIEditor_SetMaximumInConditionVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, bool canSetMaximum, object dummy)
        {
            string CallName = "B8-6";
            string maxValue = "100";
            PP5DataGrid varDataGrid = CreateNewVariableWithMaxValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, maxValue);

            if (canSetMaximum)
                maxValue.ShouldEqualTo(varDataGrid.GetCellBy(1, "Max.").GetText());

            //varDataGrid.RefreshSelectedCell();
            //varDataGrid.SelectedCellInfo.SelectedCell.LeftClick();
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Max.").LeftClick();
            //Cursor expectedCursor = canSetMaximum ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);
        }

        [TestMethod("B8-6_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, '9', typeof(object), DisplayName = "Verify Maximum can be set in \"Float[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, '9', typeof(object), DisplayName = "Verify Maximum can be set in \"Integer[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, '9', typeof(object), DisplayName = "Verify Maximum can be set in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, '9', typeof(object), DisplayName = "Verify Maximum can be set in \"Double[L]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, '0', VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        //B8-6_1
        public void TIEditor_SetMaximumInConditionVariable_VerifyArrayDataTypes(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-6_1";
            //PP5DataGrid varDataGrid = CreateNewVariableWithMaxValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, value);

            //varDataGrid.RefreshSelectedCell();
            //varDataGrid.SelectedCellInfo.SelectedCell.LeftClick();
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Max.").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int sizeExpected = 640;
            string valuePattern = string.Format("{0}[{1}]", value, sizeExpected);
            IElement varDataGrid = CreateNewVariableWithMaxValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, sizeExpected.ToString());
            sizeExpected.ShouldEqualTo(varDataGrid.GetCellBy(1, "Max.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-6_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"String[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.ByteArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //B8-6_2
        public void TIEditor_SetMaximumInConditionVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, char value, object dummy)
        {
            string CallName = "B8-6_2";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Max.").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int size = int.Parse(arrSize1);
            size.ShouldEqualTo(varDataGrid.GetCellBy(1, "Max.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-6_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Float[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Integer[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.Byte2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Byte[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.String2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"String[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Long[,]\" variable with EditType \"EditBox\"")]
        //B8-6_3
        public void TIEditor_SetMaximumInConditionVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-6_3";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Max.").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            string valuePattern = string.Format("{0}[{1},{2}]", value, arrSize1, arrSize2);
            IElement varDataGrid = CreateNewVariableWithMaxValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, arrSize1, arrSize2);
            size.ShouldEqualTo(varDataGrid.GetCellBy(1, "Max.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-6_4")]
        [DataRow(VariableDataType.HexString, VariableEditType.EditBox, "1", "1", '5', typeof(object), DisplayName = "Verify Maximum can not be set in \"HexString\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.HexStringArray, VariableEditType.EditBox, "5", "1", '5', typeof(object), DisplayName = "Verify Maximum can be set in \"HexString[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.HexString2DArray, VariableEditType.EditBox, "5", "5", '5', typeof(object), DisplayName = "Verify Maximum can be set in \"HexString[,]\" variable with EditType \"EditBox\"")]
        //B8-6_4
        public void TIEditor_SetMaximumInConditionVariable_VerifHexStringDataType(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-6_4";
            //IElement varDataGrid;
            //if (varDataType == VariableDataType.HexString)
            //    varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //else if (varDataType == VariableDataType.HexStringArray)
            //    varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1);
            //else
            //    varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //if (varDataType == VariableDataType.HexStringArray)
            //{
            //    PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //    PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);
            //}
            //else if (varDataType == VariableDataType.HexString2DArray)
            //{
            //    PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //    PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //    PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
            //}

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Max.").LeftClick();
            //varDataGrid.GetCellBy(1, "Max.").SendText(value.ToString());
            //Press(Keys.Enter);
            //varDataGrid.GetCellBy(1, "Max.").GetText().ShouldEqualTo(value.ToString());

            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            //string valuePattern;
            //if (varDataType == VariableDataType.HexString)
            //    valuePattern = string.Format("{0}", value);
            //else if (varDataType == VariableDataType.HexStringArray)
            //    valuePattern = string.Format("{0}[{1}]", value, arrSize1);
            //else
            //    valuePattern = string.Format("{0}[{1},{2}]", value, arrSize1, arrSize2);
            //string valuePattern = string.Format("{0}[{1},{2}]", value, arrSize1, arrSize2);
            IElement varDataGrid = CreateNewVariableWithMaxValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, value.ToString(), arrSize1, arrSize2);
            string DefaultSingleValue = new string('0', int.Parse(value.ToString()) * 2);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(1, "Default").GetText(), DefaultSingleValue).Count);
        }

        [TestMethod("B8-7")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Integer\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Short, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Short\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Byte\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Double\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Long\" variable with EditType \"EditBox\"")]
        //B8-7
        public void TIEditor_SetDefaultInConditionVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, object dummy)
        {
            string CallName = "B8-7";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            string defaultValue = "0";
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, defaultValue);
            //varDataGrid.GetCellBy(1, "Default").SendText("0");
            //Press(Keys.Enter);
            defaultValue.ShouldEqualTo(varDataGrid.GetCellValue(1, "Default"));
        }

        [TestMethod("B8-7_1_String")]
        [TestCategory("變數編輯(B8)")]
        //B8-7_1_String
        public void TIEditor_SetDefaultInConditionVariable_VerifyStringDataTypeWithExtSignal()
        {
            string CallName = "B8-7_1_String";
            VariableDataType varDataType = VariableDataType.String;
            VariableEditType varEditType = VariableEditType.External_Signal;
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //VariableDataType varDataType = VariableDataType.String;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            string defaultValue = varDataGrid.GetCellBy(1, "Default").GetText();
            string DefaultSingleValue = "PhoenixonDSP.DSPSensingOFF:(0xFF).DSPSensingOFF_Signal";
            DefaultSingleValue.ShouldEqualTo(defaultValue);
        }

        [TestMethod("B8-7_1_String1DArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-7_1_String1DArray
        public void TIEditor_SetDefaultInConditionVariable_VerifyString1DArrayDataTypeWithExtSignal()
        {
            string CallName = "B8-7_1_String1DArray";
            string arrSize1 = "5";
            VariableDataType varDataType = VariableDataType.StringArray;
            VariableEditType varEditType = VariableEditType.External_Signal;
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //VariableDataType varDataType = VariableDataType.StringArray;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            string defaultValue = varDataGrid.GetCellBy(1, "Default").GetText();
            string DefaultSingleValue = @"PhoenixonDSP\.DSPSensingOFF:\(0xFF\)\.DSPSensingOFF_Signal";
            int.Parse(arrSize1).ShouldEqualTo(Regex.Matches(defaultValue, DefaultSingleValue).Count);
        }

        [TestMethod("B8-7_2_String2DArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-7_2_String2DArray
        public void TIEditor_SetDefaultInConditionVariable_VerifyString2DArrayDataTypeWithExtSignal()
        {
            string CallName = "B8-7_2_String2DArray";
            string arrSize1 = "2";
            string arrSize2 = "2";
            VariableDataType varDataType = VariableDataType.String2DArray;
            VariableEditType varEditType = VariableEditType.External_Signal;
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //VariableDataType varDataType = VariableDataType.String2DArray;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            string defaultValue = varDataGrid.GetCellBy(1, "Default").GetText();
            string DefaultSingleValue = @"PhoenixonDSP\.DSPSensingOFF:\(0xFF\)\.DSPSensingOFF_Signal";
            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            size.ShouldEqualTo(Regex.Matches(defaultValue, DefaultSingleValue).Count);
        }

        [TestMethod("B8-7_2_StringUUTArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-7_2_StringUUTArray
        public void TIEditor_SetDefaultInConditionVariable_VerifyStringUUTArrayDataTypeWithExtSignal()
        {
            string CallName = "B8-7_2_StringUUTArray";
            VariableDataType varDataType = VariableDataType.StringArrayOfUUTMaxSize;
            VariableEditType varEditType = VariableEditType.External_Signal;
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //VariableDataType varDataType = VariableDataType.StringArrayOfUUTMaxSize;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            string defaultValue = varDataGrid.GetCellBy(1, "Default").GetText();
            string DefaultSingleValue = @"PhoenixonDSP\.DSPSensingOFF:\(0xFF\)\.DSPSensingOFF_Signal";
            int UUTSize = 640;
            UUTSize.ShouldEqualTo(Regex.Matches(defaultValue, DefaultSingleValue).Count);
        }

        [TestMethod("B8-7_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.LineInVector, typeof(object), DisplayName = "Verify Default can be set in \"LineInVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.LoadVector, typeof(object), DisplayName = "Verify Default can be set in \"LoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.SpecVector, typeof(object), DisplayName = "Verify Default can be set in \"SpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ExtMeasVector, typeof(object), DisplayName = "Verify Default can be set in \"ExtMeasVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACLoadVector, typeof(object), DisplayName = "Verify Default can be set in \"ACLoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACSpecVector, typeof(object), DisplayName = "Verify Default can be set in \"ACSpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ConstantVector, typeof(object), DisplayName = "Verify Default can be set in \"ConstantVector\" variable with EditType \"ComboBox\"")]
        //B8-7_2
        public void TIEditor_SetDefaultInConditionVariable_VerifyVectorDataTypes(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-7_2";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Default").LeftClick();

            //List<string> expectedValues = new List<string>();
            //string[] defaultValues;
            //PP5DataGrid VectorDataGrid = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement("/ById[VectorGrid]"));
            //VectorDataGrid.ScrollToSpecificColumn("Default");
            //while (!VectorDataGrid.GetCellBy(1, "Default").IsWithinScreen)
            //{
            //    MoveToElementAndRightClick(VectorDataGrid, MoveToElementOffsetStartingPoint.InnerBottomRight);
            //    PP5IDEWindow.PerformClick("/ByClass[ContextMenu]/ById[PageRight]/ByName[Page Right]", ClickType.LeftClick);
            //}
            //for (int i = 1; i <= VectorDataGrid.GetRowCount(); i++)
            //    expectedValues.Add(VectorDataGrid.GetCellBy(i, "Default").GetText());
            //PP5IDEWindow.PerformClick("/ByName[Vector Editor,Ok]", ClickType.LeftClick);
            //defaultValues = varDataGrid.GetCellBy(1, "Default").GetText().Split('@');
            
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, VariableEditType.ComboBox, "vector");
            string expectedDefault = StaticData.currentDataGrid.cellValueCache;
            string actualDefault = varDataGrid.GetCellBy(1, "Default").GetText();
            expectedDefault.ShouldEqualTo(actualDefault);

            //expectedValues.Count.ShouldEqualTo(defaultValues.Length);
            //for (int i = 0; i < expectedValues.Count; i++)
            //{
            //    expectedValues[i].ShouldEqualTo(defaultValues[i]);
            //}
        }

        [TestMethod("B8-7_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Float[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Integer[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Double[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"String[L]\" variable with EditType \"EditBox\"")]
        //B8-7_3
        public void TIEditor_SetDefaultInConditionVariable_VerifyUUTSizeArrayDataTypes(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-7_3";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Default").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int size = 640;
            string valuePattern = string.Format("{0}[{1}]", value, size);
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, size.ToString());
            size.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-7_4")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"String[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.ByteArray, VariableEditType.EditBox, "10", "00", typeof(object), DisplayName = "Verify Default can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //B8-7_4
        public void TIEditor_SetDefaultInConditionVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string value, object dummy)
        {
            string CallName = "B8-7_4";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Default").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value);
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            //int size = int.Parse(arrSize1);
            //size.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText().Count(c => c.Equals(value)));
            string valuePattern = string.Format("{0}[{1}]", value, arrSize1);
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, arrSize1);
            foreach (var defaultValue in varDataGrid.GetCellBy(1, "Default").GetText().Split(','))
                defaultValue.ShouldEqualTo(value);
        }

        [TestMethod("B8-7_5")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Float[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer2DArray, VariableEditType.EditBox, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Integer[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte2DArray, VariableEditType.EditBox, "10", "10", "00", typeof(object), DisplayName = "Verify Default can be set in \"Byte[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String2DArray, VariableEditType.EditBox, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"String[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long2DArray, VariableEditType.EditBox, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Long[,]\" variable with EditType \"EditBox\"")]
        //B8-7_5
        public void TIEditor_SetDefaultInConditionVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, string value, object dummy)
        {
            string CallName = "B8-7_5";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Default").LeftClick();
            //PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value);
            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            //int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            //size.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText().Count(c => c.Equals(value)));
            string valuePattern = string.Format("{0}[{1},{2}]", value, arrSize1, arrSize2);
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, arrSize1, arrSize2);
            foreach (var defaultValuesRank2 in varDataGrid.GetCellBy(1, "Default").GetText().Split(';'))
                foreach (var defaultValue in defaultValuesRank2.Split(','))
                    defaultValue.ShouldEqualTo(value);
        }

        [TestMethod("B8-7_6_HexString")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexString, VariableEditType.EditBox, 'f', typeof(object), DisplayName = "Verify Default can not be set in \"HexString\" variable with EditType \"EditBox\"")]
        //B8-7_6_HexString
        public void TIEditor_SetDefaultInConditionVariable_VerifyHexStringDataTypeWithEditBox(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-7_6_HexString";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //string valuePattern = string.Format("{0}[{1},{2}]", value, arrSize1, arrSize2);
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, new string(value, 2));

            //varDataGrid.GetCellBy(1, "Default").LeftClick();
            //PP5IDEWindow.PerformInput("/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            //PP5IDEWindow.PerformInput("/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            //PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            //int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            int maxValue = int.Parse(varDataGrid.GetCellValue(1, "Max."));
            string DefaultSingleHexValue = new string(value, maxValue * 2);
            DefaultSingleHexValue.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText());
        }

        [TestMethod("B8-7_6_HexString1DArray")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexStringArray, VariableEditType.EditBox, "5", 'f', typeof(object), DisplayName = "Verify Default can be set in \"HexString[]\" variable with EditType \"EditBox\"")]
        //B8-7_6_HexString1DArray
        public void TIEditor_SetDefaultInConditionVariable_VerifyHexString1DArrayWithEditBox(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, char value, object dummy)
        {
            string CallName = "B8-7_6_HexString1DArray";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Default").LeftClick();
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            //PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            //PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            //PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            //int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, new string(value, 2), arrSize1);
            int size = int.Parse(arrSize1);
            int maxValue = int.Parse(varDataGrid.GetCellValue(1, "Max."));
            string DefaultSingleHexValue = new string(value, 2 * maxValue);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellValue(1, "Default"), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-7_6_HexString2DArray")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexString2DArray, VariableEditType.EditBox, "5", "5", 'f', typeof(object), DisplayName = "Verify Default can be set in \"HexString[,]\" variable with EditType \"EditBox\"")]
        //B8-7_6_HexString2DArray
        public void TIEditor_SetDefaultInConditionVariable_VerifyHexString2DArrayWithEditBox(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-7_6_HexString2DArray";
            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Default").LeftClick();
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            //PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            //PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            //PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            //PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            //PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, new string(value, 2), arrSize1, arrSize2);
            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            int maxValue = int.Parse(varDataGrid.GetCellValue(1, "Max."));
            string DefaultSingleHexValue = new string(value, 2 * maxValue);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellValue(1, "Default"), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-8")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Double\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set from \".0~.6\" in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set from \".0~.6\" in \"Double[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set from \".0~.6\" in \"Float[L]\" variable with EditType \"EditBox\"")]
        //B8-8
        public void TIEditor_SetFormatInConditionVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, object dummy)
        {
            string CallName = "B8-8";
            VariableDecimalPlaces[] formatArr = Enum.GetValues(typeof(VariableDecimalPlaces)).Cast<VariableDecimalPlaces>().ToArray();
            CreateNewVariableWithFormat(VariableTabType.Condition, "", CallName, varDataType, varEditType, formatArr);

            //IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);

            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            //foreach (string fm in formatStr.Split(','))
            //{
            //    varDataGrid.GetCellBy(1, "Format").SendText(fm);
            //    Press(Keys.Enter);

            //    fm.ShouldEqualTo(varDataGrid.GetCellBy(1, "Format").GetText());
            //}
        }

        [TestMethod("B8-8_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Double[]\" variable with EditType \"EditBox\"")]
        //B8-8_1
        public void TIEditor_SetFormatInConditionVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string formatStr, object dummy)
        {
            string CallName = "B8-8_1";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            foreach (string fm in formatStr.Split(','))
            {
                varDataGrid.GetCellBy(1, "Format").SendText(fm);
                Press(Keys.Enter);

                fm.ShouldEqualTo(varDataGrid.GetCellBy(1, "Format").GetText());
            }
        }

        [TestMethod("B8-8_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "2", "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "2", "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Float[,]\" variable with EditType \"EditBox\"")]
        //B8-8_2
        public void TIEditor_SetFormatInConditionVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, string formatStr, object dummy)
        {
            string CallName = "B8-8_2";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            foreach (string fm in formatStr.Split(','))
            {
                varDataGrid.GetCellBy(1, "Format").SendText(fm);
                Press(Keys.Enter);

                fm.ShouldEqualTo(varDataGrid.GetCellBy(1, "Format").GetText());
            }
        }

        [TestMethod("B8-9")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Short, Int16.MaxValue, "int16Max", typeof(object), DisplayName = "Verify enum value can be set with \"int16Max\" of datatype \"Short\"")]
        [DataRow(VariableDataType.Short, Int16.MinValue, "int16Min", typeof(object), DisplayName = "Verify enum value can be set with \"int16Min\" of datatype \"Short\"")]
        [DataRow(VariableDataType.Integer, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Verify enum value can be set with \"int32Max\" of datatype \"Integer\"")]
        [DataRow(VariableDataType.Integer, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Verify enum value can be set with \"int32Min\" of datatype \"Integer\"")]
        [DataRow(VariableDataType.Long, Int64.MaxValue, "int64Max", typeof(object), DisplayName = "Verify enum value can be set with \"int64Max\" of datatype \"Long\"")]
        [DataRow(VariableDataType.Long, Int64.MinValue, "int64Min", typeof(object), DisplayName = "Verify enum value can be set with \"int64Min\" of datatype \"Long\"")]

        [DataRow(VariableDataType.Float, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMax\" of datatype \"Float\"")]                            // Actual float.MaxValue is 3.40282347E+38f
        [DataRow(VariableDataType.Float, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMin\" of datatype\"Float\"")]                            // Actual float.MinValue is -3.40282347E+38f
        [DataRow(VariableDataType.FloatPercentage, "3.40282356779E+38", "Float(%)Max", typeof(object), DisplayName = "Verify enum value can be set with \"Float(%)Max\" of datatype \"FloatPercentage\"")]  // Actual float.MaxValue is 3.40282347E+38f
        [DataRow(VariableDataType.FloatPercentage, "-3.40282356779E+38", "Float(%)Min", typeof(object), DisplayName = "Verify enum value can be set with \"Float(%)Min\" of datatype \"FloatPercentage\"")] // Actual float.MinValue is -3.40282347E+38f
        [DataRow(VariableDataType.Double, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMax\" of datatype \"Double\"")]                // Actual double.MaxValue is 1.7976931348623157E+308
        [DataRow(VariableDataType.Double, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMin\" of datatype \"Double\"")]               // Actual double.MinValue is -1.7976931348623157E+308
        
        [DataRow(VariableDataType.Byte, "ff", "ByteMax", typeof(object), DisplayName = "Verify enum value can be set with \"ByteMax\" of datatype \"Byte\"")]
        [DataRow(VariableDataType.Byte, "00", "ByteMin", typeof(object), DisplayName = "Verify enum value can be set with \"ByteMin\" of datatype \"Byte\"")]

        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Verify enum value can be set with \"int32Max\" of datatype \"Integer[L]\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Verify enum value can be set with \"int32Min\" of datatype \"Integer[L]\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMax\" of datatype \"Float[L]\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMin\" of datatype \"Float[L]\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMax\" of datatype \"Float(%)[L]\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMin\" of datatype \"Float(%)[L]\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMax\" of datatype \"Double[L]\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMin\" of datatype \"Double[L]\"")]
        //B8-9
        public void TIEditor_SetEnumItemInConditionVariable_VerifyRegularDataTypesWithValidValue(VariableDataType varDataType, object enumValue, string enumName, object dummy)
        {
            string CallName = "B8-9";
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type")
            //           .SelectItem(varDataType.GetDescription());
            ////Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type")
            //           .SelectItem(VariableEditType.ComboBox.ToString());
            ////Press(Keys.Enter);

            AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue.ToString());

            string enumStringActual = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Enum Item").GetText();
            string enumStringExpected = string.Concat(enumName, "=", enumValue);
            enumStringExpected.ShouldEqualTo(enumStringActual);
        }

        [TestMethod("B8-9_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.String, 'a', 1024, "StringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"StringWithMaxLength(1024)\" of datatype \"String\"")]
        [DataRow(VariableDataType.HexString, 'f', 2048, "HexStringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"HexStringWithMaxLength(2048)\" of datatype \"HexString\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, 'a', 1024, "StringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"StringWithMaxLength(1024)\" of datatype \"String[L]\"")]
        //B8-9_1
        public void TIEditor_SetEnumItemInConditionVariable_VerifyStringDataTypesWithValidValue(VariableDataType varDataType, char enumValueChar, int length, string enumName, object dummy)
        {
            string CallName = "B8-9_1";
            string enumValue = new string(enumValueChar, length);
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type")
            //           .SelectItem(varDataType.GetDescription());
            ////Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type")
            //           .SelectItem(VariableEditType.ComboBox.ToString());
            ////Press(Keys.Enter);

            AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue);

            string enumStringActual = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Enum Item").GetText();
            string enumStringExpected = string.Concat(enumName, "=", enumValue);
            enumStringExpected.ShouldEqualTo(enumStringActual);
        }

        [TestMethod("B8-10")]
        [TestCategory("變數編輯(B8)")]
        //[DataRow(VariableDataType.String, 'a', 1024, "StringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"StringWithMaxLength(1024)\" of datatype \"String\"")]
        //[DataRow(VariableDataType.HexString, 'f', 2048, "HexStringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"HexStringWithMaxLength(2048)\" of datatype \"HexString\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, 'a', 1024, "StringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"StringWithMaxLength(1024)\" of datatype \"String[L]\"")]
        //B8-10
        public void TIEditor_SetEnumItemInConditionVariable_CheckValueIsInvalidWithSameEnumName()
        {
            string CallName = "B8-10";
            string enumValue = "0";
            string enumName = "a";
            VariableDataType varDataType = VariableDataType.String;
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Condition);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Condition);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type")
            //           .SelectItem(VariableDataType.String.GetDescription());
            ////Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type")
            //           .SelectItem(VariableEditType.ComboBox.ToString());
            ////Press(Keys.Enter);

            bool isAdded = true;
            for (int i = 0; i < 2; i++)
            {
                isAdded &= AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue);
            }

            if (!isAdded)
            {
                string errorMsg = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Creater]/Edit[0]").GetToolTipMessage();
                string errorMsgExpected = "EnumItemName is duplicated";
                errorMsg.ShouldNotBeNull();
                errorMsgExpected.ShouldEqualTo(errorMsg);
                PP5IDEWindow.PerformGetElement("/ByName[Enum Item Creater,Ok]").Enabled.ShouldBeFalse();
            }

            // Close the enum item creator/editor window
            PP5IDEWindow.PerformClick("/ByName[Enum Item Creater,Cancel]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Enum Item Editor,Cancel]", ClickType.LeftClick);
        }

        [TestMethod("B8-11")]
        [TestCategory("變數編輯(B8)")]
        //B8-11
        public void TIEditor_SetShowNameInResultVariable_CheckShowNameIsSet()
        {
            string ShowName = "B8-11";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, ShowName);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);
            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Show Name").SendSingleKeys(ShowName);
            //Press(Keys.Enter);

            ShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Show Name").GetText());
        }

        [TestMethod("B8-12_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(1, typeof(object), DisplayName = "Verify CallName is set properly (single variable)")]
        [DataRow(2, typeof(object), DisplayName = "Verify CallName is set properly (two variables)")]
        //B8-12_1
        public void TIEditor_SetCallNameInResultVariable(int varCount, object dummy)
        {
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);
            PP5DataGrid varDataGrid = null;
            for (int rowNo = 1; rowNo <= varCount; rowNo++)
            {
                string CallName = $"B8-12_{rowNo}";
                //varDataGrid.GetCellBy(rowNo, "Show Name").DoubleClick();
                //varDataGrid.GetCellBy(rowNo, "Call Name").SendSingleKeys(CallName);
                //Press(Keys.Enter);
                varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName);
                CallName.ShouldEqualTo(varDataGrid.GetCellBy(rowNo, "Call Name").GetText());
            }
        }

        [TestMethod("B8-12_2")]
        [TestCategory("變數編輯(B8)")]
        //B8-12_2
        public void TIEditor_SetCallNameInResultVariable_CheckCallNameIsRepeated()
        {
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);
            PP5DataGrid varDataGrid = null;
            for (int rowNo = 1; rowNo <= 2; rowNo++)
            {
                string CallName = "B8-12_2";
                varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName);
                //varDataGrid.GetCellBy(rowNo, "Show Name").DoubleClick();
                //varDataGrid.GetCellBy(rowNo, "Call Name").SendSingleKeys(CallName);
                //Press(Keys.Enter);
            }

            string errorTooltipMsg = "CallName repeat";
            errorTooltipMsg.ShouldEqualTo(varDataGrid.PerformGetElement($"/ByCell[1,@Call Name]").GetToolTipMessage());
            errorTooltipMsg.ShouldEqualTo(varDataGrid.PerformGetElement($"/ByCell[2,@Call Name]").GetToolTipMessage());
        }

        [TestMethod("B8-13_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, typeof(object), DisplayName = "Verify DataType is \"Float\"")]
        [DataRow(VariableDataType.Integer, typeof(object), DisplayName = "Verify DataType is \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, typeof(object), DisplayName = "Verify DataType is \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, typeof(object), DisplayName = "Verify DataType is \"Short\"")]
        [DataRow(VariableDataType.String, typeof(object), DisplayName = "Verify DataType is \"String\"")]
        [DataRow(VariableDataType.Byte, typeof(object), DisplayName = "Verify DataType is \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, typeof(object), DisplayName = "Verify DataType is \"HexString\"")]
        [DataRow(VariableDataType.Chart, typeof(object), DisplayName = "Verify DataType is \"Chart\"")]
        [DataRow(VariableDataType.Picture, typeof(object), DisplayName = "Verify DataType is \"Picture\"")]
        [DataRow(VariableDataType.Double, typeof(object), DisplayName = "Verify DataType is \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, typeof(object), DisplayName = "Verify DataType is \"Long\"")]
        //B8-13_1
        public void TIEditor_SetDataTypeInResultVariable_VerifyRegularDataTypes(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-13_1";
            PP5DataGrid varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            varDataType.GetDescription().ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
        }

        [TestMethod("B8-13_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", typeof(object), DisplayName = "Verify DataType is \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", typeof(object), DisplayName = "Verify DataType is \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", typeof(object), DisplayName = "Verify DataType is \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", typeof(object), DisplayName = "Verify DataType is \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", typeof(object), DisplayName = "Verify DataType is \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", typeof(object), DisplayName = "Verify DataType is \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", typeof(object), DisplayName = "Verify DataType is \"HexStringArray\"")]
        //B8-13_2
        public void TIEditor_SetDataTypeInResultVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, object dummy)
        {
            string CallName = "B8-13_2";
            PP5DataGrid varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            string dataTypeShowName = string.Format("{0}[{1}]", varDataType.GetDescription().Replace("[]", ""), arrSize1);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
        }

        [TestMethod("B8-13_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-13_3
        public void TIEditor_SetDataTypeInResultVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-13_3";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            string dataTypeShowName = string.Format("{0}[{1},{2}]", varDataType.GetDescription().Replace("[,]", ""), arrSize1, arrSize2);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
        }

        [TestMethod("B8-14_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Float\"")]
        [DataRow(VariableDataType.Integer, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Short\"")]
        [DataRow(VariableDataType.String, false, typeof(object), DisplayName = "Verify MinimumSpec can not be set from condition variable of DataType \"String\"")]
        [DataRow(VariableDataType.Byte, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, false, typeof(object), DisplayName = "Verify MinimumSpec can not be set from condition variable of DataType \"HexString\"")]
        [DataRow(VariableDataType.Chart, false, typeof(object), DisplayName = "Verify MinimumSpec can not be set from condition variable of DataType \"Chart\"")]
        [DataRow(VariableDataType.Picture, false, typeof(object), DisplayName = "Verify MinimumSpec can not be set from condition variable of DataType \"Picture\"")]
        [DataRow(VariableDataType.Double, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, false, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Long\"")]
        //B8-14_1
        public void TIEditor_SetMinimumSpecInResultVariable_VerifyRegularDataTypes(VariableDataType varDataType, bool canSetMinimumSpec, object dummy)
        {
            string CallName = "B8-14_1";
            CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);     // Add condition variable
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType);

            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "MinimumSpec").LeftClick();
            //Cursor expectedCursor = canSetMinimumSpec ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);

            if (canSetMinimumSpec)
            {
                varDataGrid.GetCellBy(1, "MinimumSpec").SelectItem(CallName + "cond");
                (CallName + "cond").ShouldEqualTo(varDataGrid.GetCellBy(1, "MinimumSpec").GetText());
            }
        }

        [TestMethod("B8-14_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", false, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", false, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"HexStringArray\"")]
        //B8-14_2
        public void TIEditor_SetMinimumSpecInResultVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, bool canSetMinimumSpec, object dummy)
        {
            string CallName = "B8-14_2";
            CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);     // Add condition variable
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //// Add condition variable
            //CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "MinimumSpec").LeftClick();
            //Cursor expectedCursor = canSetMinimumSpec ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);

            if (canSetMinimumSpec)
            {
                varDataGrid.GetCellBy(1, "MinimumSpec").SelectItem(CallName + "cond");
                (CallName + "cond").ShouldEqualTo(varDataGrid.GetCellBy(1, "MinimumSpec").GetText());
            }
        }

        [TestMethod("B8-14_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", false, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", false, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MinimumSpec can be set from condition variable of DataType \"Long2DArray\"")]
        //B8-14_3
        public void TIEditor_SetMinimumSpecInResultVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, bool canSetMinimumSpec, object dummy)
        {
            string CallName = "B8-14_3";
            CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);     // Add condition variable
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //// Add condition variable
            //CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "MinimumSpec").LeftClick();
            //Cursor expectedCursor = canSetMinimumSpec ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);

            if (canSetMinimumSpec)
            {
                varDataGrid.GetCellBy(1, "MinimumSpec").SelectItem(CallName + "cond");
                (CallName + "cond").ShouldEqualTo(varDataGrid.GetCellBy(1, "MinimumSpec").GetText());
            }
        }

        [TestMethod("B8-15_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Float\"")]
        [DataRow(VariableDataType.Integer, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Short\"")]
        [DataRow(VariableDataType.String, false, typeof(object), DisplayName = "Verify Minimum DefectCode can not be set from condition variable of DataType \"String\"")]
        [DataRow(VariableDataType.Byte, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, false, typeof(object), DisplayName = "Verify Minimum DefectCode can not be set from condition variable of DataType \"HexString\"")]
        [DataRow(VariableDataType.Chart, false, typeof(object), DisplayName = "Verify Minimum DefectCode can not be set from condition variable of DataType \"Chart\"")]
        [DataRow(VariableDataType.Picture, false, typeof(object), DisplayName = "Verify Minimum DefectCode can not be set from condition variable of DataType \"Picture\"")]
        [DataRow(VariableDataType.Double, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, false, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Long\"")]
        //B8-15_1
        public void TIEditor_SetMinimumDefectCodeInResultVariable_VerifyRegularDataTypes(VariableDataType varDataType, bool canSetMinimumDefectCode, object dummy)
        {
            string CallName = "B8-15_1";
            
            int defectCode = 1;
            string desc = "df";
            int customerDefectCode = 1;
            AddDefectCode(defectCode, desc, customerDefectCode);        // Add defect code

            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, 6/*Defect Code*/).LeftClick();
            //Cursor expectedCursor = canSetMinimumDefectCode ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);
            //varDataGrid.GetCellBy(1, 6/*Defect Code*/).LeftClick();

            if (canSetMinimumDefectCode)
            {
                varDataGrid.GetCellBy(1, 6/*Defect Code*/).SelectItem(defectCode.ToString());
                defectCode.ToString().ShouldEqualTo(varDataGrid.GetCellBy(1, 6/*Defect Code*/).GetText());
            }
        }

        [TestMethod("B8-15_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", false, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", false, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"HexStringArray\"")]
        //B8-15_2
        public void TIEditor_SetMinimumDefectCodeInResultVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, bool canSetMinimumDefectCode, object dummy)
        {
            string CallName = "B8-15_2";
            
            int defectCode = 1;
            string desc = "df";
            int customerDefectCode = 1;
            AddDefectCode(defectCode, desc, customerDefectCode);        // Add defect code

            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, 6/*Defect Code*/).LeftClick();
            Cursor expectedCursor = canSetMinimumDefectCode ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            Cursor currentCursor = DllHelper.GetCursor();
            expectedCursor.ShouldEqualTo(currentCursor);
            varDataGrid.GetCellBy(1, 6/*Defect Code*/).LeftClick();

            if (canSetMinimumDefectCode)
            {
                varDataGrid.GetCellBy(1, 6/*Defect Code*/).SelectItem(CallName);
                CallName.ShouldEqualTo(varDataGrid.GetCellBy(1, 6/*Defect Code*/).GetText());
            }
        }

        [TestMethod("B8-15_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", false, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", false, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Minimum DefectCode can be set from condition variable of DataType \"Long2DArray\"")]
        //B8-15_3
        public void TIEditor_SetMinimumDefectCodeInResultVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, bool canSetMinimumDefectCode, object dummy)
        {
            string CallName = "B8-15_3";
            
            int defectCode = 1;
            string desc = "df";
            int customerDefectCode = 1;
            AddDefectCode(defectCode, desc, customerDefectCode);        // Add defect code

            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, 6/*Defect Code*/).LeftClick();
            //Cursor expectedCursor = canSetMinimumDefectCode ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);
            //varDataGrid.GetCellBy(1, 6/*Defect Code*/).LeftClick();

            if (canSetMinimumDefectCode)
            {
                varDataGrid.GetCellBy(1, 6/*Defect Code*/).SelectItem(CallName);
                CallName.ShouldEqualTo(varDataGrid.GetCellBy(1, 6/*Defect Code*/).GetText());
            }
        }

        [TestMethod("B8-16_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Float\"")]
        [DataRow(VariableDataType.Integer, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Short\"")]
        [DataRow(VariableDataType.String, false, typeof(object), DisplayName = "Verify MaximumSpec can not be set from condition variable of DataType \"String\"")]
        [DataRow(VariableDataType.Byte, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, false, typeof(object), DisplayName = "Verify MaximumSpec can not be set from condition variable of DataType \"HexString\"")]
        [DataRow(VariableDataType.Chart, false, typeof(object), DisplayName = "Verify MaximumSpec can not be set from condition variable of DataType \"Chart\"")]
        [DataRow(VariableDataType.Picture, false, typeof(object), DisplayName = "Verify MaximumSpec can not be set from condition variable of DataType \"Picture\"")]
        [DataRow(VariableDataType.Double, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, false, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Long\"")]
        //B8-16_1
        public void TIEditor_SetMaximumSpecInResultVariable_VerifyRegularDataTypes(VariableDataType varDataType, bool canSetMaximumSpec, object dummy)
        {
            string CallName = "B8-16_1";
            CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);     // Add condition variable
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "MaximumSpec").LeftClick();
            //Cursor expectedCursor = canSetMaximumSpec ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);

            if (canSetMaximumSpec)
            {
                varDataGrid.GetCellBy(1, "MaximumSpec").SelectItem(CallName + "cond");
                (CallName + "cond").ShouldEqualTo(varDataGrid.GetCellBy(1, "MaximumSpec").GetText());
            }
        }

        [TestMethod("B8-16_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", false, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", false, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"HexStringArray\"")]
        //B8-16_2
        public void TIEditor_SetMaximumSpecInResultVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, bool canSetMaximumSpec, object dummy)
        {
            string CallName = "B8-16_2";
            CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);     // Add condition variable
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1);

            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "MaximumSpec").LeftClick();
            //Cursor expectedCursor = canSetMaximumSpec ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);

            if (canSetMaximumSpec)
            {
                varDataGrid.GetCellBy(1, "MaximumSpec").SelectItem(CallName + "cond");
                (CallName + "cond").ShouldEqualTo(varDataGrid.GetCellBy(1, "MaximumSpec").GetText());
            }
        }

        [TestMethod("B8-16_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", false, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", false, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", true, typeof(object), DisplayName = "Verify MaximumSpec can be set from condition variable of DataType \"Long2DArray\"")]
        //B8-16_3
        public void TIEditor_SetMaximumSpecInResultVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, bool canSetMaximumSpec, object dummy)
        {
            string CallName = "B8-16_3";
            CreateNewVariable1(VariableTabType.Condition, CallName + "cond", CallName + "cond", varDataType, VariableEditType.EditBox);     // Add condition variable
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "MaximumSpec").LeftClick();
            //Cursor expectedCursor = canSetMaximumSpec ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);

            if (canSetMaximumSpec)
            {
                varDataGrid.GetCellBy(1, "MaximumSpec").SelectItem(CallName);
                (CallName + "cond").ShouldEqualTo(varDataGrid.GetCellBy(1, "MaximumSpec").GetText());
            }
        }

        [TestMethod("B8-17_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Float\"")]
        [DataRow(VariableDataType.Integer, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Short\"")]
        [DataRow(VariableDataType.String, false, typeof(object), DisplayName = "Verify Maximum DefectCode can not be set from condition variable of DataType \"String\"")]
        [DataRow(VariableDataType.Byte, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, false, typeof(object), DisplayName = "Verify Maximum DefectCode can not be set from condition variable of DataType \"HexString\"")]
        [DataRow(VariableDataType.Chart, false, typeof(object), DisplayName = "Verify Maximum DefectCode can not be set from condition variable of DataType \"Chart\"")]
        [DataRow(VariableDataType.Picture, false, typeof(object), DisplayName = "Verify Maximum DefectCode can not be set from condition variable of DataType \"Picture\"")]
        [DataRow(VariableDataType.Double, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, false, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Long\"")]
        //B8-17_1
        public void TIEditor_SetMaximumDefectCodeInResultVariable_VerifyRegularDataTypes(VariableDataType varDataType, bool canSetMaximumDefectCode, object dummy)
        {
            string CallName = "B8-17_1";
            
            int defectCode = 1;
            string desc = "df";
            int customerDefectCode = 1;
            AddDefectCode(defectCode, desc, customerDefectCode);    // Add defect code

            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, 8/*Defect Code*/).LeftClick();
            //Cursor expectedCursor = canSetMaximumDefectCode ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);
            //varDataGrid.GetCellBy(1, 8/*Defect Code*/).LeftClick();

            if (canSetMaximumDefectCode)
            {
                varDataGrid.GetCellBy(1, "Defect Code").SelectItem(CallName);
                CallName.ShouldEqualTo(varDataGrid.GetCellBy(1, 8/*Defect Code*/).GetText());
            }
        }

        [TestMethod("B8-17_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", false, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", false, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"HexStringArray\"")]
        //B8-17_2
        public void TIEditor_SetMaximumDefectCodeInResultVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, bool canSetMaximumDefectCode, object dummy)
        {
            string CallName = "B8-17_2";
            
            int defectCode = 1;
            string desc = "df";
            int customerDefectCode = 1;
            AddDefectCode(defectCode, desc, customerDefectCode);        // Add defect code
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, 8/*Defect Code*/).LeftClick();
            //Cursor expectedCursor = canSetMaximumDefectCode ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);
            //varDataGrid.GetCellBy(1, 8/*Defect Code*/).LeftClick();

            if (canSetMaximumDefectCode)
            {
                varDataGrid.GetCellBy(1, "Defect Code").SelectItem(CallName);
                CallName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Defect Code").GetText());
            }
        }

        [TestMethod("B8-17_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", false, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", false, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", true, typeof(object), DisplayName = "Verify Maximum DefectCode can be set from condition variable of DataType \"Long2DArray\"")]
        //B8-17_3
        public void TIEditor_SetMaximumDefectCodeInResultVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, bool canSetMaximumDefectCode, object dummy)
        {
            string CallName = "B8-17_3";
            
            int defectCode = 1;
            string desc = "df";
            int customerDefectCode = 1;
            AddDefectCode(defectCode, desc, customerDefectCode);        // Add defect code
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Result);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Result);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Defect Code").LeftClick();
            //Cursor expectedCursor = canSetMaximumDefectCode ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            //Cursor currentCursor = DllHelper.GetCursor();
            //expectedCursor.ShouldEqualTo(currentCursor);
            //varDataGrid.GetCellBy(1, "Defect Code").LeftClick();

            if (canSetMaximumDefectCode)
            {
                varDataGrid.GetCellBy(1, "Defect Code").SelectItem(CallName);
                CallName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Defect Code").GetText());
            }
        }

        [TestMethod("B8-18")]
        [TestCategory("變數編輯(B8)")]
        //B8-18
        public void TIEditor_SetShowNameInTempVariable_CheckShowNameIsSet()
        {
            string ShowName = "B8-18";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, ShowName);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);
            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Show Name").SelectItem(ShowName);

            ShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Show Name").GetText());
        }

        [TestMethod("B8-19_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(1, typeof(object), DisplayName = "Verify CallName is set properly (single variable)")]
        [DataRow(2, typeof(object), DisplayName = "Verify CallName is set properly (two variables)")]
        //B8-19_1
        public void TIEditor_SetCallNameInTempVariable(int varCount, object dummy)
        {
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            IElement varDataGrid = null;
            for (int rowNo = 1; rowNo <= varCount; rowNo++)
            {
                string CallName = $"B8-12_{rowNo}";
                varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName);
                //varDataGrid.GetCellBy(rowNo, "Show Name").DoubleClick();
                //varDataGrid.GetCellBy(rowNo, "Call Name").SendSingleKeys(CallName);
                //Press(Keys.Enter);

                CallName.ShouldEqualTo(varDataGrid.GetCellBy(rowNo, "Call Name").GetText());
            }
        }

        [TestMethod("B8-19_2")]
        [TestCategory("變數編輯(B8)")]
        //B8-19_2
        public void TIEditor_SetCallNameInTempVariable_CheckCallNameIsRepeated()
        {
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);
            string CallName = "B8-19_2";
            IElement varDataGrid = null;
            for (int rowNo = 1; rowNo <= 2; rowNo++)
            {
                varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName);
                //varDataGrid.GetCellBy(rowNo, "Show Name").DoubleClick();
                //varDataGrid.GetCellBy(rowNo, "Call Name").SendSingleKeys(CallName);
                //Press(Keys.Enter);
            }

            string errorTooltipMsg = "CallName repeat";
            errorTooltipMsg.ShouldEqualTo(varDataGrid.PerformGetElement($"/ByCell[1,@Call Name]").GetToolTipMessage());
            errorTooltipMsg.ShouldEqualTo(varDataGrid.PerformGetElement($"/ByCell[2,@Call Name]").GetToolTipMessage());
        }

        [TestMethod("B8-20_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, typeof(object), DisplayName = "Verify DataType is \"Float\"")]
        [DataRow(VariableDataType.Integer, typeof(object), DisplayName = "Verify DataType is \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, typeof(object), DisplayName = "Verify DataType is \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, typeof(object), DisplayName = "Verify DataType is \"Short\"")]
        [DataRow(VariableDataType.String, typeof(object), DisplayName = "Verify DataType is \"String\"")]
        [DataRow(VariableDataType.Byte, typeof(object), DisplayName = "Verify DataType is \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, typeof(object), DisplayName = "Verify DataType is \"HexString\"")]
        [DataRow(VariableDataType.Chart, typeof(object), DisplayName = "Verify DataType is \"Chart\"")]
        [DataRow(VariableDataType.Picture, typeof(object), DisplayName = "Verify DataType is \"Picture\"")]
        [DataRow(VariableDataType.Double, typeof(object), DisplayName = "Verify DataType is \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, typeof(object), DisplayName = "Verify DataType is \"Long\"")]
        //B8-20_1
        public void TIEditor_SetDataTypeInTempVariable_VerifyRegularDataTypes(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-20_1";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Data Type").GetText().ShouldEqualTo(varDataType.GetDescription());
        }

        [TestMethod("B8-20_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", typeof(object), DisplayName = "Verify DataType is \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", typeof(object), DisplayName = "Verify DataType is \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", typeof(object), DisplayName = "Verify DataType is \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", typeof(object), DisplayName = "Verify DataType is \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", typeof(object), DisplayName = "Verify DataType is \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", typeof(object), DisplayName = "Verify DataType is \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", typeof(object), DisplayName = "Verify DataType is \"HexStringArray\"")]
        //B8-20_2
        public void TIEditor_SetDataTypeInTempVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, object dummy)
        {
            string CallName = "B8-20_2";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            string dataTypeShowName = string.Format("{0}[{1}]", varDataType.GetDescription().Replace("[]", ""), arrSize1);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
        }

        [TestMethod("B8-20_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-20_3
        public void TIEditor_SetDataTypeInTempVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-20_3";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            string dataTypeShowName = string.Format("{0}[{1},{2}]", varDataType.GetDescription().Replace("[,]", ""), arrSize1, arrSize2);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(1, "Data Type").GetText());
        }

        [TestMethod("B8-21_HexString")]
        [TestCategory("變數編輯(B8)")]
        //B8-21_HexString
        public void TIEditor_SetMaxInTempVariableWithHexString_CheckDefaultCellLength()
        {
            string CallName = "B8-21_HexString";
            VariableDataType varDataType = VariableDataType.HexString;
            int maxValue = 4;
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SelectItem(varDataType.GetDescription());

            varDataGrid.GetCellBy(1, "Max.").SendText(maxValue.ToString());

            string DefaultSingleHexValue = new string('0', maxValue * 2);
            DefaultSingleHexValue.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText());
        }

        [TestMethod("B8-21_HexString1DArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-21_HexString1DArray
        public void TIEditor_SetMaxInTempVariableWithHexString1DArr_CheckDefaultCellLength()
        {
            string CallName = "B8-21_HexString1DArray";
            VariableDataType varDataType = VariableDataType.HexStringArray;
            int maxValue = 4;
            string arrSize1 = "5";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SelectItem(varDataType.GetDescription());
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "Max.").SendText(maxValue.ToString());

            int size = int.Parse(arrSize1);
            string DefaultSingleHexValue = new string('0', maxValue * 2);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(1, "Default").GetText(), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-21_HexString2DArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-21_HexString2DArray
        public void TIEditor_SetMaxInTempVariableWithHexString2DArr_CheckDefaultCellLength()
        {
            string CallName = "B8-21_HexString2DArray";
            VariableDataType varDataType = VariableDataType.HexString2DArray;
            int maxValue = 4;
            string arrSize1 = "5";
            string arrSize2 = "5";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SelectItem(varDataType.GetDescription());
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "Max.").SendText(maxValue.ToString());

            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            string DefaultSingleHexValue = new string('0', maxValue * 2);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(1, "Default").GetText(), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-22_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, typeof(object), DisplayName = "Verify Default can be set in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer, typeof(object), DisplayName = "Verify Default can be set in \"Integer\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, typeof(object), DisplayName = "Verify Default can be set in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Short, typeof(object), DisplayName = "Verify Default can be set in \"Short\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String, typeof(object), DisplayName = "Verify Default can be set in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte, typeof(object), DisplayName = "Verify Default can be set in \"Byte\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Double, typeof(object), DisplayName = "Verify Default can be set in \"Double\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long, typeof(object), DisplayName = "Verify Default can be set in \"Long\" variable with EditType \"EditBox\"")]
        //B8-22_1
        public void TIEditor_SetDefaultInTempVariable_VerifyRegularDataTypes(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-22_1";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            string defaultValue = "0";
            varDataGrid.GetCellBy(1, "Default").SendText(defaultValue);
            Press(Keys.Enter);
            defaultValue.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText());
        }

        [TestMethod("B8-22_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArrayOfSize640, '0', typeof(object), DisplayName = "Verify Default can be set in \"Float[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, '0', typeof(object), DisplayName = "Verify Default can be set in \"Integer[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, '0', typeof(object), DisplayName = "Verify Default can be set in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, '0', typeof(object), DisplayName = "Verify Default can be set in \"Double[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, '0', typeof(object), DisplayName = "Verify Default can be set in \"String[L]\" variable with EditType \"EditBox\"")]
        //B8-22_2
        public void TIEditor_SetDefaultInTempVariable_VerifyUUTSizeArrayDataTypes(VariableDataType varDataType, char value, object dummy)
        {
            string CallName = "B8-22_2";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int UUTMaxSize = 640;
            UUTMaxSize.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-22_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArray, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"String[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.ByteArray, "10", "00", typeof(object), DisplayName = "Verify Default can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //B8-22_3
        public void TIEditor_SetDefaultInTempVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, string value, object dummy)
        {
            string CallName = "B8-22_3";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value);
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            //int size = int.Parse(arrSize1);
            foreach (string defVal in varDataGrid.GetCellBy(1, "Default").GetText().Split(','))
                value.ShouldEqualTo(defVal);
        }

        [TestMethod("B8-22_4")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Float[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Integer[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", "00", typeof(object), DisplayName = "Verify Default can be set in \"Byte[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"String[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Long[,]\" variable with EditType \"EditBox\"")]
        //B8-22_4
        public void TIEditor_SetDefaultInTempVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, string value, object dummy)
        {
            string CallName = "B8-22_4";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            //int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            foreach (string defValArr in varDataGrid.GetCellBy(1, "Default").GetText().Split(';'))
                foreach (string defVal in defValArr.Split(','))
                    value.ShouldEqualTo(defVal);
        }

        [TestMethod("B8-22_5_HexString")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexString, 'f', typeof(object), DisplayName = "Verify Default can not be set in \"HexString\" variable with EditType \"EditBox\"")]
        //B8-22_5_HexString
        public void TIEditor_SetDefaultInTempVariable_VerifyHexStringDataTypeWithEditBox(VariableDataType varDataType, char value, object dummy)
        {
            string CallName = "B8-22_5_HexString";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformInput("/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            //int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            string DefaultSingleHexValue = new string(value, 4);
            DefaultSingleHexValue.ShouldEqualTo(varDataGrid.GetCellBy(1, "Default").GetText());
        }

        [TestMethod("B8-22_5_HexString1DArray")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexStringArray, "5", 'f', typeof(object), DisplayName = "Verify Default can be set in \"HexString[]\" variable with EditType \"EditBox\"")]
        //B8-22_5_HexString1DArray
        public void TIEditor_SetDefaultInTempVariable_VerifyHexString1DArrayWithEditBox(VariableDataType varDataType, string arrSize1, char value, object dummy)
        {
            string CallName = "B8-22_5_HexString1DArray";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int size = int.Parse(arrSize1);
            string DefaultSingleHexValue = new string(value, 4);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(1, "Default").GetText(), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-22_5_HexString2DArray")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexString2DArray, "5", "5", 'f', typeof(object), DisplayName = "Verify Default can be set in \"HexString[,]\" variable with EditType \"EditBox\"")]
        //B8-22_5_HexString2DArray
        public void TIEditor_SetDefaultInTempVariable_VerifyHexString2DArrayWithEditBox(VariableDataType varDataType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-22_5_HexString2DArray";
            IElement varDataGrid = CreateNewVariable2(VariableTabType.Temp, "", CallName, varDataType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Temp);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Temp);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            string DefaultSingleHexValue = new string(value, 4);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(1, "Default").GetText(), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-23")]
        [TestCategory("變數編輯(B8)")]
        //B8-23
        public void TIEditor_SetShowNameInGlobalVariable_CheckShowNameIsSet()
        {
            string ShowName = "B8-23";
            CreateNewVariable1(VariableTabType.Global, ShowName);
        }

        [TestMethod("B8-24")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(1, typeof(object), DisplayName = "Verify CallName is set properly (single variable)")]
        [DataRow(2, typeof(object), DisplayName = "Verify CallName is set properly (two variables)")]
        //B8-24
        public void TIEditor_SetCallNameInGlobalVariable(int varCount, object dummy)
        {
            for (int rowNo = 1; rowNo <= varCount; rowNo++)
            {
                string CallName = $"B8-24_{rowNo}";
                CreateNewVariable1(VariableTabType.Global, "", CallName);
            }
        }

        [TestMethod("B8-24")]
        [TestCategory("變數編輯(B8)")]
        //B8-24
        public void TIEditor_SetCallNameInGlobalVariable_CheckCallNameIsRepeated()
        {
            PP5DataGrid pp5DataGrid = null;
            for (int rowNo = 1; rowNo <= 2; rowNo++)
            {
                string CallName = "B8-24";
                pp5DataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName);
            }

            string errorTooltipMsg = "CallName repeat";
            errorTooltipMsg.ShouldEqualTo(pp5DataGrid.PerformGetElement($"/ByCell@GlbGrid[{pp5DataGrid.LastRowNo - 1},@Call Name]").GetToolTipMessage());
            errorTooltipMsg.ShouldEqualTo(pp5DataGrid.PerformGetElement($"/ByCell@GlbGrid[{pp5DataGrid.LastRowNo},@Call Name]").GetToolTipMessage());
        }

        [TestMethod("B8-25_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, typeof(object), DisplayName = "Verify DataType is \"Float\"")]
        [DataRow(VariableDataType.Integer, typeof(object), DisplayName = "Verify DataType is \"Integer\"")]
        [DataRow(VariableDataType.FloatPercentage, typeof(object), DisplayName = "Verify DataType is \"FloatPercentage\"")]
        [DataRow(VariableDataType.Short, typeof(object), DisplayName = "Verify DataType is \"Short\"")]
        [DataRow(VariableDataType.String, typeof(object), DisplayName = "Verify DataType is \"String\"")]
        [DataRow(VariableDataType.Byte, typeof(object), DisplayName = "Verify DataType is \"Byte\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, typeof(object), DisplayName = "Verify DataType is \"HexString\"")]
        [DataRow(VariableDataType.LineInVector, typeof(object), DisplayName = "Verify DataType is \"LineInVector\"")]
        [DataRow(VariableDataType.LoadVector, typeof(object), DisplayName = "Verify DataType is \"LoadVector\"")]
        [DataRow(VariableDataType.SpecVector, typeof(object), DisplayName = "Verify DataType is \"SpecVector\"")]
        [DataRow(VariableDataType.ExtMeasVector, typeof(object), DisplayName = "Verify DataType is \"ExtMeasVector\"")]
        [DataRow(VariableDataType.ACLoadVector, typeof(object), DisplayName = "Verify DataType is \"ACLoadVector\"")]
        [DataRow(VariableDataType.ACSpecVector, typeof(object), DisplayName = "Verify DataType is \"ACSpecVector\"")]
        [DataRow(VariableDataType.ConstantVector, typeof(object), DisplayName = "Verify DataType is \"ConstantVector\"")]
        [DataRow(VariableDataType.Double, typeof(object), DisplayName = "Verify DataType is \"Double\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, typeof(object), DisplayName = "Verify DataType is \"Long\"")]
        //B8-25_1
        public void TIEditor_SetDataTypeInGlobalVariable_VerifyRegularDataTypes(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-25_1";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            varDataType.GetDescription().ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Data Type").GetText());
        }

        [TestMethod("B8-25_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, "10", typeof(object), DisplayName = "Verify DataType is \"FloatArray\"")]
        [DataRow(VariableDataType.IntegerArray, "10", typeof(object), DisplayName = "Verify DataType is \"IntegerArray\"")]
        [DataRow(VariableDataType.DoubleArray, "10", typeof(object), DisplayName = "Verify DataType is \"DoubleArray\"")]
        [DataRow(VariableDataType.StringArray, "10", typeof(object), DisplayName = "Verify DataType is \"StringArray\"")]
        [DataRow(VariableDataType.ByteArray, "10", typeof(object), DisplayName = "Verify DataType is \"ByteArray\"")]
        [DataRow(VariableDataType.LongArray, "10", typeof(object), DisplayName = "Verify DataType is \"LongArray\"")]
        [DataRow(VariableDataType.HexStringArray, "10", typeof(object), DisplayName = "Verify DataType is \"HexStringArray\"")]
        //B8-25_2
        public void TIEditor_SetDataTypeInGlobalVariable_VerifyRank1Array(VariableDataType varDataType, string arrSize1, object dummy)
        {
            string CallName = "B8-25_2";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, arrSize1);

            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            string dataTypeShowName = string.Format("{0}[{1}]", varDataType.GetDescription().Replace("[]", ""), arrSize1);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Data Type").GetText());
        }

        [TestMethod("B8-25_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "10", "10", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-25_3
        public void TIEditor_SetDataTypeInGlobalVariable_VerifyRank2Array(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-25_3";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, arrSize1, arrSize2);

            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            string dataTypeShowName = string.Format("{0}[{1},{2}]", varDataType.GetDescription().Replace("[,]", ""), arrSize1, arrSize2);
            dataTypeShowName.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Data Type").GetText());
        }

        [TestMethod("B8-26")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, typeof(object), DisplayName = "Verify EditType is \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.ComboBox, typeof(object), DisplayName = "Verify EditType is \"ComboBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.External_Signal, typeof(object), DisplayName = "Verify EditType is \"External_Signal\"")]
        //B8-26
        public void TIEditor_SetEditTypeInGlobalVariable(VariableDataType varDataType, VariableEditType varEditType, object dummy)
        {
            string CallName = "B8-26";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varEditType.ToString().ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Edit Type").GetText());
        }

        [TestMethod("B8-27")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Integer\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Short, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Short\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Byte\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        //[DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        //[DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.HexString, VariableEditType.EditBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"HexString\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LineInVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"LineInVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.LoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"LoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.SpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"SpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ExtMeasVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ExtMeasVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACLoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ACLoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACSpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ACSpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ConstantVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Minimum can not be set in \"ConstantVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Double\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Minimum can be set in \"Long\" variable with EditType \"EditBox\"")]
        //B8-27
        public void TIEditor_SetMinimumInGlobalVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, bool canSetMinimum, object dummy)
        {
            string CallName = "B8-27";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").LeftClick();
            Cursor expectedCursor = canSetMinimum ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            Cursor currentCursor = DllHelper.GetCursor();
            expectedCursor.ShouldEqualTo(currentCursor);

            string minValue = "0";
            if (canSetMinimum)
            {
                varDataGrid.GetSelectedCellBy(varDataGrid.LastRowNo, "Min.").SendText(minValue);
                minValue.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").GetText());
            }
        }

        [TestMethod("B8-27_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Integer[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Double[L]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, '0', VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        //B8-27_1
        public void TIEditor_SetMinimumInGlobalVariable_VerifyArrayDataTypes(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-27_1";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int UUTMaxSize = 640;
            UUTMaxSize.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-27_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"String[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.ByteArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.HexStringArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"HexString[]\" variable with EditType \"EditBox\"")]
        //B8-27_2
        public void TIEditor_SetMinimumInGlobalVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, char value, object dummy)
        {
            string CallName = "B8-27_2";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int size = int.Parse(arrSize1);
            size.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-27_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Float[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Integer[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.Byte2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Byte[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.String2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"String[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.HexString2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"HexString[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Minimum can be set in \"Long[,]\" variable with EditType \"EditBox\"")]
        //B8-27_3
        public void TIEditor_SetMinimumInGlobalVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-27_3";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            size.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Min.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-28")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Integer\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Short, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Short\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Byte\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatArrayOfSize640\"")]
        //[DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"IntegerArrayOfSize640\"")]
        //[DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"FloatPercentageArrayOfSize640\"")]
        [DataRow(VariableDataType.LineInVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"LineInVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.LoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"LoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.SpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"SpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ExtMeasVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ExtMeasVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACLoadVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ACLoadVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ACSpecVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ACSpecVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.ConstantVector, VariableEditType.ComboBox, false, typeof(object), DisplayName = "Verify Maximum can not be set in \"ConstantVector\" variable with EditType \"ComboBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Double\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"DoubleArrayOfUUTMaxSize\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        [DataRow(VariableDataType.Long, VariableEditType.EditBox, true, typeof(object), DisplayName = "Verify Maximum can be set in \"Long\" variable with EditType \"EditBox\"")]
        //B8-28
        public void TIEditor_SetMaximumInGlobalVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, bool canSetMaximum, object dummy)
        {
            string CallName = "B8-28";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").LeftClick();
            Cursor expectedCursor = canSetMaximum ? Cursor.IBeam : Cursor.Arrow;                           // Check the cursor is still in IBeam type (cell is editable)
            Cursor currentCursor = DllHelper.GetCursor();
            expectedCursor.ShouldEqualTo(currentCursor);

            string maxValue = "0";
            if (canSetMaximum)
            {
                varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").SendText(maxValue);
                maxValue.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").GetText());
            }
        }

        [TestMethod("B8-28_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Float[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Integer[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Double[L]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArrayOfUUTMaxSize, '0', VariableEditType.EditBox, typeof(object), DisplayName = "Verify DataType is \"StringArrayOfUUTMaxSize\"")]
        //B8-28_1
        public void TIEditor_SetMaximumInGlobalVariable_VerifyArrayDataTypes(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-28_1";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int UUTMaxSize = 640;
            UUTMaxSize.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-28_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.StringArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"String[]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.ByteArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, VariableEditType.EditBox, "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //B8-28_2
        public void TIEditor_SetMaximumInGlobalVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, char value, object dummy)
        {
            string CallName = "B8-28_2";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            
            int size = int.Parse(arrSize1);
            size.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-28_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Float[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Integer[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.Byte2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Byte[,]\" variable with EditType \"EditBox\"")]
        //[DataRow(VariableDataType.String2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"String[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Maximum can be set in \"Long[,]\" variable with EditType \"EditBox\"")]
        //B8-28_3
        public void TIEditor_SetMaximumInGlobalVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-28_3";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            size.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-28_4")]
        [DataRow(VariableDataType.HexString, VariableEditType.EditBox, "1", "1", '5', typeof(object), DisplayName = "Verify Maximum can not be set in \"HexString\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.HexStringArray, VariableEditType.EditBox, "5", "1", '5', typeof(object), DisplayName = "Verify Maximum can be set in \"HexString[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.HexString2DArray, VariableEditType.EditBox, "5", "5", '5', typeof(object), DisplayName = "Verify Maximum can be set in \"HexString[,]\" variable with EditType \"EditBox\"")]
        //B8-28_4
        public void TIEditor_SetMaximumInGlobalVariable_VerifHexStringDataType(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-28_4";
            PP5DataGrid varDataGrid;
            if (varDataType == VariableDataType.HexString)
                varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            else if (varDataType == VariableDataType.HexStringArray)
                varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1);
            else
                varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //if (varDataType == VariableDataType.HexStringArray)
            //{
            //    PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //    PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);
            //}
            //else if (varDataType == VariableDataType.HexString2DArray)
            //{
            //    PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //    PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //    PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
            //}

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").LeftClick();
            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").SendText(value.ToString());
            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Max.").GetText().ShouldEqualTo(value.ToString());

            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            string DefaultSingleValue = new string('0', int.Parse(value.ToString()) * 2);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText(), DefaultSingleValue).Count);
        }

        [TestMethod("B8-29")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Integer\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Short, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Short\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Byte\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Double\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set in \"Long\" variable with EditType \"EditBox\"")]
        //B8-29
        public void TIEditor_SetDefaultInGlobalVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, object dummy)
        {
            string CallName = "B8-29";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            string defaultValue = "0";
            varDataGrid.GetSelectedCellBy(varDataGrid.LastRowNo, "Default").SendText(defaultValue);
            defaultValue.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText());
        }

        [TestMethod("B8-29_1_String")]
        [TestCategory("變數編輯(B8)")]
        //B8-29_1_String
        public void TIEditor_SetDefaultInGlobalVariable_VerifyStringDataTypeWithExtSignal()
        {
            string CallName = "B8-29_1_String";
            VariableDataType varDataType = VariableDataType.String;
            VariableEditType varEditType = VariableEditType.External_Signal;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //VariableDataType varDataType = VariableDataType.String;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            string defaultValue = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText();
            defaultValue.ShouldContain("PhoenixonDSP");
            defaultValue.ShouldContain("DSPSensingOFF");
            defaultValue.ShouldContain("(0xFF)");
            defaultValue.ShouldContain("DSPSensingOFF_Signal");
        }

        [TestMethod("B8-29_1_String1DArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-29_1_String1DArray
        public void TIEditor_SetDefaultInGlobalVariable_VerifyString1DArrayDataTypeWithExtSignal()
        {
            string CallName = "B8-29_1_String1DArray";
            int arrSize1 = 5;
            VariableDataType varDataType = VariableDataType.StringArray;
            VariableEditType varEditType = VariableEditType.External_Signal;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1.ToString());
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //VariableDataType varDataType = VariableDataType.StringArray;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            string defaultValue = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText();
            string DefaultSingleValue = @"PhoenixonDSP\.DSPSensingOFF:\(0xFF\)\.DSPSensingOFF_Signal";
            arrSize1.ShouldEqualTo(Regex.Matches(defaultValue, DefaultSingleValue).Count);
        }

        [TestMethod("B8-29_2_String2DArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-29_2_String2DArray
        public void TIEditor_SetDefaultInGlobalVariable_VerifyString2DArrayDataTypeWithExtSignal()
        {
            string CallName = "B8-29_2_String2DArray";
            string arrSize1 = "2";
            string arrSize2 = "2";
            VariableDataType varDataType = VariableDataType.String2DArray;
            VariableEditType varEditType = VariableEditType.External_Signal;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //VariableDataType varDataType = VariableDataType.String2DArray;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            string defaultValue = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText();
            string DefaultSingleValue = @"PhoenixonDSP\.DSPSensingOFF:\(0xFF\)\.DSPSensingOFF_Signal";
            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            size.ShouldEqualTo(Regex.Matches(defaultValue, DefaultSingleValue).Count);
        }

        [TestMethod("B8-29_2_StringUUTArray")]
        [TestCategory("變數編輯(B8)")]
        //B8-29_2_StringUUTArray
        public void TIEditor_SetDefaultInGlobalVariable_VerifyStringUUTArrayDataTypeWithExtSignal()
        {
            string CallName = "B8-29_2_StringUUTArray";
            VariableDataType varDataType = VariableDataType.StringArrayOfUUTMaxSize;
            VariableEditType varEditType = VariableEditType.External_Signal;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //VariableDataType varDataType = VariableDataType.StringArrayOfUUTMaxSize;
            //VariableEditType varEditType = VariableEditType.External_Signal;

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            PP5IDEWindow.PerformGetElement("/ById[tvCluster]")
                        .AddTreeViewItem("PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal");

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            string defaultValue = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText();
            string DefaultSingleValue = @"PhoenixonDSP\.DSPSensingOFF:\(0xFF\)\.DSPSensingOFF_Signal";
            int UUTSize = 640;
            UUTSize.ShouldEqualTo(Regex.Matches(defaultValue, DefaultSingleValue).Count);
        }

        [TestMethod("B8-29_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.LineInVector, typeof(object), DisplayName = "Verify Default can be set in \"LineInVector\" variable with EditType \"ComboBox\"")]
        //[DataRow(VariableDataType.LoadVector, typeof(object), DisplayName = "Verify Default can be set in \"LoadVector\" variable with EditType \"ComboBox\"")]
        //[DataRow(VariableDataType.SpecVector, typeof(object), DisplayName = "Verify Default can be set in \"SpecVector\" variable with EditType \"ComboBox\"")]
        //[DataRow(VariableDataType.ExtMeasVector, typeof(object), DisplayName = "Verify Default can be set in \"ExtMeasVector\" variable with EditType \"ComboBox\"")]
        //[DataRow(VariableDataType.ACLoadVector, typeof(object), DisplayName = "Verify Default can be set in \"ACLoadVector\" variable with EditType \"ComboBox\"")]
        //[DataRow(VariableDataType.ACSpecVector, typeof(object), DisplayName = "Verify Default can be set in \"ACSpecVector\" variable with EditType \"ComboBox\"")]
        //[DataRow(VariableDataType.ConstantVector, typeof(object), DisplayName = "Verify Default can be set in \"ConstantVector\" variable with EditType \"ComboBox\"")]
        //B8-29_2
        public void TIEditor_SetDefaultInGlobalVariable_VerifyVectorDataTypes(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-29_2";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, VariableEditType.ComboBox);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(VariableEditType.ComboBox.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();

            List<string> expectedValues = new List<string>();
            string[] defaultValues;
            PP5DataGrid VectorDataGrid = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement("/ById[VectorGrid]"));
            VectorDataGrid.ScrollToSpecificColumn("Default");
            //while (!VectorDataGrid.GetCellBy(1, "Default").IsWithinScreen)
            //{
            //    MoveToElementAndRightClick(VectorDataGrid, MoveToElementOffsetStartingPoint.InnerBottomRight);
            //    PP5IDEWindow.PerformClick("/ByClass[ContextMenu]/ById[PageRight]/ByName[Page Right]", ClickType.LeftClick);
            //}
            for (int i = 1; i <= VectorDataGrid.GetRowCount(); i++)
                expectedValues.Add(VectorDataGrid.GetCellBy(i, "Default").GetText());
            PP5IDEWindow.PerformClick("/ByName[Vector Editor,Ok]", ClickType.LeftClick);
            defaultValues = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText().Split('@');

            expectedValues.Count.ShouldEqualTo(defaultValues.Length);
            for (int i = 0; i < expectedValues.Count; i++)
            {
                expectedValues[i].ShouldEqualTo(defaultValues[i]);
            }
        }

        [TestMethod("B8-29_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Float[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Integer[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"Double[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, '0', typeof(object), DisplayName = "Verify Default can be set in \"String[L]\" variable with EditType \"EditBox\"")]
        //B8-29_3
        public void TIEditor_SetDefaultInGlobalVariable_VerifyUUTSizeArrayDataTypes(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-29_3";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int UUTSize = 640;
            UUTSize.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText().Count(c => c.Equals(value)));
        }

        [TestMethod("B8-29_4")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"String[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.ByteArray, VariableEditType.EditBox, "10", "00", typeof(object), DisplayName = "Verify Default can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //B8-29_4
        public void TIEditor_SetDefaultInGlobalVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string value, object dummy)
        {
            string CallName = "B8-29_4";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value);
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            foreach (string defVal in varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText().Split(','))
                value.ShouldEqualTo(defVal);
        }

        [TestMethod("B8-29_5")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Default can be set in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Default can be set in \"Float[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Integer2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Default can be set in \"Integer[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Byte2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Default can be set in \"Byte[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.String2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Default can be set in \"String[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Long2DArray, VariableEditType.EditBox, "10", "10", '0', typeof(object), DisplayName = "Verify Default can be set in \"Long[,]\" variable with EditType \"EditBox\"")]
        //B8-29_5
        public void TIEditor_SetDefaultInGlobalVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-29_5";
            IElement varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(1, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, value.ToString());
            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);
            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            varDataGrid.GetCellBy(1, "Default").GetText().Count(c => c.Equals(value)).ShouldEqualTo(size);
        }

        [TestMethod("B8-29_6_HexString")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexString, VariableEditType.EditBox, 'f', typeof(object), DisplayName = "Verify Default can not be set in \"HexString\" variable with EditType \"EditBox\"")]
        //B8-29_6_HexString
        public void TIEditor_SetDefaultInGlobalVariable_VerifyHexStringDataTypeWithEditBox(VariableDataType varDataType, VariableEditType varEditType, char value, object dummy)
        {
            string CallName = "B8-29_6_HexString";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformInput("/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformInput("/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            //int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            string DefaultSingleHexValue = new string(value, 4);
            DefaultSingleHexValue.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText());
        }

        [TestMethod("B8-29_6_HexString1DArray")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexStringArray, VariableEditType.EditBox, "5", 'f', typeof(object), DisplayName = "Verify Default can be set in \"HexString[]\" variable with EditType \"EditBox\"")]
        //B8-29_6_HexString1DArray
        public void TIEditor_SetDefaultInGlobalVariable_VerifyHexString1DArrayWithEditBox(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, char value, object dummy)
        {
            string CallName = "B8-29_6_HexString1DArray";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            //int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            int size = int.Parse(arrSize1);
            string DefaultSingleHexValue = new string(value, 4);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText(), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-29_6_HexString2DArray")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.HexString2DArray, VariableEditType.EditBox, "5", "5", 'f', typeof(object), DisplayName = "Verify Default can be set in \"HexString[,]\" variable with EditType \"EditBox\"")]
        //B8-29_6_HexString2DArray
        public void TIEditor_SetDefaultInGlobalVariable_VerifyHexString2DArrayWithEditBox(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, char value, object dummy)
        {
            string CallName = "B8-29_6_HexString2DArray";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").LeftClick();
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor]/ByClass[GroupBox]/ById[svInner,popEdit,PART_Editor]", ClickType.LeftClick);

            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[0]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformInput("/ByName[HexString Editor]/ByClass[ListBox]/ListItem[1]/Edit[0]", InputType.SendContent, new string(value, 2));
            PP5IDEWindow.PerformClick("/ByName[HexString Editor,Ok]", ClickType.LeftClick);

            PP5IDEWindow.PerformClick("/ByName[Inner]/ById[svInner]/ByName[Apply]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Variables Value Editor,Ok]", ClickType.LeftClick);

            int size = int.Parse(arrSize1) * int.Parse(arrSize2);
            string DefaultSingleHexValue = new string(value, 4);
            size.ShouldEqualTo(Regex.Matches(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText(), DefaultSingleHexValue).Count);
        }

        [TestMethod("B8-30")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Float, VariableEditType.EditBox, ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Float\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentage, VariableEditType.EditBox, ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"FloatPercentage\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Double, VariableEditType.EditBox, ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Double\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, VariableEditType.EditBox, ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Default can be set from \".0~.6\" in \"Float(%)[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, VariableEditType.EditBox, ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Default can be set from \".0~.6\" in \"Double[L]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, VariableEditType.EditBox, ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Default can be set from \".0~.6\" in \"Float[L]\" variable with EditType \"EditBox\"")]
        //B8-30
        public void TIEditor_SetFormatInGlobalVariable_VerifyRegularDataTypes(VariableDataType varDataType, VariableEditType varEditType, string formatStr, object dummy)
        {
            string CallName = "B8-30";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            foreach (string fm in formatStr.Split(','))
            {
                varDataGrid.GetSelectedCellBy(varDataGrid.LastRowNo, "Format").SendText(fm);
                fm.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Format").GetText());
            }
        }

        [TestMethod("B8-30_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Double[]\" variable with EditType \"EditBox\"")]
        //B8-30_1
        public void TIEditor_SetFormatInGlobalVariable_VerifyRank1Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string formatStr, object dummy)
        {
            string CallName = "B8-30_1";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/ByName[Array Size Editor]/ById[SizeTxtBox]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformClick("/ByName[Array Size Editor,Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            foreach (string fm in formatStr.Split(','))
            {
                varDataGrid.GetSelectedCellBy(varDataGrid.LastRowNo, "Format").SendText(fm);
                fm.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Format").GetText());
            }
        }

        [TestMethod("B8-30_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, VariableEditType.EditBox, "2", "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Double[,]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.Float2DArray, VariableEditType.EditBox, "2", "2", ".0,.1,.2,.3,.4,.5,.6", typeof(object), DisplayName = "Verify Format can be set from \".0~.6\" in \"Float[,]\" variable with EditType \"EditBox\"")]
        //B8-30_2
        public void TIEditor_SetFormatInGlobalVariable_VerifyRank2Array(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string arrSize2, string formatStr, object dummy)
        {
            string CallName = "B8-30_2";
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType, arrSize1, arrSize2);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type").SendSingleKeys(varDataType.GetDescription());
            //Press(Keys.Enter);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, arrSize1);
            //PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, arrSize2);
            //PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);

            //varDataGrid.GetCellBy(1, "Edit Type").SendSingleKeys(varEditType.ToString());
            //Press(Keys.Enter);

            foreach (string fm in formatStr.Split(','))
            {
                varDataGrid.GetSelectedCellBy(varDataGrid.LastRowNo, "Format").SendText(fm);
                fm.ShouldEqualTo(varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Format").GetText());
            }
        }

        [TestMethod("B8-31")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Short, Int16.MaxValue, "int16Max", typeof(object), DisplayName = "Verify enum value can be set with \"int16Max\" of datatype \"Short\"")]
        [DataRow(VariableDataType.Short, Int16.MinValue, "int16Min", typeof(object), DisplayName = "Verify enum value can be set with \"int16Min\" of datatype \"Short\"")]
        [DataRow(VariableDataType.Integer, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Verify enum value can be set with \"int32Max\" of datatype \"Integer\"")]
        [DataRow(VariableDataType.Integer, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Verify enum value can be set with \"int32Min\" of datatype \"Integer\"")]
        [DataRow(VariableDataType.Long, Int64.MaxValue, "int64Max", typeof(object), DisplayName = "Verify enum value can be set with \"int64Max\" of datatype \"Long\"")]
        [DataRow(VariableDataType.Long, Int64.MinValue, "int64Min", typeof(object), DisplayName = "Verify enum value can be set with \"int64Min\" of datatype \"Long\"")]

        [DataRow(VariableDataType.Float, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMax\" of datatype \"Float\"")]                            // Actual float.MaxValue is 3.40282347E+38f
        [DataRow(VariableDataType.Float, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMin\" of datatype\"Float\"")]                            // Actual float.MinValue is -3.40282347E+38f
        [DataRow(VariableDataType.FloatPercentage, "3.40282356779E+38", "Float(%)Max", typeof(object), DisplayName = "Verify enum value can be set with \"Float(%)Max\" of datatype \"FloatPercentage\"")]  // Actual float.MaxValue is 3.40282347E+38f
        [DataRow(VariableDataType.FloatPercentage, "-3.40282356779E+38", "Float(%)Min", typeof(object), DisplayName = "Verify enum value can be set with \"Float(%)Min\" of datatype \"FloatPercentage\"")] // Actual float.MinValue is -3.40282347E+38f
        [DataRow(VariableDataType.Double, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMax\" of datatype \"Double\"")]                // Actual double.MaxValue is 1.7976931348623157E+308
        [DataRow(VariableDataType.Double, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMin\" of datatype \"Double\"")]               // Actual double.MinValue is -1.7976931348623157E+308

        [DataRow(VariableDataType.Byte, "ff", "ByteMax", typeof(object), DisplayName = "Verify enum value can be set with \"ByteMax\" of datatype \"Byte\"")]
        [DataRow(VariableDataType.Byte, "00", "ByteMin", typeof(object), DisplayName = "Verify enum value can be set with \"ByteMin\" of datatype \"Byte\"")]

        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Verify enum value can be set with \"int32Max\" of datatype \"Integer[L]\"")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Verify enum value can be set with \"int32Min\" of datatype \"Integer[L]\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMax\" of datatype \"Float[L]\"")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMin\" of datatype \"Float[L]\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMax\" of datatype \"Float(%)[L]\"")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Verify enum value can be set with \"FloatMin\" of datatype \"Float(%)[L]\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMax\" of datatype \"Double[L]\"")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Verify enum value can be set with \"DoubleMin\" of datatype \"Double[L]\"")]
        //B8-31
        public void TIEditor_SetEnumItemInGlobalVariable_VerifyRegularDataTypesWithValidValue(VariableDataType varDataType, object enumValue, string enumName, object dummy)
        {
            string CallName = "B8-31";
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type")
            //           .SelectItem(varDataType.GetDescription());
            ////Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type")
            //           .SelectItem(VariableEditType.ComboBox.ToString());
            ////Press(Keys.Enter);

            AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue.ToString());

            string enumStringActual = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Enum Item").GetText();
            string enumStringExpected = string.Concat(enumName, "=", enumValue);
            enumStringExpected.ShouldEqualTo(enumStringActual);
        }

        [TestMethod("B8-31_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.String, 'a', 1024, "StringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"StringWithMaxLength(1024)\" of datatype \"String\"")]
        [DataRow(VariableDataType.HexString, 'f', 2048, "HexStringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"HexStringWithMaxLength(2048)\" of datatype \"HexString\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, 'a', 1024, "StringWithMaxLength", typeof(object), DisplayName = "Verify enum value can be set with \"StringWithMaxLength(1024)\" of datatype \"String[L]\"")]
        //B8-31_1
        public void TIEditor_SetEnumItemInGlobalVariable_VerifyStringDataTypesWithValidValue(VariableDataType varDataType, char enumValueChar, int length, string enumName, object dummy)
        {
            string CallName = "B8-31_1";
            string enumValue = new string(enumValueChar, length);
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type")
            //           .SelectItem(varDataType.GetDescription());
            ////Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type")
            //           .SelectItem(VariableEditType.ComboBox.ToString());
            ////Press(Keys.Enter);

            AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue);

            string enumStringActual = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Enum Item").GetText();
            string enumStringExpected = string.Concat(enumName, "=", enumValue);
            enumStringExpected.ShouldEqualTo(enumStringActual);
        }

        [TestMethod("B8-32")]
        [TestCategory("變數編輯(B8)")]
        //B8-32
        public void TIEditor_SetEnumItemInGlobalVariable_CheckValueIsInvalidWithSameEnumName()
        {
            string CallName = "B8-32";
            string enumValue = "0";
            string enumName = "a";
            VariableDataType varDataType = VariableDataType.String;
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallName, varDataType, varEditType);
            //VariableTabNavi(VariableTabType.Global);
            //IElement varDataGrid = GetDataTableElement((TIDataTableAutoIDType)VariableTabType.Global);

            //varDataGrid.GetCellBy(1, "Show Name").DoubleClick();
            //varDataGrid.GetCellBy(1, "Call Name").SendSingleKeys(CallName);
            //Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Data Type")
            //           .SelectItem(VariableDataType.String.GetDescription());
            ////Press(Keys.Enter);

            //varDataGrid.GetCellBy(1, "Edit Type")
            //           .SelectItem(VariableEditType.ComboBox.ToString());
            ////Press(Keys.Enter);
            
            bool isAdded = true;
            for (int i = 0; i < 2; i++)
            {
                isAdded &= AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue);
            }

            if (!isAdded)
            {
                string errorMsg = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Creater]/Edit[0]").GetToolTipMessage();
                string errorMsgExpected = "EnumItemName is duplicated";
                errorMsg.ShouldNotBeNull();
                errorMsgExpected.ShouldEqualTo(errorMsg);
                PP5IDEWindow.PerformGetElement("/ByName[Enum Item Creater,Ok]").Enabled.ShouldBeFalse();
            }

            // Close the enum item creator/editor window
            PP5IDEWindow.PerformClick("/ByName[Enum Item Creater,Cancel]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Enum Item Editor,Cancel]", ClickType.LeftClick);
        }

        [TestMethod("B8-33")]
        [TestCategory("變數編輯(B8)")]
        //B8-33
        public void TIEditor_EditGlobalVariableUsedByOtherTI_CheckVariableNotEditable()
        {
            string tiname = "B8-33";
            string CallNameGlb = "B8-33_Glb";
            string CallNameRes = "B8-33_Res";
            string minValue = "0";
            string glbVarIsUsedWarningMsg = "This variable is already used by another TI.";
            VariableDataType varDataType = VariableDataType.Integer;
            VariableEditType varEditType = VariableEditType.EditBox;
            TIFilePath = GetTIFilePath(tiname, runType: TestItemRunType.UUT);

            PP5DataGrid varDataGrid = CreateNewVariable1(VariableTabType.Global, "", CallNameGlb, varDataType, varEditType);
            //varDataGrid.GetCellByName(4/*Call Name.*/, CallNameGlb).SendText(minValue);
            varDataGrid.GetSelectedCellBy(varDataGrid.LastRowNo, "Min.").SendText(minValue);

            varDataGrid = CreateNewVariable2(VariableTabType.Result, "", CallNameRes, varDataType);
            varDataGrid.GetCellBy(1, "MinimumSpec").SelectItem(CallNameGlb);
            SaveAsNewTI(tiname);

            PerformOpenNewTI();
            VariableTabNavi(VariableTabType.Global);
            PP5DataGrid varDataGridGlb = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement($"/ById[{TIDataTableAutoIDType.GlbGrid}]"));
            varDataGridGlb.GetCellBy(varDataGridGlb.LastRowNo, 1/*Lock Symbol*/).LeftClick();
            PP5IDEWindow.PerformGetElement("/ByName[Global]/ByClass[TextBox]").GetText().ShouldEqualTo(glbVarIsUsedWarningMsg);

            string tinameActual = PP5IDEWindow.PerformGetElement($"/ByName[Global]/ByClass[TabControl]/DataGrid[0]/ByCell[1,1]").GetText();
            tiname.ShouldEqualTo(tinameActual);
            PP5IDEWindow.PerformClick("/ByName[Global,Ok]", ClickType.LeftClick);

            PerformCloseTI();
            MenuSelect("Functions", "TI Editor");
            WaitUntil(() => GetPP5Window() != null);
            LoadOldTI(tiname);

            VariableTabNavi(VariableTabType.Global);
            varDataGridGlb = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement($"/ById[{TIDataTableAutoIDType.GlbGrid}]"));
            varDataGridGlb.GetCellBy(varDataGridGlb.LastRowNo, 1/*Lock Symbol*/).LeftClick();
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Save);

            PP5IDEWindow.PerformClick("/Window[Compiler Error]/ById[btnOK]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/Window[Error]/ById[btnYes]", ClickType.LeftClick);
        }

        [TestMethod("B8-42")]
        [TestCategory("變數編輯(B8)")]
        //B8-42
        public void TIEditor_VariableTableSelectLastRow_CheckToolBarButtonsIsDisabled()
        {
            // Create new condition variable
            VariableTabNavi(VariableTabType.Condition);
            PP5DataGrid varDataGrid = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement($"/ById[{TIDataTableAutoIDType.CndGrid}]"));
            varDataGrid.GetCellBy(varDataGrid.LastRowNo + 1, "No").LeftClick();

            bool ExpectedBtnState = false;
            for (TIToolBarButton btnState = TIToolBarButton.Cut; btnState <= TIToolBarButton.Delete; btnState++)
                ExpectedBtnState.ShouldEqualTo(PP5IDEWindow.ToolBarGetSelectionState((int)btnState));
        }

        /// <summary>
        /// 測試用例編號：B8-51
        /// 測試步驟：
        /// 1. 開啟 TI Editor
        /// 2. 分別在各類型變數表格(Condition、Result、Temp、Global)中重複新增變數
        /// 3. 直到超過1000個變數時，驗證是否出現超過上限的提示視窗
        /// 測試描述：驗證變數數量超過上限時的錯誤提示機制
        /// 預期輸出：當變數數量超過1000時，應顯示變數上限超過的提醒視窗
        /// </summary>
        [TestMethod("B8-51")]
        [TestCategory("變數編輯")]
        [DataRow(VariableTabType.Condition, "Variable count must less than or equal to 1000.", typeof(object), DisplayName = "條件變數超過上限")]
        [DataRow(VariableTabType.Result, "Variable count must less than or equal to 1000.", typeof(object), DisplayName = "結果變數超過上限")]
        [DataRow(VariableTabType.Temp, "Variable count must less than or equal to 1000.", typeof(object), DisplayName = "臨時變數超過上限")]
        [DataRow(VariableTabType.Global, "Variable count must less than or equal to 1000.", typeof(object), DisplayName = "全域變數超過上限")]
        public void TIEditor_AddVariableToLimit_CheckWarningMessage(VariableTabType variableType, string expectedErrorMessage, object dummy)
        {
            try
            {
                //// 1. 切換到指定的變數類型頁籤
                //var varDataGrid = InitializeVariableDataGrid(variableType, "", "B8-51_VarLimit");

                // 2. 嘗試新增超過1000個變數
                for (int i = 2; i <= 1001; i++)
                {
                    try
                    {
                        // 新增變數
                        string callName = $"Var_{i}";
                        //varDataGrid.PerformClick("/ByCell[" + i + ",@CallName]", ClickType.LeftClick);
                        //varDataGrid.PerformInput("/ByCell[" + i + ",@CallName]", InputType.SendContent, callName);
                        //Press(Keys.Enter);
                        InitializeVariableDataGrid(variableType, "", callName);

                        // 當i=1001時應該會出現錯誤視窗
                        if (i == 1001)
                        {
                            // 3. 驗證錯誤訊息視窗
                            var errorDialog = PP5IDEWindow.PerformGetElement("/Window[Exceed Limit]");
                            errorDialog.ShouldNotBeNull("未顯示變數超過上限的錯誤視窗");

                            // 4. 驗證錯誤訊息內容
                            string actualMessage = errorDialog.GetFirstEditContent();
                            actualMessage.ShouldEqualTo(expectedErrorMessage);

                            // 5. 關閉錯誤視窗
                            errorDialog.PerformClick("/ByName[OK]", ClickType.LeftClick);
                        }
                    }
                    catch (Exception ex) when (i == 1001)
                    {
                        // 當i=1001時預期會拋出例外，這是正常的
                        Console.WriteLine($"預期的錯誤發生: {ex.Message}");
                    }
                }
            }
            finally
            {
                // 清理測試環境
                PP5IDEWindow.CloseWindow(0);
            }
        }

        [TestMethod("B8-52_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableTabType.Condition, typeof(object))]
        //[DataRow(VariableTabType.Result)]
        //[DataRow(VariableTabType.Temp)]
        //[DataRow(VariableTabType.Global)]
        //B8-52_1
        public void TIEditor_RepeatAddingVariableToGlbOrCndTable_CheckMaximumLimitIs1000(VariableTabType variableType, object dummy)
        {
            CreateNewVariable1(variableType, "", "B8-52_1");
            //Press(Keys.Up);
            //int variableLimit = 1000;
            for (int i = 1; i <= 10; i++)
            {
                SelectAll();
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);
            }

            string expectedWarningMsg = "Variable count must less than or equal to 1000.";
            expectedWarningMsg.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByName[Exceed Limit]/ById[txtBlockMsg]").GetText());
            PP5IDEWindow.PerformClick("/ByName[Exceed Limit,OK]", ClickType.LeftClick);
        }

        [TestMethod("B8-52_2")]
        [TestCategory("變數編輯(B8)")]
        //[DataRow(VariableTabType.Condition)]
        [DataRow(VariableTabType.Result, typeof(object))]
        [DataRow(VariableTabType.Temp, typeof(object))]
        //[DataRow(VariableTabType.Global)]
        //B8-52_2
        public void TIEditor_RepeatAddingVariableToResOrTmpTable_CheckMaximumLimitIs1000(VariableTabType variableType, object dummy)
        {
            CreateNewVariable2(variableType, "", "B8-52_2");
            //Press(Keys.Up);
            //int variableLimit = 1000;
            for (int i = 1; i <= 10; i++)
            {
                SelectAll();
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Copy);
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Paste);
            }

            string expectedWarningMsg = "Variable count must less than or equal to 1000.";
            expectedWarningMsg.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByName[Exceed Limit]/ById[txtBlockMsg]").GetText());
            PP5IDEWindow.PerformClick("/ByName[Exceed Limit,OK]", ClickType.LeftClick);
        }

        /// <summary>
        /// 測試用例編號：B8-53
        /// 測試步驟：
        /// 1. 切換到 Condition 變數頁籤
        /// 2. 新增一個型態為 String 的變數
        /// 3. 切換到 Default 欄位設定值
        /// 測試描述：對型態為 String 的 Condition 變數進行值的輸入
        /// 預期輸出：變數的值可以正確設定，驗證模式已被移除
        /// </summary>
        [TestMethod("B8-53")]
        [TestCategory("變數編輯")]
        [DataRow("TestString", typeof(object), DisplayName = "Condition String變數輸入")]
        public void TIEditor_SetConditionStringValue_VerifyInput(string testValue, object dummy)
        {
            TestStringVariableInput(VariableTabType.Condition, VariableDataType.String, testValue);
        }

        /// <summary>
        /// 測試用例編號：B8-54
        /// 測試步驟：
        /// 1. 切換到 Condition 變數頁籤
        /// 2. 新增一個型態為 HexString 的變數
        /// 3. 切換到 Default 欄位設定值
        /// 測試描述：對型態為 HexString 的 Condition 變數進行值的輸入
        /// 預期輸出：變數的值可以正確設定，驗證模式已被移除
        /// </summary>
        [TestMethod("B8-54")]
        [TestCategory("變數編輯")]
        [DataRow("A5", typeof(object), DisplayName = "Condition HexString變數輸入")]
        public void TIEditor_SetConditionHexStringValue_VerifyInput(string testValue, object dummy)
        {
            TestStringVariableInput(VariableTabType.Condition, VariableDataType.HexString, testValue);
        }

        /// <summary>
        /// 測試用例編號：B8-55
        /// 測試步驟：
        /// 1. 切換到 Global 變數頁籤
        /// 2. 新增一個型態為 String 的變數
        /// 3. 切換到 Default 欄位設定值
        /// 測試描述：對型態為 String 的 Global 變數進行值的輸入
        /// 預期輸出：變數的值可以正確設定，驗證模式已被移除
        /// </summary>
        [TestMethod("B8-55")]
        [TestCategory("變數編輯")]
        [DataRow("GlobalString", typeof(object), DisplayName = "Global String變數輸入")]
        public void TIEditor_SetGlobalStringValue_VerifyInput(string testValue, object dummy)
        {
            TestStringVariableInput(VariableTabType.Global, VariableDataType.String, testValue);
        }

        /// <summary>
        /// 測試用例編號：B8-56
        /// 測試步驟：
        /// 1. 切換到 Global 變數頁籤
        /// 2. 新增一個型態為 HexString 的變數
        /// 3. 切換到 Default 欄位設定值
        /// 測試描述：對型態為 HexString 的 Global 變數進行值的輸入
        /// 預期輸出：變數的值可以正確設定，驗證模式已被移除
        /// </summary>
        [TestMethod("B8-56")]
        [TestCategory("變數編輯")]
        [DataRow("FF", typeof(object), DisplayName = "Global HexString變數輸入")]
        public void TIEditor_SetGlobalHexStringValue_VerifyInput(string testValue, object dummy)
        {
            TestStringVariableInput(VariableTabType.Global, VariableDataType.HexString, testValue);
        }

        private void TestStringVariableInput(VariableTabType varType, VariableDataType dataType, string testValue)
        {
            try
            {
                string callName = $"Var_{dataType}_{varType}";
                var varDataGrid = InitializeVariableDataGrid(
                    varType,
                    "",
                    callName,
                    dataType,
                    VariableEditType.EditBox);

                // 輸入測試值
                varDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
                varDataGrid.PerformInput("/ByCell[1,@Default]", InputType.SendContent, testValue);
                Press(Keys.Enter);

                // 驗證輸入值
                string actualValue = varDataGrid.GetCellBy(1, "Default").GetText();
                actualValue.ShouldEqualTo(testValue, $"Default欄位的值應為 {testValue}");

                // 驗證無錯誤提示
                var errorDialog = PP5IDEWindow.PerformGetElement("/Window[Error]");
                errorDialog.ShouldBeNull("不應出現錯誤提示視窗");

                // 切換欄位確認值保留
                varDataGrid.PerformClick("/ByCell[1,@CallName]", ClickType.LeftClick);
                actualValue = varDataGrid.GetCellBy(1, "Default").GetText();
                actualValue.ShouldEqualTo(testValue, "切換欄位後值應保持不變");
            }
            finally
            {
                PP5IDEWindow.CloseWindow(0);
            }
        }

        [TestMethod("B8-57")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableTabType.Condition, typeof(object))]
        //[DataRow(VariableTabType.Result, typeof(object))]
        //[DataRow(VariableTabType.Temp, typeof(object))]
        [DataRow(VariableTabType.Global, typeof(object))]
        //B8-57
        public void TIEditor_UseTabToSwitchTableSelectedCell_CanSetValueInTheCell(VariableTabType variableType, object dummy)
        {
            //VariableTabNavi(variableType);
            //PP5DataGrid varDataGrid = new PP5DataGrid((PP5Element)GetDataTableElement(variableType.GetDescription()));
            //varDataGrid.GetCellBy(varDataGrid.LastRowNo + 1, "No").LeftClick();

            //Press(Keys.Tab);
            //varDataGrid.RefreshSelectedCell();
            //varDataGrid.SelectedCellInfo.SelectedCell.DoubleClick();
            //Press(Keys.Up);
            ////varDataGrid.SelectedCellInfo.SelectedCell.SendText(variableType + "_sn");
            //SendSingleKeys(variableType + "_sn");

            //Press(Keys.Tab);
            ////varDataGrid.RefreshSelectedCell();
            ////varDataGrid.SelectedCellInfo.SelectedCell.SendText(variableType + "_cn");
            //SendSingleKeys(variableType + "_cn");

            //Press(Keys.Tab);
            //SendSingleKeys(VariableDataType.Float.GetDescription());
            //Press(Keys.Enter);

            string showName = variableType + "_sn";
            string callName = variableType + "_cn";
            VariableDataType dataType = VariableDataType.String2DArray;
            VariableEditType editType = VariableEditType.EditBox;
            InitializeVariableDataGrid(variableType, showName, callName, dataType, editType, "10", "10");
        }

        /// <summary>
        /// 測試用例編號：B8-58
        /// 測試步驟：
        /// 1. 切換到變數頁籤
        /// 2. 新增一個測試變數
        /// 3. 依序對每個欄位執行雙擊操作
        /// 4. 驗證每個欄位都能正常進入編輯狀態且不發生異常
        /// 測試描述：驗證變數表格中所有欄位的雙擊操作功能
        /// 預期輸出：所有欄位皆可正常進入編輯模式，不會發生異常
        /// </summary>
        [TestMethod("B8-58")]
        [TestCategory("變數編輯")]
        [DataRow(VariableTabType.Condition, new string[] { "Show Name", "Call Name", "Data Type", "Edit Type", "Min.", "Max.", "Default", "Format", "Enum Item" }, typeof(object), DisplayName = "Condition變數欄位雙擊")]
        [DataRow(VariableTabType.Result, new string[] { "Show Name", "Call Name", "Data Type", "MinimumSpec.", "Defect Code", "MaximumSpec.", "Defect Code" }, typeof(object), DisplayName = "Result變數欄位雙擊")]
        [DataRow(VariableTabType.Temp, new string[] { "Show Name", "Call Name", "Data Type", "Max.", "Default" }, typeof(object), DisplayName = "Temporary變數欄位雙擊")]
        [DataRow(VariableTabType.Global, new string[] { "Show Name", "Call Name", "Data Type", "Edit Type", "Min.", "Max.", "Default", "Format", "Enum Item" }, typeof(object), DisplayName = "Global變數欄位雙擊")]
        public void TIEditor_DoubleClickAllFields_CheckEditableAndNoException(
            VariableTabType variableType,
            string[] columnNames,
            object dummy)
        {
            try
            {
                // 1. 初始化變數表格
                string CallName = $"B8-58_{variableType}";
                var varDataGrid = InitializeVariableDataGrid(
                    variableType,
                    "",
                    CallName,
                    VariableDataType.Integer,
                    VariableEditType.EditBox);

                // 2. 依序對每個欄位執行雙擊操作並驗證
                foreach (string columnName in columnNames)
                {
                    try
                    {
                        // 執行雙擊
                        varDataGrid.PerformClick($"/ByCell[1,@{columnName}]", ClickType.LeftDoubleClick);

                        // 驗證欄位是否進入編輯模式
                        var cell = varDataGrid.GetCellBy(1, columnName);
                        bool isEditable = cell.Enabled && CursorHelper.GetCursor() == Cursor.IBeam;
                        isEditable.ShouldBeTrue($"{columnName} 欄位應可進入編輯模式");

                        // 按下 Escape 離開編輯模式
                        Press(Keys.Escape);

                        // 確認是否正常離開編輯模式
                        cell = varDataGrid.GetCellBy(1, columnName);
                        cell.ShouldNotBeNull($"離開編輯模式後應能正常取得 {columnName} 欄位");
                    }
                    catch (Exception ex)
                    {
                        Assert.Fail($"對 {columnName} 欄位執行雙擊操作時發生異常: {ex.Message}");
                    }
                }
            }
            finally
            {
                // 清理測試環境
                PP5IDEWindow.CloseWindow(0);
            }
        }

        [TestMethod("B8-60")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableTabType.Condition, VariableEditType.EditBox, VariableEditType.ComboBox, 0, typeof(object), DisplayName = "Change to EditBox from ComboBox")]
        [DataRow(VariableTabType.Global, VariableEditType.EditBox, VariableEditType.ComboBox, 0, typeof(object), DisplayName = "Change to EditBox from ComboBox")]
        //B8-60
        public void TIEditor_VariableChangeEditType_OtherFieldsShouldBeCleared(VariableTabType variableType, VariableEditType fromEditType, VariableEditType toEditType, object value, object dummy)
        {
            object format = new VariableDecimalPlaces[] { VariableDecimalPlaces.One };
            string showName = variableType + "_sn";
            string callName = variableType + "_cn";
            VariableDataType dataType = VariableDataType.Double;
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(variableType, showName, callName, dataType, fromEditType);

            VariableInfo variableInfo = new VariableInfo(variableType, callName, dataType, fromEditType);
            AddValueToDataGrid(varDataGrid, variableInfo, VariableColumnType.Min, value);
            AddValueToDataGrid(varDataGrid, variableInfo, VariableColumnType.Max, value);
            AddValueToDataGrid(varDataGrid, variableInfo, VariableColumnType.Default, value);
            AddValueToDataGrid(varDataGrid, variableInfo, VariableColumnType.Format, format);

            //VariableSelectionMoveBackward(varDataGrid, variableType, dataType, toEditType, 4);
            varDataGrid.PerformGetElement($"/ByCell[{varDataGrid.LastRowNo}, {(int)VariableColumnType.EditType}]")
                       .SelectItem(toEditType.GetDescription());

            //var ColumnsToCheck = Enum.GetValues(typeof(VariableColumnType)).OfType<VariableColumnType>().ToList().GetRange((int)VariableColumnType.Min, 4);
            var ColumnsToCheck = TypeExtension.GetEnumDescriptions<VariableColumnType>().GetRange((int)VariableColumnType.Min - (int)VariableColumnType.No, 4);
            foreach (var colName in ColumnsToCheck)
                varDataGrid.PerformGetElement($"/ByCell[{varDataGrid.LastRowNo}, {colName}]").GetText().ShouldBeNull();

            // clean up global variable
            if (variableType == VariableTabType.Global)
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
        }

        [TestMethod("B8-61")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableTabType.Condition, VariableEditType.ComboBox, VariableEditType.EditBox, 0, typeof(object), DisplayName = "Change to ComboBox from EditBox")]
        [DataRow(VariableTabType.Global, VariableEditType.ComboBox, VariableEditType.EditBox, 0, typeof(object), DisplayName = "Change to ComboBox from EditBox")]
        //B8-61
        public void TIEditor_VariableChangeEditType_EnumItemFieldShouldBeCleared(VariableTabType variableType, VariableEditType fromEditType, VariableEditType toEditType, object value, object dummy)
        {
            object format = new VariableDecimalPlaces[] { VariableDecimalPlaces.One };
            string showName = variableType + "_sn";
            string callName = variableType + "_cn";
            VariableDataType dataType = VariableDataType.Double;
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(variableType, showName, callName, dataType, fromEditType);
            VariableSelectionMoveForward(varDataGrid, variableType, dataType, fromEditType, 5);

            string enumName = "1";
            string enumValue = "1";
            AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue);

            //VariableSelectionMoveBackward(varDataGrid, variableType, dataType, toEditType, 4);
            VariableColumnType editTypeColumn = variableType == VariableTabType.Condition ? VariableColumnType.EditType : VariableColumnType.EditType + 1;
            VariableColumnType enumItemColumn = variableType == VariableTabType.Condition ? VariableColumnType.EnumItem : VariableColumnType.EnumItem + 1;

            varDataGrid.PerformGetElement($"/ByCell[ {varDataGrid.LastRowNo} , {(int)editTypeColumn}]")
                       .SelectItem(toEditType.GetDescription());

            varDataGrid.PerformGetElement($"/ByCell[ {varDataGrid.LastRowNo} , {(int)enumItemColumn}]").GetText().ShouldBeNull();

            // clean up global variable
            if (variableType == VariableTabType.Global)
                PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
        }

        [TestMethod("B8-62")]
        [TestCategory("變數編輯(B8)")]
        //B8-62
        public void TIEditor_SetDefaultWithSpecificValueInConditionVariable_CheckValueIsCorrect()
        {
            string CallName = "B8-62";
            string defaultValue = "100.1";
            VariableDataType varDataType = VariableDataType.FloatPercentage;
            VariableEditType varEditType = VariableEditType.EditBox;
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, defaultValue);
            defaultValue.ShouldEqualTo(varDataGrid.GetCellValue(1, "Default"));
        }

        [TestMethod("B8-63")]
        [TestCategory("變數編輯(B8)")]
        //B8-63
        public void TIEditor_SetDefaultWithSpecificValueInGlobalVariable_CheckValueIsCorrect()
        {
            string CallName = "B8-63";
            string defaultValue = "100.1";
            VariableDataType varDataType = VariableDataType.FloatPercentage;
            VariableEditType varEditType = VariableEditType.EditBox;
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Global, "", CallName, varDataType, varEditType, defaultValue);
            defaultValue.ShouldEqualTo(varDataGrid.GetCellValue(varDataGrid.LastRowNo, "Default"));

            // clean up global variable
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
        }

        [TestMethod("B8-64")]
        [TestCategory("變數編輯(B8)")]
        //B8-64
        public void TIEditor_Set10GlobalVariables_CheckTICanLoadInGlobalVariables()
        {
            string CallName = "B8-64";
            string tiname = "B8-64";
            int count = 10;
            VariableDataType varDataType = VariableDataType.FloatPercentage;
            VariableEditType varEditType = VariableEditType.EditBox;

            string[] CallNamesExpected = new string[10];
            for (int i = 0; i < count; i++)
            {
                CallNamesExpected[i] = string.Format("{0}_{1}", CallName, i.ToString());
                CreateNewVariable1(VariableTabType.Global, "", CallNamesExpected[i], varDataType, varEditType);
            }

            SaveAsNewTI(tiname);

            PerformOpenNewTI();
            VariableTabNavi(VariableTabType.Global);
            PP5DataGrid varDataGrid = new PP5DataGrid((PP5Element)GetDataTableElement(TIDataTableAutoIDType.GlbGrid));

            varDataGrid.ScrollToBottom();

            List<string> CallNamesActual = new List<string>();

            while (CallNamesActual.Count <= 10)
            {
                CallNamesActual.AddRange(varDataGrid.GetSingleColumnValues(4/*Call Name*/).Where(v => v.Contains(CallName)));
                varDataGrid.ScrollToSpecificVerticalPosition(rowNo: varDataGrid.TotalRowCount - 2 * varDataGrid.DisplayedRowCount + 1);
            }

            //// clean up global variable
            //PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
            if (CallNamesActual.Count > 10)
                CallNamesActual = CallNamesActual.Distinct().ToList();

            CallNamesExpected.ShouldEqualTo(CallNamesActual.ToArray());
        }

        [TestMethod("B8-65")]
        [TestCategory("變數編輯(B8)")]
        //B8-65
        public void TIEditor_SetEditTypeComboboxInConditionVariable_CheckCanSet()
        {
            string CallName = "B8-65";
            VariableDataType varDataType = VariableDataType.HexString;
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", CallName, varDataType, varEditType);
            varEditType.ToString().ShouldEqualTo(varDataGrid.GetCellValue(1, "Edit Type"));
        }

        [TestMethod("B8-66")]
        [TestCategory("變數編輯(B8)")]
        //B8-66
        public void TIEditor_SetEditTypeComboboxInGlobalVariable_CheckCanSet()
        {
            string CallName = "B8-66";
            VariableDataType varDataType = VariableDataType.HexString;
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Global, "", CallName, varDataType, varEditType);
            varEditType.ToString().ShouldEqualTo(varDataGrid.GetCellValue(1, "Edit Type"));

            // clean up global variable
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Delete);
        }

        [TestMethod("B8-67")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-67
        public void TIEditor_SetDataTypeInConditionVariable_CheckInvalidRank(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-67";
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", CallName, varDataType, arrSize1, arrSize2);

            if (((PP5Element)PP5IDEWindow).ErrorMessages.Count > 0)
            {
                string toolTipErrMsg = "Array size must less than or equal to 100000";
                Hashtable errMsgs = ((PP5Element)PP5IDEWindow).ErrorMessages;
                errMsgs.ContainsValue(toolTipErrMsg).ShouldBeTrue();
                errMsgs.Keys.Count.ShouldEqualTo(2);
                PP5IDEWindow.PerformGetElement("/Window[0]/Button[Ok]").Enabled.ShouldBeFalse();
            }

            // Close the 2d array setting window with correct values
            PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, 100);
            PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, 100);
            PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
        }

        [TestMethod("B8-68")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-68
        public void TIEditor_SetDataTypeInResultVariable_CheckInvalidRank(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-68";
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Result, "", CallName, varDataType, arrSize1, arrSize2);

            if (((PP5Element)PP5IDEWindow).ErrorMessages.Count > 0)
            {
                string toolTipErrMsg = "Array size must less than or equal to 100000";
                Hashtable errMsgs = ((PP5Element)PP5IDEWindow).ErrorMessages;
                errMsgs.ContainsValue(toolTipErrMsg).ShouldBeTrue();
                errMsgs.Keys.Count.ShouldEqualTo(2);
                PP5IDEWindow.PerformGetElement("/Window[0]/Button[Ok]").Enabled.ShouldBeFalse();
            }

            // Close the 2d array setting window with correct values
            PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, 100);
            PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, 100);
            PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
        }

        [TestMethod("B8-69")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-69
        public void TIEditor_SetDataTypeInTempVariable_CheckInvalidRank(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-69";
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Temp, "", CallName, varDataType, arrSize1, arrSize2);

            if (((PP5Element)PP5IDEWindow).ErrorMessages.Count > 0)
            {
                string toolTipErrMsg = "Array size must less than or equal to 100000";
                Hashtable errMsgs = ((PP5Element)PP5IDEWindow).ErrorMessages;
                errMsgs.ContainsValue(toolTipErrMsg).ShouldBeTrue();
                errMsgs.Keys.Count.ShouldEqualTo(2);
                PP5IDEWindow.PerformGetElement("/Window[0]/Button[Ok]").Enabled.ShouldBeFalse();
            }

            // Close the 2d array setting window with correct values
            PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, 100);
            PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, 100);
            PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
        }

        [TestMethod("B8-70")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        [DataRow(VariableDataType.Float2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Float2DArray\"")]
        [DataRow(VariableDataType.Integer2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Integer2DArray\"")]
        [DataRow(VariableDataType.Byte2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Byte2DArray\"")]
        [DataRow(VariableDataType.String2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"String2DArray\"")]
        [DataRow(VariableDataType.HexString2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"HexString2DArray\"")]
        [DataRow(VariableDataType.Long2DArray, "100", "1001", typeof(object), DisplayName = "Verify DataType is \"Long2DArray\"")]
        //B8-70
        public void TIEditor_SetDataTypeInGlobalVariable_CheckInvalidRank(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-70";
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Global, "", CallName, varDataType, arrSize1, arrSize2);

            if (((PP5Element)PP5IDEWindow).ErrorMessages.Count > 0)
            {
                string toolTipErrMsg = "Array size must less than or equal to 100000";
                Hashtable errMsgs = ((PP5Element)PP5IDEWindow).ErrorMessages;
                errMsgs.ContainsValue(toolTipErrMsg).ShouldBeTrue();
                errMsgs.Keys.Count.ShouldEqualTo(2);
                PP5IDEWindow.PerformGetElement("/Window[0]/Button[Ok]").Enabled.ShouldBeFalse();
            }

            // Close the 2d array setting window with correct values
            PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, 100);
            PP5IDEWindow.PerformInput("/Window[0]/Edit[1]", InputType.SendContent, 100);
            PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
        }

        [TestMethod("B8-71_1")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double, typeof(object), DisplayName = "Verify DataType is \"DoubleArray\"")]
        //B8-71_1
        public void TIEditor_EditTypeIsEmptyAndDataTypeDoubleInConditionVariable_VerifyOtherFieldsNotEditable(VariableDataType varDataType, object dummy)
        {
            string CallName = "B8-71_1";
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", CallName, varDataType);

            // Close the 2d array setting window with correct values
            bool canEdit = false;
            for (int colNo = (int)VariableColumnType.Min; colNo <= (int)VariableColumnType.Default; colNo++)
            {
                varDataGrid.PerformGetElement($"/ByCell[1, {colNo}]").LeftClick();
                if (DllHelper.GetCursor() == Cursor.IBeam)
                    canEdit = true;
            }

            canEdit.ShouldBeFalse();
        }

        [TestMethod("B8-71_2")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.DoubleArray, "1", typeof(object), DisplayName = "Verify DataType is \"DoubleArray\"")]
        //B8-71_2
        public void TIEditor_EditTypeIsEmptyAndDataType1dArrInConditionVariable_VerifyOtherFieldsNotEditable(VariableDataType varDataType, string arrSize1, object dummy)
        {
            string CallName = "B8-71_2";
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", CallName, varDataType, arrSize1);

            // Close the 2d array setting window with correct values
            bool canEdit = false;
            for (int colNo = (int)VariableColumnType.Min; colNo <= (int)VariableColumnType.Default; colNo++)
            {
                varDataGrid.PerformGetElement($"/ByCell[1, {colNo}]").LeftClick();
                //if (PP5IDEWindow.HasWindow(0))
                //{
                //    canEdit = true;
                //    PP5IDEWindow.CloseWindow(0);
                //}
                if (PP5IDEWindow.CloseWindow(0))
                    canEdit = true;
            }

            canEdit.ShouldBeFalse();
        }

        [TestMethod("B8-71_3")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.Double2DArray, "1", "1", typeof(object), DisplayName = "Verify DataType is \"Double2DArray\"")]
        //B8-71_3
        public void TIEditor_EditTypeIsEmptyAndDataType2dArrInConditionVariable_VerifyOtherFieldsNotEditable(VariableDataType varDataType, string arrSize1, string arrSize2, object dummy)
        {
            string CallName = "B8-71_3";
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", CallName, varDataType, arrSize1, arrSize2);

            // Close the 2d array setting window with correct values
            bool canEdit = false;
            for (int colNo = (int)VariableColumnType.Min; colNo <= (int)VariableColumnType.Default; colNo++)
            {
                varDataGrid.PerformGetElement($"/ByCell[1, {colNo}]").LeftClick();
                //if (PP5IDEWindow.HasWindow(0))
                //{
                //    canEdit = true;
                //    PP5IDEWindow.CloseWindow(0);
                //}
                if (PP5IDEWindow.CloseWindow(0))
                    canEdit = true;
            }

            canEdit.ShouldBeFalse();
        }

        [TestMethod("B8-73")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.String, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set with \",\" in \"String\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.EditBox, typeof(object), DisplayName = "Verify Default can be set with \",\" in \"StringArray\" variable with EditType \"EditBox\"")]
        //B8-73
        public void TIEditor_SetDefaultInConditionVariable_CheckValueCommaCanBeSet(VariableDataType varDataType, VariableEditType varEditType, object dummy)
        {
            string CallName = "B8-73";
            string defaultValue = ",";
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, defaultValue);
            defaultValue.ShouldEqualTo(varDataGrid.GetCellValue(1, "Default"));
        }

        [TestMethod("B8-74")]
        [TestCategory("變數編輯(B8)")]
        [DataRow(VariableDataType.StringArrayOfUUTMaxSize, VariableEditType.ComboBox, typeof(object), DisplayName = "Verify Default can be set with \",\" in \"StringArray\" variable with EditType \"ComboBox\"")]
        //B8-74
        public void TIEditor_SetDefaultInConditionVariableWithStringArray_CheckValueCanBeSet(VariableDataType varDataType, VariableEditType varEditType, object dummy)
        {
            string CallName = "B8-74";
            string defaultValue = "B8-74";
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, defaultValue);
            defaultValue.ShouldEqualTo(varDataGrid.GetCellValue(1, "Default"));
        }

        [TestMethod("B9-1")]
        [TestCategory("進入驗證模式(B9)")]
        //B9-1
        public void TIEditor_PressExecutionControlBtn_CanEnterExecutionControlWindow()
        {
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Execution);
            WaitUntil(() => PP5IDEWindow.ModuleName == WindowType.Execution.GetDescription());
            WindowType.Execution.GetDescription().ShouldEqualTo(PP5IDEWindow.ModuleName);
            PP5IDEWindow.PerformGetElement("/ById[MessageRichTxtBox]").GetText().ShouldNotBeNull();
        }

        [TestMethod("B9-2")]
        [TestCategory("進入驗證模式(B9)")]
        //B9-2
        public void TIEditor_EditTiThenPressExecutionControlBtn_CanEnterExecutionControlWindow(VariableDataType varDataType, VariableEditType varEditType)
        {
            InitializeVariableDataGrid(VariableTabType.Condition, "", "B9-2", varDataType, varEditType);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Execution);
            WaitUntil(() => PP5IDEWindow.ModuleName == WindowType.Execution.GetDescription());
            WindowType.Execution.GetDescription().ShouldEqualTo(PP5IDEWindow.ModuleName);
            PP5IDEWindow.PerformGetElement("/ById[MessageRichTxtBox]").GetText().ShouldBeNull();
        }

        [TestMethod("B9-3")]
        [TestCategory("進入驗證模式(B9)")]
        //B9-3
        public void TIEditor_ChangeHWConigPressExecutionControlBtn_CanReinitializeExecutionControl(VariableDataType varDataType, VariableEditType varEditType)
        {
            InitializeVariableDataGrid(VariableTabType.Condition, "", "B9-3", varDataType, varEditType);
            MenuSelect("Functions", "Hardware Configuration");
            WaitUntil(() => PP5IDEWindow.ModuleName == WindowType.HardwareConfig.GetDescription());
            MenuSelect("File", "Open...");
            string currHWConfigName = PP5IDEWindow.PerformGetElement("/ById[fullPaneToolbox]").GetText();

            PP5IDEWindow.ToolBarSelect((int)HWConfToolBarButton.SaveAs);
            PP5IDEWindow.PerformInput("/ByName[Open File]/ById[txtFileName]", InputType.SendContent, currHWConfigName + "_new");
            PP5IDEWindow.PerformClick("/ByName[Open File,Ok]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarSelect((int)HWConfToolBarButton.SetAsSysDefault);

            MenuSelect("Windows", "TI Editor");
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Execution);
            WaitUntil(() => PP5IDEWindow.ModuleName == WindowType.Execution.GetDescription());
            WindowType.Execution.GetDescription().ShouldEqualTo(PP5IDEWindow.ModuleName);
            PP5IDEWindow.PerformGetElement("/ById[MessageRichTxtBox]").GetText().ShouldNotBeNull();
        }

        [TestMethod("B9-4")]
        [TestCategory("進入驗證模式(B9)")]
        //B9-4
        public void TIEditor_OpenTiNotLoadedThenPressExecutionControlBtn_CheckExecutionControlBtnDisabled()
        {
            PerformCloseTI();
            MenuSelect("Functions", "TI Editor");
            PP5IDEWindow.PerformClick("/ByName[Enter Point, Cancel]", ClickType.LeftClick);
            PP5IDEWindow.ToolBarGetSelectionState((int)TIToolBarButton.Execution).ShouldBeFalse();
        }

        [TestMethod("B9-5")]
        [TestCategory("進入驗證模式(B9)")]
        //B9-5
        public void TIEditor_SwitchToExecutionControlWindowAndBackToTIWindow_CheckTIBtnDisabled()
        {
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Execution);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.TIEditor);
            PP5IDEWindow.ToolBarGetSelectionState((int)TIToolBarButton.TIEditor).ShouldBeTrue();
        }

        [TestMethod("B10-1")]
        [TestCategory("畫面顯示狀態(B10)")]
        [DataRow(0, "TIContext", "TCParamEdit", "ParamType", "ConstType", "Variable", "TCSrchBx", "TCDev", "TCSys")]    // 0: horizontal
        [DataRow(1, "TCParamDesc", "TCSys")]                                                                            // 1: vertical
        //B10-1
        public void TIEditor_ChangeTIWindowSize_CheckUIIsNormalAndScrollbarWillShow(int horizontalOrVertical, params string[] panelIds)
        {
            MoveToElementOffsetStartingPoint startExpandingPoint = MoveToElementOffsetStartingPoint.BottomRight;
            int dragOffsetX = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width - PP5IDEWindow.Width;
            int dragOffsetY = System.Windows.Forms.Screen.PrimaryScreen.Bounds.Height - PP5IDEWindow.Height;
            Dictionary<string, bool> canScrollDict = new Dictionary<string, bool>();

            ((PP5Element)PP5IDEWindow).MoveToElement(MoveToElementOffsetStartingPoint.InnerCenterTop);
            PP5IDEWindow.DoubleClick();

            ((PP5Element)PP5IDEWindow).MoveToElement(MoveToElementOffsetStartingPoint.InnerCenterTop);
            ((PP5Element)PP5IDEWindow).DragAndDropToOffset(MoveToElementOffsetStartingPoint.InnerCenterTop, 0, 0, PP5IDEWindow.PointAtTopLeft.X, PP5IDEWindow.PointAtTopLeft.Y);

            // Check all text label and scrollbar state
            canScrollDict = TIWindowGetAllScrollBarEnabledStates(horizontalOrVertical);

            // Expand the window to maximum size
            ((PP5Element)PP5IDEWindow).DragAndDropToOffset(startExpandingPoint, 0, 0, dragOffsetX, dragOffsetY);

            // Recheck all text label and scrollbar state again
            canScrollDict = TIWindowGetAllScrollBarEnabledStates(horizontalOrVertical);

            //string[] panelIds = new string[] { "TIContext", "TCParamEdit", "ParamType", "ConstType", "Variable", "TCSrchBx", "TCDev", "TCSys" };
            foreach (string panelId in panelIds)
                canScrollDict[panelId].ShouldBeFalse();
        }

        [TestMethod("B10-2")]
        [TestCategory("畫面顯示狀態(B10)")]
        [DataRow(0)]    // 0: horizontal
        [DataRow(1)]    // 1: vertical
        //B10-2
        public void TIEditor_DragSplitterInTIWindow_CheckPanelRetainsMinWidthOrHeight(int horizontalOrVertical)
        {
            List<DragAndDropInfo> dragAndDropInfos = new List<DragAndDropInfo>();
            List<IElement> panels = new List<IElement>();

            var TIContextPanel = PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TIContextPanel]");
            var TCParamPanel = PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TCParameterPanel]");
            var VariablePanel = PP5IDEWindow.PerformGetElement("/ByName[dockItem1,dockItem2]/ById[VariablePanel]");
            var TCListPanel = PP5IDEWindow.PerformGetElement("/ById[dockManager]/ByName[dockItem4]/ById[TCListPanel]");
            panels.AddRange(new IElement[] { TIContextPanel, TCParamPanel, VariablePanel, TCListPanel });

            if (horizontalOrVertical == 0)          // record horizontal splitter draging actions
            {
                dragAndDropInfos.Add(new DragAndDropInfo(MoveToElementOffsetStartingPoint.CenterLeft, (TIContextPanel.PointAtRightCenter.X + TCParamPanel.PointAtLeftCenter.X) / 2, TIContextPanel.PointAtRightCenter.Y,
                                                                                                      -TIContextPanel.Width, 0));
                dragAndDropInfos.Add(new DragAndDropInfo(MoveToElementOffsetStartingPoint.CenterLeft, (TIContextPanel.PointAtRightCenter.X + TCParamPanel.PointAtLeftCenter.X) / 2, TIContextPanel.PointAtRightCenter.Y,
                                                                                                      TCParamPanel.Width, 0));

                dragAndDropInfos.Add(new DragAndDropInfo(MoveToElementOffsetStartingPoint.CenterLeft, (TCParamPanel.PointAtRightCenter.X + TCListPanel.PointAtLeftCenter.X) / 2, TCListPanel.PointAtLeftCenter.Y,
                                                                                                      -TCParamPanel.Width, 0));
                dragAndDropInfos.Add(new DragAndDropInfo(MoveToElementOffsetStartingPoint.CenterLeft, (TCParamPanel.PointAtRightCenter.X + TCListPanel.PointAtLeftCenter.X) / 2, TCListPanel.PointAtLeftCenter.Y,
                                                                                                      TCListPanel.Width, 0));
            }
            else if (horizontalOrVertical == 1)     // record vertical splitter draging actions
            {
                dragAndDropInfos.Add(new DragAndDropInfo(MoveToElementOffsetStartingPoint.CenterTop, VariablePanel.PointAtTopCenter.X, (TIContextPanel.PointAtBottomCenter.Y + VariablePanel.PointAtTopCenter.Y) / 2,
                                                                                                     0, -TIContextPanel.Height));
                dragAndDropInfos.Add(new DragAndDropInfo(MoveToElementOffsetStartingPoint.CenterTop, VariablePanel.PointAtTopCenter.X, (TIContextPanel.PointAtBottomCenter.Y + VariablePanel.PointAtTopCenter.Y) / 2,
                                                                                                     0, VariablePanel.Height));
            }


            // Expand the window to maximum size
            foreach (var dadInfo in dragAndDropInfos)
            {
                int minPanelWidthExpected = 24; int minPanelHeightExpected = 30;        // minimum panel Height and Width
                int minPanelWidthActaul = 0, minPanelHeightActaul = 0;
                ((PP5Element)PP5IDEWindow.PerformGetElement("/ByClass[MainControl]/ById[dockManager]/ByName[dockItem4]"))
                                         .DragAndDropToOffset(dadInfo.startingPointType, dadInfo.srcOffsetX, dadInfo.srcOffsetY, dadInfo.destOffsetX, dadInfo.destOffsetY);
                if (horizontalOrVertical == 0)
                    minPanelWidthActaul = panels.Min(p => p.Width);
                else if (horizontalOrVertical == 1)
                    minPanelHeightActaul = panels.Min(p => p.Height);

                minPanelWidthExpected.ShouldEqualTo(minPanelWidthActaul);
                minPanelHeightExpected.ShouldEqualTo(minPanelHeightActaul);
                RestoreDefaultDocking(WindowType.TIEditor);
                //MenuSelect("Edit", "Default Dock");
                //PP5IDEWindow.PerformClick("/ByName[TI Editor,Yes]", ClickType.LeftClick);
            }
        }

        [TestMethod("B10-3")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-3
        public void TIEditor_AddTIDescriptionAndDragSplitter_CheckDescTextAreaFullyDisplayed()
        {
            string desc = new string('a', 128);
            TestItemTabNavi(TestItemTabType.TIDescription);
            PP5IDEWindow.PerformInput("/ById[TIDescriptionView,TIDescriptionScrollViewer,TBDescription]", InputType.SendContent, desc);

            var TIContextPanel = PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TIContextPanel]");
            var TCParamPanel = PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TCParameterPanel]");
            DragAndDropInfo dragAndDropInfo = new DragAndDropInfo(MoveToElementOffsetStartingPoint.CenterLeft, (TIContextPanel.PointAtRightCenter.X + TCParamPanel.PointAtLeftCenter.X) / 2, TIContextPanel.PointAtRightCenter.Y,
                                                                                               10, 0);

            while (!TIContextPanel.PerformGetElement("/ById[TIDescriptionScrollViewer]").CanScrollHorizontally)
            {
                ((PP5Element)TIContextPanel).DragAndDropToOffset(dragAndDropInfo);
                desc.ShouldEqualTo(TIContextPanel.PerformGetElement("/ById[TIDescriptionView,TIDescriptionScrollViewer,TBDescription]").GetText());
            }
        }

        [TestMethod("B10-4")]
        [TestCategory("畫面顯示狀態(B10)")]
        [DataRow("極光1.jpg")]
        [DataRow("雪中山莊&amp;湖景.jpg")]
        //B10-4
        public void TIEditor_AddTIDescriptionImage_CheckImageIsDisplayed(string imgName)
        {
            TestItemTabNavi(TestItemTabType.TIDescription);
            PP5IDEWindow.PerformClick("/ById[TIDescriptionView,TIDescriptionScrollViewer,AddBtn]", ClickType.LeftClick);

            PP5DataGrid tvFileExplorer = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement("/ByClass[DUIViewWndClassName]/ById[ProperTreeHost]/ByName[樹狀檢視]"));
            tvFileExplorer.ScrollToBottom();

            PP5IDEWindow.PerformClick("/ByName[桌面,本機,圖片]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick($"/ById[listview]/ByName[項目檢視,{imgName}]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Select a picture,開啟(O)]", ClickType.LeftClick);

            byte[] imageArray = System.IO.File.ReadAllBytes($@"C:\Users\adam.chen\Pictures\{imgName}");
            string base64ImageLocalFile = Convert.ToBase64String(imageArray);

            IElement imgDisplayed = PP5IDEWindow.PerformGetElement("/ById[TIDescriptionView,TIDescriptionScrollViewer]/ByClass[Image]");
            string base64ImgDisplayed = imgDisplayed.GetElementImageFromScreenshot().AsBase64EncodedString;
            base64ImageLocalFile.ShouldEqualTo(base64ImgDisplayed);
        }

        [TestMethod("B10-5")]
        [TestCategory("畫面顯示狀態(B10)")]
        [DataRow("極光1.jpg, 雪中山莊&amp;湖景.jpg")]
        //B10-5
        public void TIEditor_AddTIDescriptionImages_CheckImagesAreDisplayed(string imgNames)
        {
            string[] imgNameArr = imgNames.Split(',');
            string[] base64ImgsDisplayed = new string[imgNameArr.Length];
            string[] base64ImgsLocalFile = new string[imgNameArr.Length];
            TestItemTabNavi(TestItemTabType.TIDescription);
            
            for (int i = 0; i < imgNameArr.Length; i++)
            {
                PP5IDEWindow.PerformClick("/ById[TIDescriptionView,TIDescriptionScrollViewer,AddBtn]", ClickType.LeftClick);
                PP5DataGrid tvFileExplorer = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement("/ByClass[DUIViewWndClassName]/ById[ProperTreeHost]/ByName[樹狀檢視]"));
                tvFileExplorer.ScrollToBottom();

                PP5IDEWindow.PerformClick("/ByName[桌面,本機,圖片]", ClickType.LeftClick);
                PP5IDEWindow.PerformClick($"/ById[listview]/ByName[項目檢視,{imgNameArr[i]}]", ClickType.LeftClick);
                PP5IDEWindow.PerformClick("/ByName[Select a picture,開啟(O)]", ClickType.LeftClick);

                IElement imgDisplayed = PP5IDEWindow.PerformGetElement("/ById[TIDescriptionView,TIDescriptionScrollViewer]/ByClass[Image]");
                base64ImgsDisplayed[i] = imgDisplayed.GetElementImageFromScreenshot().AsBase64EncodedString;

                byte[] imageArray = System.IO.File.ReadAllBytes($@"C:\Users\adam.chen\Pictures\{imgNameArr}");
                base64ImgsLocalFile[i] = Convert.ToBase64String(imageArray);
            }

            base64ImgsLocalFile.ShouldEqualTo(base64ImgsDisplayed);
        }

        [TestMethod("B10-6")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-6
        public void TIEditor_ChangeLanguage_CheckInfoCorrect()
        {
            MenuSelect("Languages", "簡体中文");
            MenuSelect("语言", "繁體中文");
            MenuSelect("語言", "English");
        }

        [TestMethod("B10-7")]
        [TestCategory("畫面顯示狀態(B10)")]
        [DataRow(TestItemTabType.TIDescription, false)]
        [DataRow(TestItemTabType.TIContext, true)]
        //B10-7
        public void TIEditor_SwitchingBetweenTIContextAndDesc(TestItemTabType tabType, bool IsWithinScreen)
        {
            TestItemTabNavi(tabType);
            IsWithinScreen.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByClass[PGGridAeraView]/ById[PGGrid,dataPresenter]").IsWithinScreen);
        }

        [TestMethod("B10-8")]
        [TestCategory("畫面顯示狀態(B10)")]
        [DataRow(TIPanelType.TIContextPanel)]
        [DataRow(TIPanelType.TCParameterPanel)]
        [DataRow(TIPanelType.VariablePanel)]
        [DataRow(TIPanelType.TCListPanel)]
        //B10-8
        public void TIEditor_MovePanelOutAndDockBack_CheckPositionSameAfterReDocked(TIPanelType panelType)
        {
            var panel = PP5IDEWindow.PerformClick($"/ById[{panelType}]", ClickType.LeftClick);
            Point panelPosDocked = panel.PointAtCenter;
            DragAndDropInfo dragAndDropInfo = new DragAndDropInfo(MoveToElementOffsetStartingPoint.InnerCenterTop, 0, 0, 100, 100);
            ((PP5Element)panel).DragAndDropToOffset(dragAndDropInfo);

            panel.PerformClick("/", MoveToElementOffsetStartingPoint.InnerCenterTop, ClickType.RightClick);
            PP5IDEWindow.PerformClick("/ByClass[Popup,ItemContextMenu]/ByName[Dock]", ClickType.LeftClick);

            panelPosDocked.ShouldEqualTo(panel.PointAtCenter);
        }

        [TestMethod("B10-9")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-9
        public void TIEditor_PerformDifferentAction_CheckProgressBarIsRunning()
        {
            string[] menuitemActions = new string[] { "Edit => New", "Edit => Loaded", "Edit => Save", "Utility => Compile" };
            MenuSelect(menuitemActions[0].Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));       // Open new ti
            OpenNewTI();

            MenuSelect(menuitemActions[1].Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));       // Load old ti: "demo1"
            LoadOldTI("demo1");

            SaveAsNewTI("demo2");                                                                                       // Save a new ti named: "demo2"

            MenuSelect(menuitemActions[2].Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));       // Save the ti

            MenuSelect(menuitemActions[3].Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));       // Compile the ti
            PP5IDEWindow.PerformClick("/ByName[Compile,OK]", ClickType.LeftClick);
        }

        [TestMethod("B10-10")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-10
        public void TIEditor_PerformDifferentAction_CheckWindowTitleIsChanged(string menuitemAction)
        {
            string TIWindowTitle;
            string[] menuitemActions = new string[] { "Edit => New", "Edit => Loaded", "Edit => Save", "Utility => Compile" };
            MenuSelect(menuitemActions[0].Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));       // Open new ti
            OpenNewTI();

            TIName = "UnClassified";
            TIWindowTitle = string.Format("User-TI-UnClassified-{0}", TIName);
            TIWindowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ById[TIContextPanel]/ByClass[PGGridAeraView]/ById[TitleTxtBlk]").GetText());


            TIName = "demo1";
            MenuSelect(menuitemActions[1].Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));       // Load old ti: "demo1"
            LoadOldTI(TIName);
            TIWindowTitle = PowerPro5Config.IDE_TIEditorWindowName;
            TIWindowTitle.ShouldEqualTo(PP5IDEWindow.GetText());
            
            TIWindowTitle = string.Format("User-TI-UnClassified-{0}", TIName);
            TIWindowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ById[TIContextPanel]/ByClass[PGGridAeraView]/ById[TitleTxtBlk]").GetText());
            
            
            TIName = "demo2";
            SaveAsNewTI(TIName);                                                                                       // Save a new ti named: "demo2"

            TIWindowTitle = string.Format("User-TI-UnClassified-{0}", TIName);
            TIWindowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ById[TIContextPanel]/ByClass[PGGridAeraView]/ById[TitleTxtBlk]").GetText());


            MenuSelect(menuitemActions[2].Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));       // Save the ti
            TIWindowTitle = string.Format("User-TI-UnClassified-{0}", TIName);
            TIWindowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ById[TIContextPanel]/ByClass[PGGridAeraView]/ById[TitleTxtBlk]").GetText());
        }

        [TestMethod("B10-11")]
        [TestCategory("畫面顯示狀態(B10)")]
        [DataRow(TIPanelType.TIContextPanel)]
        [DataRow(TIPanelType.TCParameterPanel)]
        [DataRow(TIPanelType.VariablePanel)]
        [DataRow(TIPanelType.TCListPanel)]
        //B10-11
        public void TIEditor_AutoHideAllDockPanels_AutoHideIsFunctioning(TIPanelType panelType)
        {
            PP5IDEWindow.PerformClick($"/ByName[dockItem2,dockItem3]/ById[{panelType},PART_PinButton]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement($"ByClass[AutoHideGroup]/ById[{panelType}]").ShouldNotBeNull();
        }

        [TestMethod("B10-12")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-12
        public void TIEditor_LoadOldTI_CheckContentIsCorrect()
        {
            TIName = "B10-12";
            string[] cellValuesExpected = new string[] { "", "B10-12_Cond", VariableDataType.Float.GetDescription(), VariableEditType.EditBox.GetDescription() };
            InitializeVariableDataGrid(VariableTabType.Condition, cellValuesExpected[0], cellValuesExpected[1], TypeExtension.GetEnumByDescription<VariableDataType>(cellValuesExpected[2]), TypeExtension.GetEnumByDescription<VariableEditType>(cellValuesExpected[3]));
            AddCommandBy(TestCmdGroupType.String, 1);
            SaveAsNewTI(TIName);
            PerformLoadOldTI(TIName);

            string cmdName = GetCommandBy(TestCmdGroupType.String, 1).GetText();
            string[] cellValuesActual = new string[4];
            PP5IDEWindow.PerformClick($"/ByCell@{VariableTabType.Condition}[1, @No]", ClickType.LeftClick);
            for (int i = 0; i < 4; i++)
                cellValuesActual[i] = PP5IDEWindow.PerformGetElement($"/ByCell@{VariableTabType.Condition}[{i+1}]").GetText();

            cmdName.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByCell@{TIDataTableAutoIDType.PGGrid}[1, @Test Command]").GetText());
            cellValuesExpected.ShouldEqualTo(cellValuesActual);
        }

        [TestMethod("B10-13")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-13
        public void TIEditor_ChangeTIContextDataColumnWidth_CanAdjustWidth()
        {
            string[] colNames = new string[] { "IsSkip", "Label", "GroupName", "CommandName", "DisplayedParameters", "Description" };

            TestItemTabNavi(TestItemTabType.TIContext);
            var TIContextPanel = PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TIContextPanel]");

            PP5Element thumb;
            foreach (string colName in colNames)
            {
                thumb = (PP5Element)TIContextPanel.PerformGetElement($"/ById[HeaderPanel]/ByName[{colName}]/ByClass[Thumb]");
                thumb.DragAndDropToOffset(MoveToElementOffsetStartingPoint.Center, 0, 0, -50, 0);
                thumb.DragAndDropToOffset(MoveToElementOffsetStartingPoint.Center, 0, 0, 500, 0);
            }
        }

        [TestMethod("B10-14")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-14
        public void TIEditor_ChangeVariableDataColumnWidth_CanAdjustWidth()
        {
            string[] colNames = new string[] { "ShowName", "CallName", "DisplayedType", "Minimum", "Maximum", "Default", "Format", "DisplayedEnum" };

            VariableTabNavi(VariableTabType.Condition);
            var VariablePanel = PP5IDEWindow.PerformGetElement("/ByName[dockItem1,dockItem2]/ById[VariablePanel]");

            PP5Element thumb;
            foreach (string colName in colNames)
            {
                thumb = (PP5Element)VariablePanel.PerformGetElement($"/ById[HeaderPanel]/ByName[{colName}]/ByClass[Thumb]");
                thumb.DragAndDropToOffset(MoveToElementOffsetStartingPoint.Center, 0, 0, -50, 0);
                thumb.DragAndDropToOffset(MoveToElementOffsetStartingPoint.Center, 0, 0, 500, 0);
            }
        }

        [TestMethod("B10-15")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-15
        public void TIEditor_UndoThenCheckIsUndoed()
        {
            AddCommandBy(TestCmdGroupType.String, 1);
            PP5IDEWindow.PerformGetElement($"/ByCell@{TIDataTableAutoIDType.PGGrid}[1, @Test Command]").GetText().ShouldNotBeNull();

            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Undo);
            PP5IDEWindow.PerformGetElement($"/ByCell@{TIDataTableAutoIDType.PGGrid}[1, @Test Command]").GetText().ShouldBeNull();
        }

        [TestMethod("B10-16")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-16
        public void TIEditor_UndoAndRedoThenCheckIsRedoed()
        {
            AddCommandBy(TestCmdGroupType.String, 1);
            PP5IDEWindow.PerformGetElement($"/ByCell@{TIDataTableAutoIDType.PGGrid}[1, @Test Command]").GetText().ShouldNotBeNull();

            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Undo);
            PP5IDEWindow.ToolBarSelect((int)TIToolBarButton.Redo);
            PP5IDEWindow.PerformGetElement($"/ByCell@{TIDataTableAutoIDType.PGGrid}[1, @Test Command]").GetText().ShouldNotBeNull();
        }

        [TestMethod("B10-17")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-17
        public void TIEditor_OpenMultipleTI_CheckUINormallyDisplayed()
        {
            PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TIContextPanel]").ShouldNotBeNull();
            PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TCParameterPanel]").ShouldNotBeNull();
            PP5IDEWindow.PerformGetElement("/ByName[dockItem1,dockItem2]/ById[VariablePanel]").ShouldNotBeNull();
            PP5IDEWindow.PerformGetElement("/ById[dockManager]/ByName[dockItem4]/ById[TCListPanel]").ShouldNotBeNull();

            PerformOpenNewTI(closeCurrTI: false);

            PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TIContextPanel]").ShouldNotBeNull();
            PP5IDEWindow.PerformGetElement("/ByName[dockItem2,dockItem3]/ById[TCParameterPanel]").ShouldNotBeNull();
            PP5IDEWindow.PerformGetElement("/ByName[dockItem1,dockItem2]/ById[VariablePanel]").ShouldNotBeNull();
            PP5IDEWindow.PerformGetElement("/ById[dockManager]/ByName[dockItem4]/ById[TCListPanel]").ShouldNotBeNull();
        }

        [TestMethod("B10-18")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-18
        public void TIEditor_LoadOldTI_CheckProgressBarIsRunning()
        {
            TIName = "B10-18";
            SaveAsNewTI(TIName);

            taskManager.StartNewTask($"PerformLoadOldTI: {TIName}", PerformLoadOldTI, TIName);
            //PerformLoadOldTI(TIName);
            
            while (PP5IDEWindow.PerformGetElement("/ProgressBar[0]") != null)
                ((PP5Element)PP5IDEWindow.PerformGetElement("/ProgressBar[0]")).RangeValue.Value.ShouldBeInRange(0, 100);
        }

        [TestMethod("B10-19")]
        [TestCategory("畫面顯示狀態(B10)")]
        //B10-19
        public void TIEditor_FloatThePanelThenReopenTI_CheckInitializeWindowsNotCoveredByTheFloatPanel()
        {
            var panel = PP5IDEWindow.PerformGetElement($"/ById[{TIPanelType.TIContextPanel}]");
            string panelTitle = panel.GetText();

            panel.PerformClick("/", MoveToElementOffsetStartingPoint.InnerCenterTop, ClickType.RightClick);
            PP5IDEWindow.PerformClick("/ByClass[Popup,ItemContextMenu]/ByName[Float]", ClickType.LeftClick);

            PP5IDEWindow.PerformGetElement("/Window[-1]").GetText().ShouldNotEqualTo(panelTitle);
            PP5IDEWindow.PerformClick("/Window[-1]/ByName[Cancel]", ClickType.LeftClick);

            RestoreDefaultDocking(WindowType.TIEditor);
            //MenuSelect("Edit", "Default Dock");
            //PP5IDEWindow.PerformClick("/ByName[TI Editor,Yes]", ClickType.LeftClick);
        }

        [TestMethod("B11-1")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "工具 => 选项", "选项")]
        [DataRow("语言 => 繁體中文", "工具 => 選項", "選項")]
        [DataRow("語言 => English", "Utility => Option", "Option")]
        //B11-1
        public void TIEditor_OpenOptionWindowInMenuItem_CheckTitleIsSame(string languagePath, string menuItemPath, string optionWindowTitle)
        {
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
            MenuSelect(menuItemPath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
            PP5IDEWindow.PerformGetElement("/Window[-1]").GetText().ShouldNotEqualTo(optionWindowTitle);
        }

        [TestMethod("B11-2")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(0)]
        [DataRow(10)]
        //B11-2
        public void TIEditor_OpenOptionWindowAndSetLoadNum_CheckRowCountEqualsLoadNum(int rowCount)
        {
            string languagePath = "language => English";
            string menuItemPath = "Utility => Option";
            string optionWindowTitle = "Option";

            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));                 // Switch language
            MenuSelect(menuItemPath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));                 // Open Option Widnow
            PP5IDEWindow.PerformInput($"/ByName[{optionWindowTitle}]/ByClass[TextBox]", InputType.SendContent, rowCount);   // Fill-in total load number

            PP5IDEWindow.PerformGetElement($"/ByName[{optionWindowTitle}]/ById[dataPresenter]").GetRowCount();              // Check load number same as row count
            PP5IDEWindow.CloseWindow(0);
        }

        [TestMethod("B11-3")]
        [TestCategory("子視窗測試(B11)")]
        //B11-3
        public void TIEditor_OpenOptionWindowAndTickReverse_CheckReverseIsChecked()
        {
            string menuItemPath = "Utility => Option";
            string optionWindowTitle = "Option";
            string rowCount = "1";

            MenuSelect(menuItemPath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));                 // Open Option Widnow
            PP5IDEWindow.PerformInput($"/ByName[{optionWindowTitle}]/ByClass[TextBox]", InputType.SendContent, rowCount);

            var OptionDg = PP5IDEWindow.PerformGetElement($"/ByName[{optionWindowTitle}]/ById[dataPresenter]");             // Tick Reverse checkbox
            OptionDg.GetCellBy(1, "Reverse").TickCheckBox();
            OptionDg.GetCellBy(1, "Reverse").isElementChecked().ShouldBeTrue();
            PP5IDEWindow.CloseWindow(0);
        }

        [TestMethod("B11-4")]
        [TestCategory("子視窗測試(B11)")]
        //B11-4
        public void TIEditor_OpenOptionWindowAndSetValues_CheckSettingIsStoredAfterWindowReopened()
        {
            string menuItemPath = "Utility => Option";
            string optionWindowTitle = "Option";
            string rowCount = "2";

            MenuSelect(menuItemPath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));                 // Open Option Widnow
            PP5IDEWindow.PerformInput($"/ByName[{optionWindowTitle}]/ByClass[TextBox]", InputType.SendContent, rowCount);   // Add 2 rows by setting load number = 2

            var OptionDg = PP5IDEWindow.PerformGetElement($"/ByName[{optionWindowTitle}]/ById[dataPresenter]");             // Tick 1st row's Reverse checkbox
            OptionDg.GetCellBy(1, "Reverse").TickCheckBox();
            PP5IDEWindow.PerformClick($"/ByName[{optionWindowTitle}, Ok]", ClickType.LeftClick);

            MenuSelect(menuItemPath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));                 // Reopen the option window
            rowCount.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByName[{optionWindowTitle}]/ByClass[TextBox]").GetText());
            OptionDg = PP5IDEWindow.PerformGetElement($"/ByName[{optionWindowTitle}]/ById[dataPresenter]");
            OptionDg.GetCellBy(1, "Reverse").isElementChecked().ShouldBeTrue();
            OptionDg.GetRowCount();

            PP5IDEWindow.CloseWindow(0);
        }

        [TestMethod("B11-5")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "测试命令", "参数数值", "表达式编辑器")]
        [DataRow("语言 => 繁體中文", "測試命令", "參數數值", "表達式編輯器")]
        [DataRow("語言 => English", "Test Command", "Parameter Value", "Expression Editor")]
        //B11-5
        public void TIEditor_OpenVariableWindowWithParameterTypeExpression_CheckTitleIsSame(string languagePath, string TestCmdMulLing, string ParamValMulLing, string windowTitle)
        {
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));     // Switch language
            TestItemTabNavi(TestItemTabType.TIContext);                                                         // Switch to test item context window
            AddCommandBy(TestCmdGroupType.System_Flow_Control, "If");                                           // Add command: "System, Flow Control", "If"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdMulLing}]", ClickType.LeftClick);             // LeftClick on command
            
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@{ParamValMulLing}]", ClickType.LeftClick);     // Open Window "Expression Editor"
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());                  // Check window title is correct
        }

        [TestMethod("B11-6")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.Float, "Float_B11-6")]
        [DataRow(VariableDataType.String, "String_B11-6")]
        [DataRow(VariableDataType.HexString, "HexString_B11-6")]
        [DataRow(VariableDataType.Byte, "Byte_B11-6")]
        //B11-6
        public void TIEditor_EditVariableWindowWithParameterTypeExpression_CheckCanSelectTheCorrectParamType(VariableDataType dataType, string callName)
        {
            string TestCmdColName = "Test Command";
            string ParamValColName = "Parameter Value";
            string windowTitle = "Expression Editor";

            InitializeVariableDataGrid(VariableTabType.Condition, "", callName, dataType, VariableEditType.EditBox);    // Create a condition variable with given dataType and callName
            TestItemTabNavi(TestItemTabType.TIContext);                                                                 // Switch to test item context window
            AddCommandBy(TestCmdGroupType.System_Flow_Control, "If");                                                   // Add command: "System, Flow Control", "If"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdColName}]", ClickType.LeftClick);                     // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@{ParamValColName}]", ClickType.LeftClick);             // Open Window "Expression Editor"

            IElement expressionWindow = PP5IDEWindow.PerformGetElement($"/Window[{windowTitle}]");
            expressionWindow.PerformClick("/ById[TB_Value,UI_textbox]", ClickType.LeftClick);

            SendSingleKeys("\"");
            SendSingleKeys(callName);
            expressionWindow.PerformGetElement("/ById[UI_combobox]")
                            .SelectItem(0);

            if (dataType == VariableDataType.Float)
                PP5IDEWindow.PerformClick($"/ByName[Expression Editor,Numeric]", ClickType.LeftClick);
            else
                PP5IDEWindow.PerformClick($"/ByName[Expression Editor,{dataType.ToString()}]", ClickType.LeftClick);
        }

        [TestMethod("B11-7")]
        [TestCategory("子視窗測試(B11)")]
        //B11-7
        public void TIEditor_EditVariableWindowWithParameterTypeExpression_CheckSettingIsStoredAfterWindowReopened()
        {
            string TestCmdColName = "Test Command";
            string ParamValColName = "Parameter Value";
            string windowTitle = "Expression Editor";
            VariableDataType dataType = VariableDataType.Float;
            string callName = "Float_B11-6";

            TestItemTabNavi(TestItemTabType.TIContext);                                                         // Switch to test item context window
            AddCommandBy(TestCmdGroupType.System_Flow_Control, "If");                                           // Add command: "System, Flow Control", "If"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdColName}]", ClickType.LeftClick);             // LeftClick on command
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@{ParamValColName}]", ClickType.LeftClick);     // Open Window "Expression Editor"

            IElement expressionWindow = PP5IDEWindow.PerformGetElement($"/Window[{windowTitle}]");
            if (dataType == VariableDataType.Float)
                expressionWindow.PerformClick($"/ByName[Numeric]", ClickType.LeftClick);
            else
                expressionWindow.PerformClick($"/ByName[{dataType.ToString()}]", ClickType.LeftClick);

            expressionWindow.PerformClick("/ById[TB_Value,UI_textbox]", ClickType.LeftClick);

            SendSingleKeys("\"");
            SendSingleKeys(callName);
            expressionWindow.PerformGetElement("/ById[UI_combobox]")
                            .SelectItem(0);
            SendSingleKeys("=0");

            expressionWindow.PerformClick("/ByName[Check]", ClickType.LeftClick);
            expressionWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@{ParamValColName}]", ClickType.LeftClick);     // Open Window "Expression Editor"

            string expStrExpected = string.Format("\"{0}\" = 0", callName);
            expStrExpected.ShouldEqualTo(expressionWindow.PerformGetElement("/ById[TB_Value,UI_textbox]").GetText());
        }

        [TestMethod("B11-8")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "测试命令", "参数数值", "条件", "结果", "临时", "全域", "常数")]
        [DataRow("语言 => 繁體中文", "測試命令", "參數數值", "條件", "結果", "臨時", "全域", "常數")]
        [DataRow("語言 => English", "Test Command", "Parameter Value", "Condition", "Result", "Temporary", "Global", "Constant")]
        //B11-8
        public void TIEditor_EditVariableWindowWithParameterTypeFuncPar_CheckDataTypeLabelsAreSame(string languagePath, string TestCmdMulLing, string ParamValMulLing, params string[] dataTypeLabelsMulLang)
        {
            string windowTitle = "Func Parameter Editor";
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));         // Switch language
            TestItemTabNavi(TestItemTabType.TIContext);                                                             // Switch to test item context window
            AddCommandBy(TestCmdGroupType.System_Flow_Control, "Call_Dll");                                         // Add command: "System, Flow Control", "Call_Dll"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdMulLing}]", ClickType.LeftClick);                 // LeftClick on command

            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@{ParamValMulLing}]", InputType.SendContent, 1);    // 4th parameter input "1"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@{ParamValMulLing}]", ClickType.LeftClick);         // Open Window "Func Parameter Editor"
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());                      // Check window title is correct

            var FuncParameterEditor = PP5IDEWindow.PerformGetElement($"/ByName[{windowTitle}]");
            string[] dataTypeLabelIds = new string[] { "CndRdoBtn", "RstRdoBtn", "TmpRdoBtn", "GlbRdoBtn", "CntRdoBtn" };
            for (int i = 0; i < dataTypeLabelIds.Length; i++)
                dataTypeLabelsMulLang[i].ShouldEqualTo(FuncParameterEditor.PerformGetElement($"/ById[{dataTypeLabelIds[i]}]").GetText());
        }

        [TestMethod("B11-9")]
        [TestCategory("子視窗測試(B11)")]
        //B11-9
        public void TIEditor_EditVariableWindowWithParameterTypeFuncPar_CheckCanSelectTheCorrectParamType()
        {
            VariableDataType dataType = VariableDataType.Float;
            string callName = "Float_B11-9";
            string TestCmdColName = "Test Command";
            string ParamValColName = "Parameter Value";
            string windowTitle = "Func Parameter Editor";
            
            InitializeVariableDataGrid(VariableTabType.Condition, "", callName, dataType, VariableEditType.EditBox);    // Create a condition variable with given dataType and callName
            TestItemTabNavi(TestItemTabType.TIContext);                                                                 // Switch to test item context window
            AddCommandBy(TestCmdGroupType.System_Flow_Control, "Call_Dll");                                             // Add command: "System, Flow Control", "Call_Dll"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdColName}]", ClickType.LeftClick);                     // LeftClick on command

            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@{ParamValColName}]", InputType.SendContent, 1);        // 4th parameter input "1"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@{ParamValColName}]", ClickType.LeftClick);             // Open Window "Func Parameter Editor"
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());                          // Check window title is correct

            var funcParEdtWindow = PP5IDEWindow.PerformGetElement($"/ByName[{windowTitle}]");
            funcParEdtWindow.PerformClick("/ByCell@MappingGrid[1,@No]", ClickType.LeftClick);
            funcParEdtWindow.PerformClick("/ById[CndRdoBtn]/ByName[Condition]", ClickType.LeftClick);
            funcParEdtWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]")
                            .SelectItem(callName);

            callName.ShouldEqualTo(funcParEdtWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]").GetText());
        }

        [TestMethod("B11-10")]
        [TestCategory("子視窗測試(B11)")]
        //B11-10
        public void TIEditor_EditVariableWindowWithParameterTypeFuncPar_CheckSettingIsStoredAfterWindowReopened()
        {
            VariableDataType dataType = VariableDataType.Float;
            string callName = "Float_B11-10";
            string TestCmdColName = "Test Command";
            string ParamValColName = "Parameter Value";
            string windowTitle = "Func Parameter Editor";

            InitializeVariableDataGrid(VariableTabType.Condition, "", callName, dataType, VariableEditType.EditBox);    // Create a condition variable with given dataType and callName
            TestItemTabNavi(TestItemTabType.TIContext);                                                                 // Switch to test item context window
            AddCommandBy(TestCmdGroupType.System_Flow_Control, "Call_Dll");                                             // Add command: "System, Flow Control", "Call_Dll"
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdColName}]", ClickType.LeftClick);                     // LeftClick on command

            PP5IDEWindow.PerformInput($"/ByCell@ParameterGrid[4,@{ParamValColName}]", InputType.SendContent, 1);        // 4th parameter input "1"
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@{ParamValColName}]", ClickType.LeftClick);             // Open Window "Func Parameter Editor"
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());                          // Check window title is correct

            var funcParEdtWindow = PP5IDEWindow.PerformGetElement($"/ByName[{windowTitle}]");
            funcParEdtWindow.PerformClick("/ByCell@MappingGrid[1,@No]", ClickType.LeftClick);
            funcParEdtWindow.PerformClick("/ById[CndRdoBtn]/ByName[Condition]", ClickType.LeftClick);
            funcParEdtWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]")
                            .SelectItem(callName);

            callName.ShouldEqualTo(funcParEdtWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]").GetText());
            funcParEdtWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[5,@{ParamValColName}]", ClickType.LeftClick);             // Open Window "Func Parameter Editor"
            funcParEdtWindow = PP5IDEWindow.PerformGetElement($"/ByName[{windowTitle}]");
            funcParEdtWindow.PerformClick("/ByCell@MappingGrid[1,@No]", ClickType.LeftClick);

            callName.ShouldEqualTo(funcParEdtWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]").GetText());
            funcParEdtWindow.PerformGetElement("/ByName[Condition]").isElementChecked().ShouldBeTrue();
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 驗證在不同語言環境下，點選 SubTI 的命令後，點選第二個參數的參數數值時是否會正確創建對應語系的 Test Item Var Editor 子視窗
        /// </summary>
        /// <param name="languagePath">語言設定路徑，格式為 "language => 語言"</param>
        /// <param name="TestCmdMulLing">測試命令欄位名稱，根據不同語系顯示</param>
        /// <param name="ParamValMulLing">參數數值欄位名稱，根據不同語系顯示</param>
        /// <param name="windowTitle">預期的視窗標題，根據不同語系顯示</param>
        /// <remarks>
        /// 測試步驟：
        /// 1. 切換系統語言
        /// 2. 切換至測試項目上下文視窗
        /// 3. 添加 Sub TI 群組中的LoadIntArrayToBinaryStringArray命令
        /// 4. 點選命令並設置參數
        /// 5. 檢查子視窗標題
        /// 
        /// 預期結果：
        /// - 正確創建 Test Item Var Editor 子視窗
        /// - 子視窗標題符合當前語系
        /// </remarks>
        [TestMethod("B11-11")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "测试命令", "参数数值", "测试项目参数编辑器")]
        [DataRow("语言 => 繁體中文", "測試命令", "參數數值", "測試項目參數編輯器")]
        [DataRow("語言 => English", "Test Command", "Parameter Value", "Test Item Var Editor")]
        public void TIEditor_EditVariableWindowWithParameterTypeTiCondition_CheckTitleIsSame(
            string languagePath, 
            string TestCmdMulLing, 
            string ParamValMulLing, 
            string windowTitle)
        {
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.Sub_TI, "LoadIntArrayToBinaryStringArray");
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdMulLing}]", ClickType.LeftClick);
            
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@{ParamValMulLing}]", ClickType.LeftClick);
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());
        }

        /// <summary>
        /// 驗證在Test Item Var Editor子視窗中能否正確選擇參數類型和變數名稱
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 初始化變量
        ///    - Integer[L]類型，調用名稱: IntegerL_B11-12
        ///    - Integer類型，調用名稱: Integer_B11-12
        /// 2. 創建兩個條件變量
        ///    - 第一個變量：Integer[L]類型
        ///    - 第二個變量：Integer類型
        /// 3. 切換到測試項目上下文視窗
        /// 4. 添加 Sub TI 群組中的LoadIntArrayToBinaryStringArray命令
        /// 5. 設置參數並打開Test Item Var Editor
        ///    - 點擊命令
        ///    - 點擊第二個參數
        /// 6. 在Test Item Var Editor中進行參數選擇
        ///    - Row 1選擇Integer[L]類型變量
        ///    - Row 2選擇Integer類型變量
        /// 7. 驗證參數選擇是否正確
        /// 
        /// 預期結果：
        /// - Test Item Var Editor視窗正確打開
        /// - 成功選擇兩個不同類型的條件變量
        /// - 參數映射結果與預期一致
        /// </remarks>
        [TestMethod("B11-12")]
        [TestCategory("子視窗測試(B11)")]
        public void TIEditor_EditVariableWindowWithParameterTypeTiCondition_CheckCanSelectTheCorrectParamType()
        {
            // Initialize variables
            string callName1 = "IntegerL_B11-12";
            string callName2 = "Integer_B11-12";
            string TestCmdColName = "Test Command";
            string ParamValColName = "Parameter Value";
            string windowTitle = "Test Item Var Editor";
        
            // Create two condition variables
            InitializeVariableDataGrid(
                VariableTabType.Condition, 
                "", 
                callName1, 
                VariableDataType.IntegerArrayOfSize640, 
                VariableEditType.EditBox);
            
            InitializeVariableDataGrid(
                VariableTabType.Condition, 
                "", 
                callName2, 
                VariableDataType.Integer, 
                VariableEditType.EditBox);
        
            // Switch context and add command
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.Sub_TI, "LoadIntArrayToBinaryStringArray");
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdColName}]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@{ParamValColName}]", ClickType.LeftClick);
        
            // Verify window title
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());
        
            // Select parameters in editor
            var tiVarEditorWindow = PP5IDEWindow.PerformGetElement($"/ByName[{windowTitle}]");
            
            // Select first parameter (Integer[L])
            tiVarEditorWindow.PerformClick("/ByCell@MappingGrid[1,@No]", ClickType.LeftClick);
            tiVarEditorWindow.PerformClick("/ById[CndRdoBtn]/ByName[Condition]", ClickType.LeftClick);
            tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]")
                             .SelectItem(callName1);
        
            // Select second parameter (Integer)
            tiVarEditorWindow.PerformClick("/ByCell@MappingGrid[2,@No]", ClickType.LeftClick);
            tiVarEditorWindow.PerformClick("/ById[CndRdoBtn]/ByName[Condition]", ClickType.LeftClick);
            tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[2,@Mapping Parameter]")
                             .SelectItem(callName2);
        
            // Verify selections
            callName1.ShouldEqualTo(tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]").GetText());
            callName2.ShouldEqualTo(tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[2,@Mapping Parameter]").GetText());
        }

        /// <summary>
        /// 驗證Test Item Var Editor子視窗的設定值儲存功能
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 初始化變量
        ///    - Integer[L]類型，調用名稱: IntegerL_B11-13
        ///    - Integer類型，調用名稱: Integer_B11-13
        /// 2. 創建兩個條件變量
        ///    - 第一個變量：Integer[L]類型
        ///    - 第二個變量：Integer類型
        /// 3. 切換到測試項目上下文視窗
        /// 4. 添加 Sub TI 群組中的LoadIntArrayToBinaryStringArray命令
        /// 5. 設置參數並打開Test Item Var Editor
        ///    - 點擊命令
        ///    - 點擊第二個參數
        /// 6. 在Test Item Var Editor中進行參數選擇
        ///    - Row 1選擇Integer[L]類型變量
        ///    - Row 2選擇Integer類型變量
        /// 7. 點擊確定關閉視窗
        /// 8. 重新打開Test Item Var Editor視窗
        /// 9. 驗證設定值是否正確保留
        /// 
        /// 預期結果：
        /// - 重新打開Test Item Var Editor後，原有的參數設定應該保持不變
        /// - Row 1仍然選擇Integer[L]類型變量
        /// - Row 2仍然選擇Integer類型變量
        /// - Condition選項保持選中狀態
        /// </remarks>
        [TestMethod("B11-13")]
        [TestCategory("子視窗測試(B11)")]
        public void TIEditor_EditVariableWindowWithParameterTypeTiCondition_CheckSettingIsStoredAfterWindowReopened()
        {
            // Initialize variables
            string callName1 = "IntegerL_B11-13";
            string callName2 = "Integer_B11-13";
            string TestCmdColName = "Test Command";
            string ParamValColName = "Parameter Value";
            string windowTitle = "Test Item Var Editor";
        
            // Create two condition variables
            InitializeVariableDataGrid(
                VariableTabType.Condition, 
                "", 
                callName1, 
                VariableDataType.IntegerArrayOfSize640, 
                VariableEditType.EditBox);
            
            InitializeVariableDataGrid(
                VariableTabType.Condition, 
                "", 
                callName2, 
                VariableDataType.Integer, 
                VariableEditType.EditBox);
        
            // Switch context and add command
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.Sub_TI, "LoadIntArrayToBinaryStringArray");
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdColName}]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@{ParamValColName}]", ClickType.LeftClick);
        
            // Verify window title and make selections
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());
            var tiVarEditorWindow = PP5IDEWindow.PerformGetElement($"/ByName[{windowTitle}]");
        
            // Select and verify first parameter
            tiVarEditorWindow.PerformClick("/ByCell@MappingGrid[1,@No]", ClickType.LeftClick);
            tiVarEditorWindow.PerformClick("/ById[CndRdoBtn]/ByName[Condition]", ClickType.LeftClick);
            tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]")
                             .SelectItem(callName1);
        
            // Select and verify second parameter
            tiVarEditorWindow.PerformClick("/ByCell@MappingGrid[2,@No]", ClickType.LeftClick);
            tiVarEditorWindow.PerformClick("/ById[CndRdoBtn]/ByName[Condition]", ClickType.LeftClick);
            tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[2,@Mapping Parameter]")
                             .SelectItem(callName2);
        
            // Click OK to close window
            tiVarEditorWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        
            // Reopen window and verify settings
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[2,@{ParamValColName}]", ClickType.LeftClick);
            tiVarEditorWindow = PP5IDEWindow.PerformGetElement($"/ByName[{windowTitle}]");
        
            // Verify settings are preserved
            callName1.ShouldEqualTo(tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[1,@Mapping Parameter]").GetText());
            callName2.ShouldEqualTo(tiVarEditorWindow.PerformGetElement("/ByCell@MappingGrid[2,@Mapping Parameter]").GetText());
            tiVarEditorWindow.PerformGetElement("/ByName[Condition]").isElementChecked().ShouldBeTrue();
        
            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 驗證Vector Member子視窗的多語系顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 創建LineInVector類型變量
        ///    - 變量名稱: Vector_B11-14
        ///    - 變量類型: LineInVector
        /// 2. 切換系統語言
        ///    - 簡體中文
        ///    - 繁體中文
        ///    - English
        /// 3. 切換至測試項目上下文視窗
        /// 4. 添加SET命令(Arithmetic群組)
        /// 5. 點選第一個參數開啟Vector Member視窗
        /// 6. 檢查子視窗標題是否符合當前語系
        /// 
        /// 預期結果：
        /// - Vector Member視窗標題應符合當前語系：
        ///   - 簡體中文：向量成员
        ///   - 繁體中文：向量成員
        ///   - English：Vector Member
        /// </remarks>
        [TestMethod("B11-14")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "测试命令", "参数数值", "向量成员")]
        [DataRow("语言 => 繁體中文", "測試命令", "參數數值", "向量成員")]
        [DataRow("語言 => English", "Test Command", "Parameter Value", "Vector Member")]
        public void TIEditor_EditVariableWindowWithParameterTypeVector_CheckTitleIsSame(
            string languagePath,
            string TestCmdMulLing,
            string ParamValMulLing,
            string windowTitle)
        {
            // Create LineInVector variable
            string vectorName = "Vector_B11-14";
            InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                vectorName,
                VariableDataType.LineInVector,    // Changed to LineInVector type
                VariableEditType.EditBox);
        
            // Switch language
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
        
            // Switch to context and add SET command
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.Arithmetic, "SET");    // Changed to Arithmetic SET command
        
            // Set Vector parameter
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@{TestCmdMulLing}]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement($"/ByCell@ParameterGrid[1,@{ParamValMulLing}]").SelectItem(vectorName);
            //PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[1,@{ParamValMulLing}]", ClickType.LeftClick);
        
            // Verify window title
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());
        
            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 驗證Vector Member設定值在TI Editor參數欄位的顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 創建LineInVector類型變量
        /// 2. 切換至測試項目上下文視窗
        /// 3. 添加SET命令(Arithmetic群組)
        /// 4. 設定Vector參數：
        ///    - 選擇第一個參數
        ///    - 在ComboBox中選擇Vector變量
        /// 5. 在Vector Member視窗中：
        ///    - 選擇Vector Member類型 (Voltage/Frequency)
        ///    - 點擊確定
        /// 6. 驗證TI Editor參數欄位顯示
        /// </remarks>
        [TestMethod("B11-15")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Voltage", "Vector_B11-15.Voltage")]
        [DataRow("Frequency", "Vector_B11-15.Frequency")]
        public void TIEditor_EditVariableWindowWithParameterTypeVector_CheckMemberSelection(
            string memberType,
            string expectedValue)
        {
            // Create LineInVector variable
            string vectorName = "Vector_B11-15";
            InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                vectorName,
                VariableDataType.LineInVector,
                VariableEditType.EditBox);
        
            // Switch to context and add SET command
            TestItemTabNavi(TestItemTabType.TIContext);
            AddCommandBy(TestCmdGroupType.Arithmetic, "SET");
        
            // Select command and set vector parameter
            PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Test Command]", ClickType.LeftClick);
            PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[1,@Parameter Value]")
                        .SelectItem(vectorName);
        
            // Open Vector Member window and select member
            PP5IDEWindow.PerformClick("/ByCell@ParameterGrid[1,@Parameter Value]", ClickType.LeftClick);
            var vectorMemberWindow = PP5IDEWindow.PerformGetElement("/ByName[Vector Member]");
            vectorMemberWindow.PerformClick($"/ByName[{memberType}]", ClickType.LeftClick);
            vectorMemberWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // Verify parameter value
            expectedValue.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[1,@Parameter Value]").GetText());
        }


        /// <summary>
        /// 驗證Array Size子視窗的多語系顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 切換系統語言
        /// 2. 切換至變數編輯視窗
        /// 3. 點選Data Type欄位
        /// 4. 選擇Array類型
        /// 5. 檢查Array Size子視窗內的元素文字是否符合當前語系
        /// 
        /// 預期結果：
        /// - Array Size子視窗內的元素應符合當前語系：
        ///   - Labels和Button的文字正確顯示
        ///   - 確認按鈕文字正確顯示
        /// </remarks>
        [TestMethod("B11-16")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "資料类型", "请输入这个阵列的大小", "大小", "确定")]
        [DataRow("语言 => 繁體中文", "資料類型", "請輸入這個陣列的大小", "大小", "確定")]
        [DataRow("語言 => English", "Data Type", "Please input the size for this array type", "Size", "Ok")]
        public void TIEditor_EditVariableWindowWithArrayType_CheckElementTextIsSame(
            string languagePath,
            string DataTypeMulLing,
            string descLabel,
            string sizeLabel,
            string buttonText)
        {
            // Switch language
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
        
            // Open TI Editor and switch to variable tab
            MenuSelect("Functions", "TI Editor");
            VariableTabNavi(VariableTabType.Condition);
        
            // Add new variable and click data type
            string callName = "Array_B11-16";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition,"",callName);
            condDataGrid.PerformClick($"/ByCell[1,@{DataTypeMulLing}]", ClickType.LeftClick);

            // Select array type from combobox
            condDataGrid.PerformGetElement($"/ByCell[1,@{DataTypeMulLing}]")
                        .SelectItem(VariableDataType.IntegerArray.GetDescription());
        
            // Get Array Size Editor window
            var arraySizeWindow = PP5IDEWindow.PerformGetElement("/ByName[Array Size Editor]");
        
            // Verify window elements text
            descLabel.ShouldEqualTo(arraySizeWindow.PerformGetElement("/Text[0]").GetText());
            sizeLabel.ShouldEqualTo(arraySizeWindow.PerformGetElement("/Text[1]").GetText());
            buttonText.ShouldEqualTo(arraySizeWindow.PerformGetElement("/Button[-1]").GetText());

            // Close window
            arraySizeWindow.PerformClick($"ByName[{buttonText}]", ClickType.LeftClick);
        }
        
        /// <summary>
        /// 驗證Array Size設定值在TI Editor資料類型欄位的顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 2. 新增變數並設定資料類型為Array
        /// 3. 在Array Size視窗中輸入大小
        /// 4. 檢查資料類型欄位顯示
        /// 
        /// 預期結果：
        /// - 資料類型欄位應顯示正確的陣列大小格式
        /// - 格式應為: "Integer[10]" (若輸入大小為10)
        /// </remarks>
        [TestMethod("B11-17")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(10, "Integer[10]")]
        [DataRow(20, "Integer[20]")]
        public void TIEditor_EditVariableWindowWithArrayType_CheckArraySizeDisplay(int arraySize, string expectedDisplayText)
        {
            // Add new variable with array type
            string callName = "Array_B11-17";
            var condDataGrid = InitializeVariableDataGrid(
                                VariableTabType.Condition,
                                "",
                                callName,
                                VariableDataType.IntegerArray,
                                arraySize.ToString());
        
            // Verify data type display
            expectedDisplayText.ShouldEqualTo(condDataGrid.PerformGetElement("/ByCell[1,@Data Type]").GetText());
        }

        /// <summary>
        /// 驗證2D Array Size子視窗的多語系顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 切換系統語言
        /// 2. 切換至變數編輯視窗
        /// 3. 點選Data Type欄位
        /// 4. 選擇2D Array類型
        /// 5. 檢查2D Array Size子視窗內的元素文字是否符合當前語系
        /// 
        /// 預期結果：
        /// - 2D Array Size子視窗內的元素應符合當前語系
        /// - Labels和Button的文字正確顯示
        /// </remarks>
        [TestMethod("B11-18")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "資料类型", "请输入这个阵列的大小", "1D 大小", "2D 大小", "确定")]
        [DataRow("语言 => 繁體中文", "資料類型", "請輸入這個陣列的大小", "1D 大小", "2D 大小", "確定")]
        [DataRow("語言 => English", "Data Type", "Please input the size for this array type", "1D Size", "2D Size", "Ok")]
        public void TIEditor_EditVariableWindowWith2DArrayType_CheckElementTextIsSame(
            string languagePath,
            string DataTypeMulLing,
            string descLabel,
            string rank1Label,
            string rank2Label,
            string buttonText)
        {
            // Switch language
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
        
            // Open TI Editor and switch to variable tab
            MenuSelect("Functions", "TI Editor");
            VariableTabNavi(VariableTabType.Condition);
        
            // Add new variable and click data type
            string callName = "Array2D_B11-18";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName);
            condDataGrid.PerformClick($"/ByCell[1,@{DataTypeMulLing}]", ClickType.LeftClick);
        
            // Select 2D array type
            condDataGrid.PerformGetElement($"/ByCell[1,@{DataTypeMulLing}]")
                        .SelectItem(VariableDataType.Integer2DArray.GetDescription());
        
            // Get 2D Array Size Editor window
            var arraySizeWindow = PP5IDEWindow.PerformGetElement("/ByName[2D Array Size Editor]");
        
            // Verify window elements text
            descLabel.ShouldEqualTo(arraySizeWindow.PerformGetElement("/Text[0]").GetText());
            rank1Label.ShouldEqualTo(arraySizeWindow.PerformGetElement("/Edit[0]").GetText());
            rank2Label.ShouldEqualTo(arraySizeWindow.PerformGetElement("/Edit[1]").GetText());
            buttonText.ShouldEqualTo(arraySizeWindow.PerformGetElement("/Button[-1]").GetText());
        
            // Close window
            arraySizeWindow.PerformClick($"/ByName[{buttonText}]", ClickType.LeftClick);
        }
        
        /// <summary>
        /// 驗證2D Array Size設定值在TI Editor資料類型欄位的顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 2. 新增變數並設定資料類型為2D Array
        /// 3. 在2D Array Size視窗中輸入列數和行數
        /// 4. 檢查資料類型欄位顯示
        /// 
        /// 預期結果：
        /// - 資料類型欄位應顯示正確的2D陣列大小格式
        /// - 格式應為: "Integer[5,10]" (若輸入列數為5，行數為10)
        /// </remarks>
        [TestMethod("B11-19")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(5, 10, "Integer[5,10]")]
        [DataRow(3, 8, "Integer[3,8]")]
        public void TIEditor_EditVariableWindowWith2DArrayType_CheckArraySizeDisplay(
            int rank1,
            int rank2,
            string expectedDisplayText)
        {
            // Add new variable with 2D array type
            string callName = "Array2D_B11-19";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                VariableDataType.Integer2DArray,
                rank1.ToString(),
                rank2.ToString());
        
            // Verify data type display
            expectedDisplayText.ShouldEqualTo(
                condDataGrid.PerformGetElement("/ByCell[1,@Data Type]").GetText());
        }

        /// <summary>
        /// 驗證Variables Value Editor子視窗的多語系顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 切換系統語言
        /// 2. 切換至變數編輯視窗
        /// 3. 點選Data Type欄位設定為Array類型
        /// 4. 點選Default欄位開啟Variables Value Editor
        /// 5. 檢查Variables Value Editor子視窗標題是否符合當前語系
        /// 
        /// 預期結果：
        /// - Variables Value Editor視窗標題應符合當前語系：
        ///   - 簡體中文：变数编辑器
        ///   - 繁體中文：變數編輯器
        ///   - English：Variables Value Editor
        /// </remarks>
        [TestMethod("B11-20")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "预设值", "变数编辑器")]
        [DataRow("语言 => 繁體中文", "預設值", "變數編輯器")]
        [DataRow("語言 => English", "Default", "Variables Value Editor")]
        public void TIEditor_EditVariableWindowWithArrayType_CheckVariablesValueEditorTitleIsSame(
            string languagePath,
            string DefaultMulLing,
            string windowTitle)
        {
            // Switch language
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
        
            // Open TI Editor and switch to variable tab
            MenuSelect("Functions", "TI Editor");
            VariableTabNavi(VariableTabType.Condition);
        
            // Add new variable and set array type
            string callName = "Array_B11-20";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                VariableDataType.IntegerArray,
                "10");
        
            // Click Default field to open Variables Value Editor
            condDataGrid.PerformClick($"/ByCell[1,@{DefaultMulLing}]", ClickType.LeftClick);
        
            // Verify window title
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());
        
            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 驗證Variables Value Editor子視窗的錯誤提醒功能
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 2. 新增Array類型變數並設定大小為5
        /// 3. 點選Default欄位開啟Variables Value Editor
        /// 4. 輸入錯誤值 (超出範圍或格式不正確)
        /// 5. 檢查錯誤提示訊息
        /// 6. 驗證無法寫入值
        /// 
        /// 預期結果：
        /// - 輸入錯誤值時應顯示錯誤訊息
        /// - 錯誤提示應清楚說明問題
        /// - 禁止寫入錯誤值
        /// </remarks>
        [TestMethod("B11-21")]
        [TestCategory("子視窗測試(B11)")]
        // Format errors
        [DataRow("abc", "Value must be Integer Format")]
        [DataRow("!@#", "Value must be Integer Format")]
        [DataRow("12.34", "Value must be Integer Format")]
        // Boundary and out of range values
        [DataRow("2147483648", "Value must be Integer Format")]
        [DataRow("-2147483649", "Value must be Integer Format")]
        [DataRow("999999999999", "Value must be Integer Format")]
        // Mixed characters
        [DataRow("1a2b3", "Value must be Integer Format")]
        [DataRow("100 200", "Value must be Integer Format")]
        [DataRow("1,000", "Value must be Integer Format")]
        public void TIEditor_EditVariableWindowWithArrayType_CheckErrorMessage(string invalidValue, string expectedError)
        {
            // Add new variable with array type (size 5)
            string callName = "Array_B11-21";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                VariableDataType.IntegerArray,
                "5");
        
            // Open Variables Value Editor
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
        
            // Try to input invalid value
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);
        
            // Verify error message
            expectedError.ShouldEqualTo(valueEditor.PerformGetElement($"/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());

            // Try to click OK button (should be disabled)
            valueEditor.PerformGetElement("/Button[Ok]").Enabled.ShouldBeFalse();
        
            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 驗證Variables Value Editor設定值在TI Editor參數設定欄位的顯示
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 開啟TI Editor，並切換到變數標籤頁。
        /// 2. 新增一個Array類型的變數，大小為10。
        /// 3. 點擊Default欄位，打開Variables Value Editor，並輸入數值。
        /// 4. 點擊確定關閉Variables Value Editor。
        /// 5. 檢查TI Editor的參數設定欄位顯示。
        /// 
        /// 預期結果：
        /// - Variables Value Editor設定值可以正確的顯示在TI Editor的參數設定欄位。
        /// </remarks>
        [TestMethod("B11-22")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.FloatArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Float[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.IntegerArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Integer[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.DoubleArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Double[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.StringArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"String[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.ByteArray, VariableEditType.EditBox, "10", "00", typeof(object), DisplayName = "Verify Default can be set in \"Byte[]\" variable with EditType \"EditBox\"")]
        [DataRow(VariableDataType.LongArray, VariableEditType.EditBox, "10", "0", typeof(object), DisplayName = "Verify Default can be set in \"Long[]\" variable with EditType \"EditBox\"")]
        //B11-22
        public void TIEditor_EditVariableWindowWithArrayType_CheckDefaultValueDisplay(VariableDataType varDataType, VariableEditType varEditType, string arrSize1, string value, object dummy)
        {
            string CallName = "B11-22";
            string valuePattern = string.Format("{0}[{1}]", value, arrSize1);
            PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(VariableTabType.Condition, "", CallName, varDataType, varEditType, valuePattern, arrSize1);
            foreach (var defaultValue in varDataGrid.GetCellBy(1, "Default").GetText().Split(','))
                defaultValue.ShouldEqualTo(value);
        }

        /// <summary>
        /// 驗證Variables Value Editor設定值在重新打開後是否保留
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 2. 新增一個Array類型的變數，大小為5。
        /// 3. 點擊Default欄位，打開Variables Value Editor，並輸入數值。
        /// 4. 點擊確定關閉Variables Value Editor。
        /// 5. 再次點擊Default欄位，重新打開Variables Value Editor。
        /// 6. 驗證已設定的值是否正確保留。
        /// 
        /// 預期結果：
        /// - Variables Value Editor中的設定值應該在重新打開後正確保留。
        /// </remarks>
        [TestMethod("B11-23")]
        [TestCategory("子視窗測試(B11)")]
        public void TIEditor_VariableValueEditor_RetainValuesAfterReopen()
        {
            // Add new array variable with size 5
            string callName = "Array_B11-23";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                VariableDataType.IntegerArray,
                "5");
        
            // Open Variables Value Editor and input values
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            string inputValue = "1";
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, inputValue);
            // Click OK to close Variables Value Editor
            valueEditor.PerformClick("/Button[Ok]", ClickType.LeftClick);
        
            // Reopen Variables Value Editor
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var reopenedValueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
        
            // Verify the values are retained
            for (int i = 0; i < 5; i++)
            {
                string actualValue = reopenedValueEditor.PerformGetElement($"/ByClass[ListBox]/ListItem[{i}]").GetText();
                inputValue.ShouldEqualTo(actualValue);
            }
            // Close Variables Value Editor
            reopenedValueEditor.PerformClick("/Button[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 查看 TI Editor 是否會創建語系正確的 Variables Value Editor 的子視窗
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 1. 切換系統語言
        /// 2. 切換至變數編輯視窗
        /// 3. 點選Data Type欄位
        /// 4. 選擇2D Array類型
        /// 5. 設定2D Array Size
        /// 6. 點選Default欄位
        /// 7. 檢查Variables Value Editor子視窗
        /// 
        /// 預期結果：
        /// - 正確創建Variables Value Editor子視窗且語系正確
        /// </remarks>
        [TestMethod("B11-24")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "資料类型", "确定", "变数编辑器")]
        [DataRow("语言 => 繁體中文", "資料類型", "確定", "變數編輯器")]
        [DataRow("語言 => English", "Data Type", "Ok", "Variables Value Editor")]
        public void TIEditor_EditVariableWindowWith2DArrayType_CheckVariablesValueEditor(
            string languagePath,
            string DataTypeMulLing,
            string OkButton,
            string variablesValueEditorTitle)
        {
            // 切換系統語言
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
        
            // 切換至變數編輯視窗
            MenuSelect("Functions", "TI Editor");
            VariableTabNavi(VariableTabType.Condition);
        
            // 新增變數並點選Data Type欄位
            string callName = "Array2D_B11-24";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName);
            condDataGrid.PerformClick($"/ByCell[1,@{DataTypeMulLing}]", ClickType.LeftClick);
        
            // 選擇2D Array類型
            condDataGrid.PerformGetElement($"/ByCell[1,@{DataTypeMulLing}]")
                        .SelectItem(VariableDataType.Integer2DArray.GetDescription());
        
            // 設定2D Array Size
            var arraySizeWindow = PP5IDEWindow.PerformGetElement("/ByName[2D Array Size Editor]");
            arraySizeWindow.PerformInput("/Edit[0]", InputType.SendContent, "5");
            arraySizeWindow.PerformInput("/Edit[1]", InputType.SendContent, "10");
            arraySizeWindow.PerformClick($"/ByName[{OkButton}]", ClickType.LeftClick);
        
            // 點選Default欄位
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
        
            // 檢查Variables Value Editor子視窗
            variablesValueEditorTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement($"/ByName[{variablesValueEditorTitle}]").GetText());
        }

        /// <summary>
        /// 設定 2D Variables Value Editor 子視窗，如果設定的值不正確，檢查是否有錯誤提醒和禁止寫入的功能
        /// </summary>
        /// <remarks>
        /// 測試步驟：
        /// 2. 點選Data Type欄位
        /// 3. 選擇2D Array類型
        /// 4. 設定2D Array Size
        /// 5. 點選Default欄位
        /// 6. 檢查Variables Value Editor子視窗
        /// 7. 設定不正確的值
        /// 8. 檢查錯誤提醒
        /// 9. 檢查禁止寫入功能
        /// 10. 關閉 Variables Value Editor
        /// 
        /// 預期結果：
        /// - 正確提醒使用者設定的錯誤並且禁止寫入 Variable 中
        /// </remarks>
        //[TestMethod("B11-25_1")]
        //[TestCategory("子視窗測試(B11)")]
        //[DataRow("abc", "Value must be Integer Format")]
        //[DataRow("!@#", "Value must be Integer Format")]
        //[DataRow("12.34", "Value must be Integer Format")]
        //[DataRow("2147483648", "Value must be Integer Format")]
        //[DataRow("-2147483649", "Value must be Integer Format")]
        //[DataRow("999999999999", "Value must be Integer Format")]
        //[DataRow("1a2b3", "Value must be Integer Format")]
        //[DataRow("100 200", "Value must be Integer Format")]
        //[DataRow("1,000", "Value must be Integer Format")]
        //public void TIEditor_EditVariableWindowWith2DArrayType_CheckInvalidInput(
        //    string invalidValue,
        //    string expectedError)
        //{
        //    // 新增變數並點選Data Type欄位
        //    string callName = "Array2D_B11-25_1";
        //    var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName);
        //    condDataGrid.PerformClick("/ByCell[1,@Data Type]", ClickType.LeftClick);
        
        //    // 選擇2D Array類型
        //    condDataGrid.PerformGetElement("/ByCell[1,@Data Type]")
        //                .SelectItem(VariableDataType.Integer2DArray.GetDescription());
        
        //    // 設定2D Array Size
        //    var arraySizeWindow = PP5IDEWindow.PerformGetElement("/ByName[2D Array Size Editor]");
        //    arraySizeWindow.PerformInput("/Edit[0]", InputType.SendContent, "5");
        //    arraySizeWindow.PerformInput("/Edit[1]", InputType.SendContent, "10");
        //    arraySizeWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        
        //    // 點選Default欄位
        //    condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
        
        //    // 檢查Variables Value Editor子視窗
        //    var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
        //    "Variables Value Editor".ShouldEqualTo(valueEditor.GetText());
        
        //    // 設定不正確的值
        //    valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);
        
        //    // 檢查錯誤提醒
        //    expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
        
        //    // 檢查禁止寫入功能
        //    valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
        
        //    // 關閉 Variables Value Editor
        //    valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        //}

        //[TestMethod("B11-25_2")]
        //[TestCategory("子視窗測試(B11)")]
        //[DataRow("abc", "Value must be Double Format")]
        //[DataRow("!@#", "Value must be Double Format")]
        //[DataRow("1.2 3.4", "Value must be Double Format")]
        //[DataRow("5.6 7.8", "Value must be Double Format")]
        //[DataRow("9.10 11.12", "Value must be Double Format")]
        //public void TIEditor_EditVariableWindowWith2DDoubleArrayType_CheckInvalidInput(
        //    string invalidValue,
        //    string expectedError)
        //{
        //    // 新增變數並點選Data Type欄位
        //    string callName = "Array2D_B11-25_2";
        //    var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName);
        //    condDataGrid.PerformClick("/ByCell[1,@Data Type]", ClickType.LeftClick);

        //    // 選擇 2D Double Array 類型
        //    condDataGrid.PerformGetElement("/ByCell[1,@Data Type]")
        //                .SelectItem(VariableDataType.Double2DArray.GetDescription());

        //    // 設定2D Array Size
        //    var arraySizeWindow = PP5IDEWindow.PerformGetElement("/ByName[2D Array Size Editor]");
        //    arraySizeWindow.PerformInput("/Edit[0]", InputType.SendContent, "5");
        //    arraySizeWindow.PerformInput("/Edit[1]", InputType.SendContent, "10");
        //    arraySizeWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

        //    // 點選Default欄位
        //    condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);

        //    // 檢查Variables Value Editor子視窗
        //    var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
        //    "Variables Value Editor".ShouldEqualTo(valueEditor.GetText());

        //    // 設定不正確的值
        //    valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

        //    // 檢查錯誤提醒
        //    expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());

        //    // 檢查禁止寫入功能
        //    valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();

        //    // 關閉 Variables Value Editor
        //    valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        //}

        /// <summary>
        /// 1D陣列 - Float[] 型態測試 (含至少10筆不正確輸入)
        /// </summary>
        [TestMethod("B11-25_Float1DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Float Format")]
        [DataRow("!@#", "Value must be Float Format")]
        [DataRow("12,34", "Value must be Float Format")]
        [DataRow("3.4028236E39", "Value must be Float Format")]
        [DataRow("-3.4028236E39", "Value must be Float Format")]
        [DataRow("1.2 3.4", "Value must be Float Format")]
        [DataRow("12.3.45", "Value must be Float Format")]
        [DataRow(".123abc", "Value must be Float Format")]
        [DataRow("NaN", "Value must be Float Format")]
        [DataRow("Infinity", "Value must be Float Format")]
        public void TIEditor_EditVariableWindowWith1DArrayFloat_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Float1DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.FloatArray, VariableEditType.EditBox, "10");

            // 點選 Default 欄位 & 輸入不正確數值
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            // 檢查錯誤提醒 & 禁止寫入
            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 1D陣列 - Integer[] 型態測試
        /// </summary>
        [TestMethod("B11-25_Integer1DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Integer Format")]
        [DataRow("!@#", "Value must be Integer Format")]
        [DataRow("12.34", "Value must be Integer Format")]
        [DataRow("2147483648", "Value must be Integer Format")]
        [DataRow("-2147483649", "Value must be Integer Format")]
        [DataRow("1,000", "Value must be Integer Format")]
        [DataRow("999999999999", "Value must be Integer Format")]
        [DataRow("0x123", "Value must be Integer Format")]
        [DataRow("123 456", "Value must be Integer Format")]
        [DataRow("123abc", "Value must be Integer Format")]
        public void TIEditor_EditVariableWindowWith1DArrayInteger_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Integer1DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.IntegerArray, VariableEditType.EditBox, "10");

            // 點選 Default 欄位 & 輸入不正確數值
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            // 檢查錯誤提醒 & 禁止寫入
            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 1D陣列 - Byte[] (Hex) 型態測試
        /// </summary>
        [TestMethod("B11-25_Byte1DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("gg", "Value must be Byte Format")]
        [DataRow("1g", "Value must be Byte Format")]
        [DataRow("Z9", "Value must be Byte Format")]
        [DataRow("FFF", "Value must be Byte Format")]
        [DataRow("1FF", "Value must be Byte Format")]
        [DataRow("hhh", "Value must be Byte Format")]
        [DataRow("12.3", "Value must be Byte Format")]
        [DataRow("12 34", "Value must be Byte Format")]
        [DataRow("!@#", "Value must be Byte Format")]
        [DataRow("100", "Value must be Byte Format")]
        public void TIEditor_EditVariableWindowWith1DArrayByteHex_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Byte1DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.ByteArray, VariableEditType.EditBox, "10");

            // 點選 Default 欄位 & 輸入不正確數值
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            // 檢查錯誤提醒 & 禁止寫入
            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 1D陣列 - Double[] 型態測試
        /// </summary>
        [TestMethod("B11-25_Double1DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Double Format")]
        [DataRow("!@#", "Value must be Double Format")]
        [DataRow("12,34", "Value must be Double Format")]
        [DataRow("1.7976931348623159E309", "Value must be Double Format")]
        [DataRow("-1.7976931348623159E309", "Value must be Double Format")]
        [DataRow("1.2 3.4", "Value must be Double Format")]
        [DataRow("12.34.56", "Value must be Double Format")]
        [DataRow(".123abc", "Value must be Double Format")]
        [DataRow("NaN", "Value must be Double Format")]
        [DataRow("Infinity", "Value must be Double Format")]
        public void TIEditor_EditVariableWindowWith1DArrayDouble_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Double1DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.DoubleArray, VariableEditType.EditBox, "10");

            // 點選 Default 欄位 & 輸入不正確數值
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            // 檢查錯誤提醒 & 禁止寫入
            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 1D陣列 - Long[] 型態測試
        /// </summary>
        [TestMethod("B11-25_Long1DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Long Format")]
        [DataRow("!@#", "Value must be Long Format")]
        [DataRow("9223372036854775808", "Value must be Long Format")]
        [DataRow("-9223372036854775809", "Value must be Long Format")]
        [DataRow("1.23", "Value must be Long Format")]
        [DataRow("999999999999999999999", "Value must be Long Format")]
        [DataRow("123abc", "Value must be Long Format")]
        [DataRow("123 456", "Value must be Long Format")]
        [DataRow("1,234", "Value must be Long Format")]
        [DataRow("0xFFFF", "Value must be Long Format")]
        public void TIEditor_EditVariableWindowWith1DArrayLong_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Long1DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.LongArray, VariableEditType.EditBox, "10");

            // 點選 Default 欄位 & 輸入不正確數值
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            // 檢查錯誤提醒 & 禁止寫入
            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 2D陣列 - Float[,] 型態測試 (含至少10筆不正確輸入)
        /// </summary>
        [TestMethod("B11-25_Float2DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Float Format")]
        [DataRow("!@#", "Value must be Float Format")]
        [DataRow("12,34", "Value must be Float Format")]
        [DataRow("3.4028236E39", "Value must be Float Format")]
        [DataRow("-3.4028236E39", "Value must be Float Format")]
        [DataRow("1.2 3.4", "Value must be Float Format")]
        [DataRow("12.3.45", "Value must be Float Format")]
        [DataRow("NaN", "Value must be Float Format")]
        [DataRow("Infinity", "Value must be Float Format")]
        [DataRow(".123abc", "Value must be Float Format")]
        public void TIEditor_EditVariableWindowWith2DArrayFloat_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Float2DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.Float2DArray, VariableEditType.EditBox, "10", "10");

            // 點選 Default 欄位 & 輸入不正確數值
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            // 檢查錯誤提醒 & 禁止寫入
            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 2D陣列 - Integer[,] 型態測試
        /// </summary>
        [TestMethod("B11-25_Integer2DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Integer Format")]
        [DataRow("!@#", "Value must be Integer Format")]
        [DataRow("12.34", "Value must be Integer Format")]
        [DataRow("2147483648", "Value must be Integer Format")]
        [DataRow("-2147483649", "Value must be Integer Format")]
        [DataRow("1,000", "Value must be Integer Format")]
        [DataRow("999999999999", "Value must be Integer Format")]
        [DataRow("123 456", "Value must be Integer Format")]
        [DataRow("123abc", "Value must be Integer Format")]
        [DataRow("0x123", "Value must be Integer Format")]
        public void TIEditor_EditVariableWindowWith2DArrayInteger_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Integer2DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.Integer2DArray, VariableEditType.EditBox, "10", "10");

            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 2D陣列 - Double[,] 型態測試
        /// </summary>
        [TestMethod("B11-25_Double2DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Double Format")]
        [DataRow("!@#", "Value must be Double Format")]
        [DataRow("12,34", "Value must be Double Format")]
        [DataRow("1.7976931348623159E309", "Value must be Double Format")]
        [DataRow("-1.7976931348623159E309", "Value must be Double Format")]
        [DataRow("1.2 3.4", "Value must be Double Format")]
        [DataRow("12.34.56", "Value must be Double Format")]
        [DataRow(".123abc", "Value must be Double Format")]
        [DataRow("NaN", "Value must be Double Format")]
        [DataRow("Infinity", "Value must be Double Format")]
        public void TIEditor_EditVariableWindowWith2DArrayDouble_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Double2DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.Double2DArray, VariableEditType.EditBox, "10", "10");

            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 2D陣列 - Byte[,] (Hex) 型態測試 (00~FF)
        /// </summary>
        [TestMethod("B11-25_Byte2DArray")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("gg", "Value must be Byte Format")]
        [DataRow("1g", "Value must be Byte Format")]
        [DataRow("Z9", "Value must be Byte Format")]
        [DataRow("FFF", "Value must be Byte Format")]
        [DataRow("1FF", "Value must be Byte Format")]
        [DataRow("hhh", "Value must be Byte Format")]
        [DataRow("12.3", "Value must be Byte Format")]
        [DataRow("12 34", "Value must be Byte Format")]
        [DataRow("!@#", "Value must be Byte Format")]
        [DataRow("100", "Value must be Byte Format")]
        public void TIEditor_EditVariableWindowWith2DArrayByteHex_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "B11-25_Byte2DArray";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.Byte2DArray, VariableEditType.EditBox, "10", "10");

            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }

        /// <summary>
        /// 2D陣列 - Long[,] (64位元整數) 型態測試
        /// </summary>
        [TestMethod("B11-LongArray_2D")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("abc", "Value must be Long Format")]
        [DataRow("!@#", "Value must be Long Format")]
        [DataRow("9223372036854775808", "Value must be Long Format")]
        [DataRow("-9223372036854775809", "Value must be Long Format")]
        [DataRow("1.23", "Value must be Long Format")]
        [DataRow("999999999999999999999", "Value must be Long Format")]
        [DataRow("123abc", "Value must be Long Format")]
        [DataRow("123 456", "Value must be Long Format")]
        [DataRow("1,234", "Value must be Long Format")]
        [DataRow("0xFFFF", "Value must be Long Format")]
        public void TIEditor_EditVariableWindowWith2DArrayLong_CheckInvalidInput(string invalidValue, string expectedError)
        {
            string callName = "TwoDArray_B11_Long";
            var condDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", callName, VariableDataType.Long2DArray, VariableEditType.EditBox, "10", "10");

            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, invalidValue);

            expectedError.ShouldEqualTo(valueEditor.PerformGetElement("/ById[svInner,popEdit,PART_Editor]").GetToolTipMessage());
            valueEditor.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }


        /// <summary>
        /// 依據 VariableDataType 產生其他 2D Array 測試案例，驗證設定正確的值後能正常顯示
        /// </summary>
        [TestMethod("B11-26_All2DArray_ValidInput")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.Float2DArray,    "2", "2", "0.123")]
        [DataRow(VariableDataType.Double2DArray,   "2", "2", "123.456")]
        [DataRow(VariableDataType.Integer2DArray,  "3", "3", "999")]
        [DataRow(VariableDataType.Byte2DArray,     "2", "2", "FF")]
        [DataRow(VariableDataType.Long2DArray,     "2", "2", "999999999999")]
        [DataRow(VariableDataType.String2DArray,   "2", "2", "Hello")]
        [DataRow(VariableDataType.HexString2DArray,"2", "2", "A1B2")]
        public void TIEditor_EditVariableWindowWith2DArrayType_CheckValidInput_MultiType(
            VariableDataType arrayType,
            string rank1,
            string rank2,
            string validValue)
        {
            // 1. 新增變數並設定 2D Array 類型與大小
            string callName = "Array2D_AllTypes_" + arrayType;
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                arrayType,
                rank1,
                rank2
            );

            // 2. 點選 Default 欄位
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);

            // 3. 檢查 Variables Value Editor 子視窗
            var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            "Variables Value Editor".ShouldEqualTo(valueEditor.GetText());

            // 4. 設定正確的值
            valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, validValue);

            // 5. 確定設定
            valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // 6. 檢查 TI Editor 的參數設定欄位
            string defaultValue = condDataGrid.PerformGetElement("/ByCell[1,@Default]").GetText();

            // 這裡示範簡易檢驗方式，假設多筆值用 ';' 區分，每筆內部用 ',' 區分
            foreach (string row in validValue.Split(';'))
            {
                foreach (string singleValue in row.Split(','))
                {
                    // 簡易示範，以實務情境可進一步拆分預期內容
                    singleValue.ShouldContain(defaultValue);
                }
            }
        }

        /// <summary>
        /// 測試用例編號：B11-27
        /// 測試步驟：設定 2D Variables Value Editor 子視窗
        /// 1. 初始化測試環境並設定 2D 變數類型(Float2D/Double2D/Integer2D)
        /// 2. 設定變數的維度大小(rank1 × rank2)
        /// 3. 開啟 Variables Value Editor 視窗
        /// 4. 在編輯器中輸入初始值
        ///    - 使用逗號(,)分隔同一行的值
        ///    - 使用分號(;)分隔不同行的值
        /// 5. 點擊確定按鈕關閉視窗
        /// 6. 重新開啟 Variables Value Editor 視窗
        /// 7. 檢查視窗中的值是否與之前設定的值相同
        /// 8. 關閉視窗完成測試
        /// 測試描述：設定TestItem Var Editor子視窗後，按下確定離開TestItem Var Editor子視窗，再重啟2D Variables Value Editor子視窗查看設定值是否保留
        /// 預期輸出：2D Variables Value Editor子視窗的值可以正確保留
        /// </summary>
        [TestMethod("B11-27")]
        [DataRow(VariableDataType.Float2DArray, "1", "2", "0.5,3.14", typeof(object))]
        [DataRow(VariableDataType.Double2DArray, "2", "2", "123,456;999,999", typeof(object))]
        [DataRow(VariableDataType.Integer2DArray, "3", "1", "42;100;999", typeof(object))]
        public void TIEditor_EditVariableWindowWith2DVarEditor_RetainValuesAfterReopen(
            VariableDataType dataType,
            string rank1,
            string rank2,
            string initialValues,
            object dummy
        )
        {
            // 1. 初始化並設定 2D 數據類型
            string callName = $"RetainValues_B11_27_{dataType}";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                dataType,
                VariableEditType.EditBox,
                rank1,
                rank2
            );

            //// 2. 模擬開啟 TestItem Var Editor 子視窗，設定初始值
            //condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            //var valueEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            //"Variables Value Editor".ShouldEqualTo(valueEditor.GetText());

            //// 設定初始值(示範用 ';' 分隔多行，逗號分隔同行)
            //valueEditor.PerformInput("/ById[svInner,popEdit,PART_Editor]", InputType.SendContent, initialValues);
            //valueEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
            var variableInfo = new VariableInfo(VariableTabType.Condition, callName, dataType, VariableEditType.EditBox, int.Parse(rank1), int.Parse(rank2));
            AddValueToDataGrid(condDataGrid, variableInfo, VariableColumnType.Default, initialValues);

            // 3. 重啟 2D Variables Value Editor 子視窗
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var reopenEditor = PP5IDEWindow.PerformGetElement("/ByName[Variables Value Editor]");
            "Variables Value Editor".ShouldEqualTo(reopenEditor.GetText());

            // 檢查值是否保留 (僅示範檢查 UI 中的文字)
            string[,] initialValueArr = initialValues.ParseTo2DArray();
            for (int i = 0; i < int.Parse(rank1); i++)
            {
                for (int j = 0; j < int.Parse(rank2); j++)
                {
                    string actualValue = reopenEditor.PerformGetElement($"/List[{i}]/Edit[{j}]").GetText();
                    initialValueArr[i,j].ShouldEqualTo(actualValue);
                }
            }

            // 關閉子視窗
            reopenEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);
        }


        [TestMethod("B11-28_EnumItemEditor")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "语言", "列举项目", "列举项目编辑器", typeof(object))]
        [DataRow("Languages => 繁體中文", "語言", "列舉項目", "列舉項目編輯器", typeof(object))]
        [DataRow("Languages => English", "Languages", "Enum Item", "Enum Item Editor", typeof(object))]
        public void TIEditor_OpenEnumItemEditorWindow_CheckEnumItemEditorTitleIsSame(
            string languagePath,
            string RestoreLanguagePath,
            string DefaultMulLing,
            string windowTitle, 
            object dummy)
        {
            // Switch language
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));

            // Add new variable and set array type
            string callName = "B11-28_EnumItemEditor";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                VariableDataType.Integer,
                VariableEditType.ComboBox);

            // Click Default field to open Variables Value Editor
            condDataGrid.PerformClick($"/ByCell[1,@{DefaultMulLing}]", ClickType.LeftClick);

            // Verify window title
            windowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[0]").GetText());

            // Close window
            PP5IDEWindow.CloseWindow(0);

            // Switch language back to English
            MenuSelect(RestoreLanguagePath, "English");
        }

        [TestMethod("B11-29_EnumItemCreater")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "语言", "列举项目", "新增", "列举项目编辑器", "枚举项目产生器", typeof(object))]
        [DataRow("Languages => 繁體中文", "語言", "列舉項目", "新增", "列舉項目編輯器", "枚舉項目產生器", typeof(object))]
        [DataRow("Languages => English", "Languages", "Enum Item", "New", "Enum Item Editor", "Enum Item Creater", typeof(object))]
        public void TIEditor_OpenEnumItemCreaterWindow_CheckEnumItemCreaterTitleIsSame(
            string languagePath,
            string RestoreLanguagePath,
            string DefaultMulLing,
            string NewMulLing,
            string editorWindowTitle,
            string createrWindowTitle,
            object dummy)
        {
            // Switch language
            MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));

            // Add new variable and set array type
            string callName = "B11-28_EnumItemEditor";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                VariableDataType.Integer,
                VariableEditType.ComboBox);

            // Click Default field to open Variables Value Editor
            condDataGrid.PerformClick($"/ByCell[1,@{DefaultMulLing}]", ClickType.LeftClick);

            PP5IDEWindow.PerformClick($"/ByName[{editorWindowTitle},{NewMulLing}]", ClickType.LeftClick);
            //WaitUntil(WaitUntilType.ElementExists, "/Window[1]");
            // Verify window title
            createrWindowTitle.ShouldEqualTo(PP5IDEWindow.PerformGetElement("/Window[-1]").Name);

            // Close window
            for (int i = 1; i >= 0; i--)
                PP5IDEWindow.CloseWindow(i);

            // Switch language back to English
            MenuSelect(RestoreLanguagePath, "English");
        }

        [TestMethod("B11-30_EnumItemRepeatedName")]
        [TestCategory("子視窗測試(B11)")]
        //B11-30
        public void TIEditor_SetEnumItemInEnumCreaterWindow_CheckValueIsInvalidWithSameEnumName()
        {
            string CallName = "B11-30_EnumItemRepeatedName";
            string enumValue = "0";
            string enumName = "a";
            VariableDataType varDataType = VariableDataType.String;
            VariableEditType varEditType = VariableEditType.ComboBox;
            PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Condition, "", CallName, varDataType, varEditType);

            bool isAdded = true;
            for (int i = 0; i < 2; i++)
            {
                isAdded &= AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue);
            }

            if (!isAdded)
            {
                string errorMsg = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Creater]/Edit[0]").GetToolTipMessage();
                string errorMsgExpected = "EnumItemName is duplicated";
                errorMsg.ShouldNotBeNull();
                errorMsgExpected.ShouldEqualTo(errorMsg);
                PP5IDEWindow.PerformGetElement("/ByName[Enum Item Creater,Ok]").ShouldBeDisabled();
            }

            // Close the enum item creator/editor window
            for (int i = 1; i >= 0; i--)
                PP5IDEWindow.CloseWindow(i);
        }

        /// <summary>
        /// 測試用例編號：B11-30_EnumItemInvalidValue
        /// 測試步驟：在枚舉項目產生器中輸入各種無效值
        /// 1. 初始化測試環境並設定變數類型
        /// 2. 打開枚舉項目產生器視窗
        /// 3. 輸入指定的測試值
        /// 4. 檢查錯誤提示與按鈕狀態
        /// 測試描述：驗證枚舉項目產生器對異常值、特殊值和邊界值的處理
        /// 預期輸出：顯示對應的錯誤訊息且Ok按鈕被禁用
        /// </summary>
        [TestMethod("B11-30_EnumItemInvalidValue")]
        [TestCategory("子視窗測試(B11)")]
        // 異常值測試
        [DataRow(VariableDataType.Integer, "test_int_invalid1", "abc123", "Value must be Integer Format", typeof(object), DisplayName = "非法字元測試")]      
        [DataRow(VariableDataType.Integer, "test_int_invalid2", "1,234", "Value must be Integer Format", typeof(object), DisplayName = "千分位格式測試")]     
        [DataRow(VariableDataType.Float, "test_float_invalid1", "@#$", "Value must be Float Format", typeof(object), DisplayName = "特殊符號測試")]           
        [DataRow(VariableDataType.Float, "test_float_invalid2", "1.2.3", "Value must be Float Format", typeof(object), DisplayName = "多重小數點測試")]       

        // 特殊值測試
        [DataRow(VariableDataType.Integer, "test_int_special1", " ", "Value must be Integer Format", typeof(object), DisplayName = "空白字元測試")]           
        [DataRow(VariableDataType.Float, "test_float_special1", "0.000001", "Value must be Float Format", typeof(object), DisplayName = "極小值測試")]        
        [DataRow(VariableDataType.Double, "test_double_special1", "1e-324", "Value must be Double Format", typeof(object), DisplayName = "科學記號極小值測試")]

        // 邊界值測試
        [DataRow(VariableDataType.Byte, "test_byte_bound1", "256", "Value must be Byte Format", typeof(object), DisplayName = "超出上限測試")]
        [DataRow(VariableDataType.Short, "test_short_bound1", "-32769", "Value must be Short Format", typeof(object), DisplayName = "超出下限測試")]
        [DataRow(VariableDataType.Long, "test_long_bound1", "9223372036854775808", "Value must be Long Format", typeof(object), DisplayName = "超出範圍測試")]
        public void TIEditor_SetEnumItemInEnumCreaterWindow_CheckValueIsInvalid(
            VariableDataType dataType,
            string enumName,
            string invalidValue,
            string expectedErrorMsg,
            object dummy)
        {
            // Initialize variable grid with specific data type
            string callName = $"B11-30_{dataType}_{enumName}";
            var condDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                callName,
                dataType,
                VariableEditType.ComboBox);

            // Open enum item creator
            condDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick("/ByName[Enum Item Editor,New]", ClickType.LeftClick);

            // Input invalid value
            var enumCreator = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Creater]");
            enumCreator.PerformInput("/Edit[0]", InputType.SendContent, enumName);
            enumCreator.PerformInput("/Edit[1]", InputType.SendContent, invalidValue);

            // Verify error tooltip and OK button state
            string errorMsg = enumCreator.PerformGetElement("/Edit[1]").GetToolTipMessage();
            errorMsg.ShouldNotBeNull();
            expectedErrorMsg.ShouldEqualTo(errorMsg);
            enumCreator.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();

            // Close windows
            for (int i = 1; i >= 0; i--)
                PP5IDEWindow.CloseWindow(i);
        }

        /// <summary>
        /// 測試用例編號：B11-31
        /// 測試步驟：設定列舉子項目
        /// 1. 初始化測試環境並設定ComboBox類型
        /// 2. 設定列舉項目的名稱和數值
        /// 3. 檢查列舉項目編輯器欄位的顯示值是否正確
        /// 測試描述：設定子視窗後，檢查選擇的成員是否正確顯示在列舉項目編輯器欄位
        /// 預期輸出：列舉項目編輯器子視窗的值可以正確保留
        /// </summary>
        [TestMethod("B11-31")]
        [TestCategory("子視窗測試(B11)")]
        // 整數類型測試案例
        [DataRow(VariableDataType.Short, Int16.MaxValue, "int16Max", typeof(object), DisplayName = "Short型別最大值測試")]
        [DataRow(VariableDataType.Short, Int16.MinValue, "int16Min", typeof(object), DisplayName = "Short型別最小值測試")]
        [DataRow(VariableDataType.Integer, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Integer型別最大值測試")]
        [DataRow(VariableDataType.Integer, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Integer型別最小值測試")]
        [DataRow(VariableDataType.Long, Int64.MaxValue, "int64Max", typeof(object), DisplayName = "Long型別最大值測試")]
        [DataRow(VariableDataType.Long, Int64.MinValue, "int64Min", typeof(object), DisplayName = "Long型別最小值測試")]

        // 浮點數類型測試案例
        [DataRow(VariableDataType.Float, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Float型別最大值測試")]
        [DataRow(VariableDataType.Float, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Float型別最小值測試")]
        [DataRow(VariableDataType.FloatPercentage, "3.40282356779E+38", "Float(%)Max", typeof(object), DisplayName = "FloatPercentage型別最大值測試")]
        [DataRow(VariableDataType.FloatPercentage, "-3.40282356779E+38", "Float(%)Min", typeof(object), DisplayName = "FloatPercentage型別最小值測試")]
        [DataRow(VariableDataType.Double, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Double型別最大值測試")]
        [DataRow(VariableDataType.Double, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Double型別最小值測試")]

        // 位元組類型測試案例
        [DataRow(VariableDataType.Byte, "ff", "ByteMax", typeof(object), DisplayName = "Byte型別最大值測試")]
        [DataRow(VariableDataType.Byte, "00", "ByteMin", typeof(object), DisplayName = "Byte型別最小值測試")]

        // 陣列類型測試案例
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Integer陣列最大值測試")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Integer陣列最小值測試")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Float陣列最大值測試")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Float陣列最小值測試")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "FloatPercentage陣列最大值測試")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "FloatPercentage陣列最小值測試")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Double陣列最大值測試")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Double陣列最小值測試")]
        //B11-31
        public void TIEditor_SetEnumItemInEditor_VerifyEnumItemDisplay(VariableDataType varDataType, object enumValue, string enumName, object dummy)
        {
            // 初始化測試環境
            string CallName = "B11-31_EnumItemDisplay";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                varDataType,
                VariableEditType.ComboBox);

            // 新增列舉項目
            bool isAdded = AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue.ToString());
            isAdded.ShouldBeTrue(); // 確認新增成功

            // 驗證列舉項目值是否正確保留
            var enumEditor = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Editor]");
            var enumGrid = enumEditor.GetFirstDataGridElement();
            string actualEnumName = enumGrid.GetCellByName(1, "Name").GetText();
            string actualEnumValue = enumGrid.GetCellByName(1, "Value").GetText();

            // 驗證名稱和值
            enumName.ShouldEqualTo(actualEnumName);
            enumValue.ToString().ShouldEqualTo(actualEnumValue);

            // Close windows
            for (int i = 1; i >= 0; i--)
                PP5IDEWindow.CloseWindow(i);
        }

        /// <summary>
        /// 測試用例編號：B11-32
        /// 測試步驟：設定列舉子項目
        /// 1. 初始化測試環境並設定ComboBox類型
        /// 2. 設定列舉項目的名稱和數值
        /// 3. 編輯設定好的列舉項目
        /// 4. 編輯完成後關閉視窗
        /// 5. 重新開啟列舉項目編輯器視窗
        /// 6. 檢查列舉項目編輯器欄位的顯示值是否為編輯後的數值
        /// 測試描述：修改子視窗後，檢查選擇的成員是否正確顯示在列舉項目編輯器欄位
        /// 預期輸出：列舉項目編輯器子視窗的值可以正確保留
        /// </summary>
        [TestMethod("B11-32")]
        [TestCategory("子視窗測試(B11)")]
        // 整數類型測試案例
        [DataRow(VariableDataType.Short, Int16.MaxValue, "int16Max", typeof(object), DisplayName = "Short型別最大值測試")]
        [DataRow(VariableDataType.Short, Int16.MinValue, "int16Min", typeof(object), DisplayName = "Short型別最小值測試")]
        [DataRow(VariableDataType.Integer, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Integer型別最大值測試")]
        [DataRow(VariableDataType.Integer, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Integer型別最小值測試")]
        [DataRow(VariableDataType.Long, Int64.MaxValue, "int64Max", typeof(object), DisplayName = "Long型別最大值測試")]
        [DataRow(VariableDataType.Long, Int64.MinValue, "int64Min", typeof(object), DisplayName = "Long型別最小值測試")]

        // 浮點數類型測試案例
        [DataRow(VariableDataType.Float, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Float型別最大值測試")]
        [DataRow(VariableDataType.Float, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Float型別最小值測試")]
        [DataRow(VariableDataType.FloatPercentage, "3.40282356779E+38", "Float(%)Max", typeof(object), DisplayName = "FloatPercentage型別最大值測試")]
        [DataRow(VariableDataType.FloatPercentage, "-3.40282356779E+38", "Float(%)Min", typeof(object), DisplayName = "FloatPercentage型別最小值測試")]
        [DataRow(VariableDataType.Double, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Double型別最大值測試")]
        [DataRow(VariableDataType.Double, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Double型別最小值測試")]

        // 位元組類型測試案例
        [DataRow(VariableDataType.Byte, "ff", "ByteMax", typeof(object), DisplayName = "Byte型別最大值測試")]
        [DataRow(VariableDataType.Byte, "00", "ByteMin", typeof(object), DisplayName = "Byte型別最小值測試")]

        // 陣列類型測試案例
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Integer陣列最大值測試")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Integer陣列最小值測試")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Float陣列最大值測試")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Float陣列最小值測試")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "FloatPercentage陣列最大值測試")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "FloatPercentage陣列最小值測試")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Double陣列最大值測試")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Double陣列最小值測試")]
        //B11-32
        public void TIEditor_SetAndEditEnumItemInEditor_VerifyEnumItemDisplayAndRetention(VariableDataType varDataType, object enumValue, string enumName, object dummy)
        {
            // 初始化測試環境
            string CallName = "B11-32_EnumItemEdit";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                varDataType,
                VariableEditType.ComboBox);

            // 新增列舉項目
            bool isAdded = AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue.ToString());
            isAdded.ShouldBeTrue();

            // 開啟列舉項目編輯器視窗
            varDataGrid.PerformClick($"/ByCell[1,@Enum Item]", ClickType.LeftClick);

            // 編輯列舉項目
            var enumEditor = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Editor]");
            var enumGrid = enumEditor.GetFirstDataGridElement();
            string modifiedName = enumName + "_Modified";
            string modifiedValue = (Convert.ToDouble(enumValue) / 2).ToString();

            // 修改名稱和值並關閉視窗
            EditEnumItem(varDataGrid, varDataGrid.LastRowNo, modifiedName, modifiedValue);

            // 重新開啟列舉項目編輯器視窗
            varDataGrid.PerformClick($"/ByCell[1,@Enum Item]", ClickType.LeftClick);

            // 驗證修改後的列舉項目值是否正確保留
            enumEditor = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Editor]");
            enumGrid = enumEditor.GetFirstDataGridElement();
            string actualEnumName = enumGrid.GetCellBy(1, "Name").GetText();
            string actualEnumValue = enumGrid.GetCellBy(1, "Value").GetText();

            // 驗證修改後的名稱和值
            modifiedName.ShouldEqualTo(actualEnumName);
            modifiedValue.ShouldEqualTo(actualEnumValue);

            // 關閉所有視窗
            for (int i = 1; i >= 0; i--)
                PP5IDEWindow.CloseWindow(i);
        }

        /// <summary>
        /// 測試用例編號：B11-33
        /// 測試步驟：
        /// 1. 初始化測試環境並設定ComboBox類型
        /// 2. 設定列舉項目的名稱和數值
        /// 3. 上/下移動列舉項目
        /// 4. 檢查移動後的子列舉項目在正確的位置
        /// 測試描述：在列舉項目編輯器中上/下移動列舉項目後,檢查列舉項目編輯器中的子列舉項目順序是否正確移動
        /// 預期輸出：列舉項目的順序可以正確移動
        /// </summary>
        [TestMethod("B11-33")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Up", 2, "a,b,c", "1,2,3", "b,a,c", "2,1,3", typeof(object), DisplayName = "向上移動測試")]      // 初始順序: a,b,c，選擇第2行(b)向上移動，預期順序: b,a,c
        [DataRow("Down", 1, "a,b,c", "1,2,3", "b,a,c", "2,1,3", typeof(object), DisplayName = "向下移動測試")]    // 初始順序: a,b,c，選擇第1行(a)向下移動，預期順序: b,a,c
        public void TIEditor_MoveEnumItemInEditor_VerifyEnumItemOrder(
            string direction,
            int selectedRow,
            string initialNames,
            string initialValues,
            string expectedNames,
            string expectedValues,
            object dummy)
        {
            // 初始化測試環境
            string CallName = "B11-33_MoveEnumItem";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                VariableDataType.Integer,
                VariableEditType.ComboBox);
        
            // 解析初始列舉項目
            string[] enumNames = initialNames.Split(',');
            string[] enumValues = initialValues.Split(',');
        
            // 新增列舉項目
            for (int enumIdx = 0; enumIdx < enumNames.Length; enumIdx++)
                AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumNames[enumIdx], enumValues[enumIdx]).ShouldBeTrue();
        
            // 開啟列舉項目編輯器視窗
            varDataGrid.PerformClick($"/ByCell[1,@Enum Item]", ClickType.LeftClick);
        
            // 移動列舉項目
            var enumEditor = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Editor]");
            var enumGrid = enumEditor.GetFirstDataGridElement();
            
            // 選擇指定行
            enumGrid.PerformClick($"/ByCell[{selectedRow},@Name]", ClickType.LeftClick);
        
            // 檢查按鈕狀態
            if (direction == "Up")
            {
                enumEditor.PerformGetElement("/ByName[Up]").ShouldBeEnabled();
                enumEditor.PerformClick("/ByName[Up]", ClickType.LeftClick);
            }
            else
            {
                enumEditor.PerformGetElement("/ByName[Down]").ShouldBeEnabled();
                enumEditor.PerformClick("/ByName[Down]", ClickType.LeftClick);
            }
        
            // 驗證移動後的順序
            string[] actualNames = enumGrid.GetSingleColumnValues(1/*Name*/).ToArray();
            string[] actualValues = enumGrid.GetSingleColumnValues(2/*Value*/).ToArray();
            string[] expectedNameArray = expectedNames.Split(',');
            string[] expectedValueArray = expectedValues.Split(',');
        
            // 比對結果
            for (int i = 0; i < expectedNameArray.Length; i++)
            {
                expectedNameArray[i].ShouldEqualTo(actualNames[i]);
                expectedValueArray[i].ShouldEqualTo(actualValues[i]);
            }
        
            // 關閉所有視窗
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 測試用例編號：B11-34
        /// 測試步驟：
        /// 1. 初始化測試環境並設定ComboBox類型
        /// 2. 設定列舉項目的名稱和數值
        /// 3. 在列舉項目編輯器中刪除列舉項目
        /// 4. 檢查列舉項目編輯器中的子列舉項目順序是否正確刪除
        /// 測試描述：在列舉項目編輯器中刪除列舉項目,檢查列舉項目編輯器中的子列舉項目順序是否正確刪除
        /// 預期輸出：列舉項目的順序可以正確刪除
        /// </summary>
        [TestMethod("B11-34")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(1, "a,b,c", "1,2,3", "b,c", "2,3", typeof(object), DisplayName = "刪除第一個項目")]       // 初始: a,b,c (1,2,3)，刪除第1行，預期: b,c (2,3)
        [DataRow(2, "a,b,c", "1,2,3", "a,c", "1,3", typeof(object), DisplayName = "刪除中間項目")]        // 初始: a,b,c (1,2,3)，刪除第2行，預期: a,c (1,3)
        [DataRow(3, "a,b,c", "1,2,3", "a,b", "1,2", typeof(object), DisplayName = "刪除最後項目")]        // 初始: a,b,c (1,2,3)，刪除第3行，預期: a,b (1,2)
        public void TIEditor_DeleteEnumItemInEditor_VerifyEnumItemOrder(
            int selectedRow,
            string initialNames,
            string initialValues,
            string expectedNames,
            string expectedValues,
            object dummy)
        {
            // 初始化測試環境
            string CallName = "B11-34_DeleteEnumItem";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                VariableDataType.Integer,
                VariableEditType.ComboBox);
        
            // 解析初始列舉項目
            string[] enumNames = initialNames.Split(',');
            string[] enumValues = initialValues.Split(',');
        
            // 新增列舉項目
            for (int enumIdx = 0; enumIdx < enumNames.Length; enumIdx++)
                AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumNames[enumIdx], enumValues[enumIdx]).ShouldBeTrue();
        
            // 開啟列舉項目編輯器視窗
            varDataGrid.PerformClick($"/ByCell[1,@Enum Item]", ClickType.LeftClick);
        
            // 選擇並刪除指定行
            var enumEditor = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Editor]");
            var enumGrid = enumEditor.GetFirstDataGridElement();
            enumGrid.PerformClick($"/ByCell[{selectedRow},@Name]", ClickType.LeftClick);
            
            // 檢查並點擊刪除按鈕
            enumEditor.PerformGetElement("/ByName[Delete]").ShouldBeEnabled();
            enumEditor.PerformClick("/ByName[Delete]", ClickType.LeftClick);
        
            // 驗證刪除後的順序
            string[] actualNames = enumGrid.GetSingleColumnValues(1/*Name*/).ToArray();
            string[] actualValues = enumGrid.GetSingleColumnValues(2/*Value*/).ToArray();
            string[] expectedNameArray = expectedNames.Split(',');
            string[] expectedValueArray = expectedValues.Split(',');
        
            // 比對結果
            actualNames.Length.ShouldEqualTo(expectedNameArray.Length);
            for (int i = 0; i < expectedNameArray.Length; i++)
            {
                expectedNameArray[i].ShouldEqualTo(actualNames[i]);
                expectedValueArray[i].ShouldEqualTo(actualValues[i]);
            }
        
            // 關閉所有視窗
            PP5IDEWindow.CloseWindow(0);
        }

        /// 測試用例編號：B11-35
        /// 測試步驟：設定列舉子項目
        /// 1. 初始化測試環境並設定ComboBox類型
        /// 2. 設定列舉項目的名稱和數值
        /// 3. 確認設定完成後關閉視窗
        /// 4. 重新開啟列舉項目編輯器視窗
        /// 5. 檢查列舉項目編輯器欄位的顯示值是否正確
        /// 測試描述：設定列舉項目編輯器子視窗後，按下確定離開列舉項目編輯器子視窗，在重啟列舉項目編輯器子視窗查看設定值是否保留
        /// 預期輸出：列舉項目編輯器子視窗的值可以正確保留
        /// </summary>
        [TestMethod("B11-35")]
        [TestCategory("子視窗測試(B11)")]
        // 整數類型測試案例
        [DataRow(VariableDataType.Short, Int16.MaxValue, "int16Max", typeof(object), DisplayName = "Short型別最大值測試")]
        [DataRow(VariableDataType.Short, Int16.MinValue, "int16Min", typeof(object), DisplayName = "Short型別最小值測試")]
        [DataRow(VariableDataType.Integer, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Integer型別最大值測試")]
        [DataRow(VariableDataType.Integer, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Integer型別最小值測試")]
        [DataRow(VariableDataType.Long, Int64.MaxValue, "int64Max", typeof(object), DisplayName = "Long型別最大值測試")]
        [DataRow(VariableDataType.Long, Int64.MinValue, "int64Min", typeof(object), DisplayName = "Long型別最小值測試")]

        // 浮點數類型測試案例
        [DataRow(VariableDataType.Float, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Float型別最大值測試")]
        [DataRow(VariableDataType.Float, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Float型別最小值測試")]
        [DataRow(VariableDataType.FloatPercentage, "3.40282356779E+38", "Float(%)Max", typeof(object), DisplayName = "FloatPercentage型別最大值測試")]
        [DataRow(VariableDataType.FloatPercentage, "-3.40282356779E+38", "Float(%)Min", typeof(object), DisplayName = "FloatPercentage型別最小值測試")]
        [DataRow(VariableDataType.Double, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Double型別最大值測試")]
        [DataRow(VariableDataType.Double, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Double型別最小值測試")]

        // 位元組類型測試案例
        [DataRow(VariableDataType.Byte, "ff", "ByteMax", typeof(object), DisplayName = "Byte型別最大值測試")]
        [DataRow(VariableDataType.Byte, "00", "ByteMin", typeof(object), DisplayName = "Byte型別最小值測試")]

        // 陣列類型測試案例
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MaxValue, "int32Max", typeof(object), DisplayName = "Integer陣列最大值測試")]
        [DataRow(VariableDataType.IntegerArrayOfSize640, Int32.MinValue, "int32Min", typeof(object), DisplayName = "Integer陣列最小值測試")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "Float陣列最大值測試")]
        [DataRow(VariableDataType.FloatArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "Float陣列最小值測試")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "3.40282356779E+38", "FloatMax", typeof(object), DisplayName = "FloatPercentage陣列最大值測試")]
        [DataRow(VariableDataType.FloatPercentageArrayOfSize640, "-3.40282356779E+38", "FloatMin", typeof(object), DisplayName = "FloatPercentage陣列最小值測試")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "1.797693134862315809E+308", "DoubleMax", typeof(object), DisplayName = "Double陣列最大值測試")]
        [DataRow(VariableDataType.DoubleArrayOfUUTMaxSize, "-1.797693134862315809E+308", "DoubleMin", typeof(object), DisplayName = "Double陣列最小值測試")]
        //B11-35
        public void TIEditor_SetEnumItemInEditor_VerifyEnumItemDisplayAndRetention(VariableDataType varDataType, object enumValue, string enumName, object dummy)
        {
            // 初始化測試環境
            string CallName = "B11-35_EnumItemRetention";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                varDataType,
                VariableEditType.ComboBox);

            // 新增列舉項目
            bool isAdded = AddNewEnumItem(varDataGrid, varDataGrid.LastRowNo, enumName, enumValue.ToString());
            isAdded.ShouldBeTrue(); // 確認新增成功

            // 關閉視窗
            PP5IDEWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

            // 重新開啟列舉項目編輯器視窗
            varDataGrid.PerformClick($"/ByCell[1,@Enum Item]", ClickType.LeftClick);

            // 驗證列舉項目值是否正確保留
            var enumEditor = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Editor]");
            var enumGrid = enumEditor.GetFirstDataGridElement();
            string actualEnumName = enumGrid.GetCellByName(1, "Name").GetText();
            string actualEnumValue = enumGrid.GetCellByName(1, "Value").GetText();

            // 驗證名稱和值
            enumName.ShouldEqualTo(actualEnumName);
            enumValue.ToString().ShouldEqualTo(actualEnumValue);

            // Close windows
            for (int i = 1; i >= 0; i--)
                PP5IDEWindow.CloseWindow(i);
        }


        /// <summary>
        /// 測試用例編號：B11-36
        /// 測試步驟：
        /// 1. 初始化測試環境並設定Vector類型
        /// 2. 點選變數表格的Default欄位
        /// 3. 檢查Vector Editor視窗標題是否符合當前語系
        /// 4. 測試結束後恢復英文語系
        /// 測試描述：點選變數的類型為 Vector，點擊 Default，查看 TI Editor 是否會創建語系正確的Vector項目編輯器子視窗
        /// 預期輸出：正確創建Vector項目編輯器子視窗且語系正確
        /// </summary>
        [TestMethod("B11-36")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "语言", "预设值", "向量编辑器", typeof(object))]
        [DataRow("Languages => 繁體中文", "語言", "預設值", "向量編輯器", typeof(object))]
        [DataRow("Languages => English", "Languages", "Default", "Vector Editor", typeof(object))]
        public void TIEditor_SetDefaultInConditionVariable_VerifyVectorDataTypes(
            string languagePath,
            string restoreLanguagePath,
            string defaultMulLing,
            string vectorEditorTitle,
            object dummy)
        {
            try 
            {
                // Switch language
                MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
        
                // Initialize variable grid with Vector type
                string CallName = "B11-36_VectorEditor";
                var varDataGrid = InitializeVariableDataGrid(
                    VariableTabType.Condition,
                    "",
                    CallName,
                    VariableDataType.LineInVector,
                    VariableEditType.ComboBox);
        
                // Click Default field to open Vector Editor
                varDataGrid.PerformClick($"/ByCell[1,@{defaultMulLing}]", ClickType.LeftClick);
        
                // Verify Vector Editor window title
                var vectorEditor = PP5IDEWindow.PerformGetElement("/Window[0]");
                vectorEditorTitle.ShouldEqualTo(vectorEditor.GetText());
        
                // Close Vector Editor window
                PP5IDEWindow.CloseWindow(0);
            }
            finally 
            {
                // Restore to English
                MenuSelect(new string[] { restoreLanguagePath, "English" });
            }
        }

        /// <summary>
        /// 測試用例編號：B11-37
        /// 測試步驟：
        /// 1. 初始化測試環境並設定Vector類型
        /// 2. 點選變數表格的Default欄位，開啟Vector Editor視窗
        /// 3. 修改Vector Editor中第一個項目中Default欄位數值為1
        /// 4. 按下OK按鈕關閉Vector Editor視窗
        /// 5. 檢查變數表格Default欄位中的值是否與Vector Editor中的值相符
        /// 測試描述：設定 Vector 項目編輯器中的變數後，檢查修改的成員是否正確顯示在變數的default 欄位中
        /// 預期輸出：正確設定 Vector 項目到default 欄位中
        /// </summary>
        [TestMethod("B11-37")]
        [TestCategory("子視窗測試(B11)")]
        public void TIEditor_SetVectorEditorValues_VerifyDefaultFieldDisplay()
        {
            // Initialize variable grid with Vector type
            string CallName = "B11-37_VectorValueRetention";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                VariableDataType.LineInVector,
                VariableEditType.ComboBox);

            // Click Default field to open Vector Editor
            varDataGrid.PerformClick($"/ByCell[1,@Default]", ClickType.LeftClick);

            List<string> expectedValues = new List<string>();
            string[] defaultValues;
            PP5DataGrid VectorDataGrid = new PP5DataGrid((PP5Element)PP5IDEWindow.PerformGetElement("/ById[VectorGrid]"));
            VectorDataGrid.ScrollToSpecificColumn("Default");

            VectorDataGrid.PerformInput("ByCell[1,@Default]", InputType.SendContent, "1");

            for (int i = 1; i <= VectorDataGrid.GetRowCount(); i++)
                expectedValues.Add(VectorDataGrid.GetCellBy(i, "Default").GetText());
            PP5IDEWindow.PerformClick("/ByName[Vector Editor,Ok]", ClickType.LeftClick);
            defaultValues = varDataGrid.GetCellBy(varDataGrid.LastRowNo, "Default").GetText().Split('@');

            expectedValues.Count.ShouldEqualTo(defaultValues.Length);
            for (int i = 0; i < expectedValues.Count; i++)
            {
                expectedValues[i].ShouldEqualTo(defaultValues[i]);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-38
        /// 測試步驟：
        /// 1. 初始化測試環境並設定Vector類型為Float
        /// 2. 點選變數表格的Default欄位，開啟Vector Editor視窗
        /// 3. 修改Vector Editor中第一個項目中Default欄位數值為測試值
        /// 4. 確認設定完成後關閉視窗
        /// 5. 重新開啟Vector Editor視窗
        /// 6. 檢查Vector Editor視窗的顯示值是否正確
        /// 測試描述：設定Vector項目編輯器子視窗後，按下確定離開，再重啟Vector項目編輯器子視窗查看設定值是否保留
        /// 預期輸出：Vector項目編輯器子視窗的值可以正確保留
        /// </summary>
        [TestMethod("B11-38")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.LineInVector, "3.140", typeof(object), DisplayName = "浮點數向量-標準值")]
        [DataRow(VariableDataType.LineInVector, "0.001", typeof(object), DisplayName = "浮點數向量-小數值")]
        [DataRow(VariableDataType.LineInVector, "-1.234", typeof(object), DisplayName = "浮點數向量-負數值")]
        [DataRow(VariableDataType.LineInVector, "1000.000", typeof(object), DisplayName = "浮點數向量-大數值")]
        public void TIEditor_SetVectorEditorValues_VerifyValueRetention(
            VariableDataType dataType,
            string testValue,
            object dummy)
        {
            // Initialize variable grid with Vector type
            string CallName = "B11-38_VectorValueRetention";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                dataType,
                VariableEditType.ComboBox);
        
            // Open Vector Editor and set value
            varDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            var vectorEditor = PP5IDEWindow.PerformGetElement("/ByName[Vector Editor]");
            var vectorGrid = new PP5DataGrid((PP5Element)vectorEditor.PerformGetElement("/ById[VectorGrid]"));
            
            // Set test value
            vectorGrid.ScrollToSpecificColumn("Default");
            vectorGrid.PerformInput("/ByCell[1,@Default]", InputType.SendContent, testValue);
            PP5IDEWindow.PerformClick("/ByName[Vector Editor,Ok]", ClickType.LeftClick);
        
            // Reopen Vector Editor
            varDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);
            vectorEditor = PP5IDEWindow.PerformGetElement("/ByName[Vector Editor]");
            vectorGrid = new PP5DataGrid((PP5Element)vectorEditor.PerformGetElement("/ById[VectorGrid]"));
        
            // Verify value retention
            string actualValue = vectorGrid.GetCellBy(1, "Default").GetText();
            testValue.ShouldEqualTo(actualValue);
        
            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 測試用例編號：B11-39
        /// 測試步驟：
        /// 1. 開啟 PP5 IDE
        /// 2. 點選主選單中的 [Functions] -> [TI Editor]
        /// 3. 檢查 Login 子視窗是否正確開啟 (多國語言文字顯示正確)
        /// 4. 驗證 Login 視窗中的所有控制項是否置中對齊
        /// 測試描述：在PP5 IDE中按下[Functions]->[TI Editor]後開啟Login子視窗
        /// 預期輸出：Login子視窗正確顯示，且畫面內容皆有置中對齊
        /// </summary>
        [TestMethod("B11-39")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("Languages => 簡体中文", "Languages", "确定", "取消", typeof(object))]
        [DataRow("Languages => 繁體中文", "Languages", "確定", "取消", typeof(object))]
        [DataRow("Languages => English", "Languages", "Ok", "Cancel", typeof(object))]
        public void TIEditor_OpenLoginWindow_VerifyWindowAlignmentAndDisplay(
            string languagePath,
            string restoreLanguagePath,
            string okButton,
            string cancelButton,
            object dummy)
        {
            try
            {
                // Switch language
                MenuSelect(languagePath.Split(new string[] { " => " }, StringSplitOptions.RemoveEmptyEntries));
        
                // Click Functions -> TI Editor
                MenuSelect(new string[] { "Functions", "TI Editor" });
        
                // Verify login window
                var loginWindow = PP5IDEWindow.PerformGetElement("/Window[0]");

                // Get window elements
                okButton.ShouldEqualTo(loginWindow.PerformGetElement($"/Button[0]").GetText());
                cancelButton.ShouldEqualTo(loginWindow.PerformGetElement($"/Button[1]").GetText());

                // Verify controls alignment
                loginWindow.PointAtCenter.ShouldEqualTo(PP5IDEWindow.PointAtCenter);
        
                // Close login window
                loginWindow.PerformClick($"/ByName[{cancelButton}]", ClickType.LeftClick);
            }
            finally
            {
                // Restore to English
                MenuSelect(new string[] { restoreLanguagePath, "English" });
            }
        }

        [TestMethod("B11-41")]
        [TestCategory("子視窗測試(B11)")]
        [System.ComponentModel.Description("B11-41: Verify TI Editor Login window display at 1366x768")]
        public void TIEditorLogin_At1366x768_ShouldDisplayProperly()
        {
            // Set screen resolution to 1366x768
            // Note: Screen resolution change implementation would be needed
            AutoUIExecutor.SwitchTo(SessionType.Desktop);
            SetResolution(1366, 768);

            // Open TI Editor from Functions menu
            CurrentDriver.PerformClick("/ByName[工作列,執行中的應用程式,PP5IDE - 1 個執行中視窗]", ClickType.LeftClick);
            AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

            PerformOpenNewTI();

            //// Verify Login window appears and properties
            //var loginWindow = PP5IDEWindow.FindElementByAutomationId(PowerPro5Config.LoginWindowAutomationID);
            //Assert.IsNotNull(loginWindow, "Login window failed to appear");

            // Verify window dimensions fit within 1366x768 (1366x728 (40 for ToolBar height))
            var rect = PP5IDEWindow.Size;
            var pointTopLeft = PP5IDEWindow.PointAtTopLeft;
            Assert.IsTrue(rect.Width <= 1366, "Window width exceeds screen width");
            Assert.IsTrue(rect.Height <= 768-40, "Window height exceeds screen height");

            // Verify window is completely visible
            Assert.IsTrue(pointTopLeft.X >= 0, "Window extends beyond left screen edge");
            Assert.IsTrue(pointTopLeft.Y >= 0, "Window extends beyond top screen edge");
            Assert.IsTrue(pointTopLeft.X + rect.Width <= 1366, "Window extends beyond right screen edge");
            Assert.IsTrue(pointTopLeft.Y + rect.Height <= 768, "Window extends beyond bottom screen edge");
        }

        /// <summary>
        /// 測試用例編號：B11-42
        /// 測試步驟：
        /// 1. 初始化測試環境並設定條件變數的EditType為ComboBox
        /// 2. 點選變數表格的EnumItem欄位，開啟Enum Item Editor視窗
        /// 3. 檢查EnumItem設定視窗標題
        /// 4. 驗證各控制項是否存在
        /// 5. 關閉視窗
        /// 測試描述：開啟TI Editor EnumItem設定視窗，檢查視窗標題及內容是否正確顯示
        /// 預期輸出：EnumItem設定視窗的標題及內容須正確顯示
        /// </summary>
        [TestMethod("B11-42")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.Integer, "Enum Item Editor", "Name", "Value", typeof(object), DisplayName = "整數型別")]
        [DataRow(VariableDataType.Float, "Enum Item Editor", "Name", "Value", typeof(object), DisplayName = "浮點數型別")]
        [DataRow(VariableDataType.Double, "Enum Item Editor", "Name", "Value", typeof(object), DisplayName = "倍精度型別")]
        public void TIEditor_OpenEnumItemEditorWindow_VerifyWindowDisplay(
            VariableDataType dataType,
            string expectedTitle,
            string nameColumnHeader,
            string valueColumnHeader,
            object dummy)
        {
            // Initialize variable grid
            string CallName = "B11-42_EnumItemEditor";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                dataType,
                VariableEditType.ComboBox);

            // Open EnumItem editor by double clicking
            varDataGrid.PerformClick("/ByCell[1,@Enum Item]", ClickType.LeftClick);

            // Verify window title
            var enumEditor = PP5IDEWindow.PerformGetElement("/Window[0]");
            expectedTitle.ShouldEqualTo(enumEditor.GetText());

            // Verify controls existence
            var enumGrid = enumEditor.GetFirstDataGridElement();
            enumGrid.ShouldNotBeNull();

            // Verify column headers
            var enumGridHeaders = enumGrid.GetDataGridHeaders();
            enumGridHeaders[0].ShouldEqualTo(nameColumnHeader);
            enumGridHeaders[1].ShouldEqualTo(valueColumnHeader);

            // Verify buttons
            enumEditor.PerformGetElement("/ByName[New]").ShouldNotBeNull();
            enumEditor.PerformGetElement("/ByName[Modify]").ShouldNotBeNull();
            enumEditor.PerformGetElement("/ByName[Delete]").ShouldNotBeNull();
            enumEditor.PerformGetElement("/ByName[Up]").ShouldNotBeNull();
            enumEditor.PerformGetElement("/ByName[Down]").ShouldNotBeNull();
            enumEditor.PerformGetElement("/ByName[Ok]").ShouldNotBeNull();
            enumEditor.PerformGetElement("/ByName[Cancel]").ShouldNotBeNull();

            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 測試用例編號：B11-43
        /// 測試步驟：
        /// 1. 初始化測試環境並設定類型為HexString
        /// 2. 點選變數表格的Default欄位，開啟HexString Editor視窗
        /// 3. 檢查HexString Editor視窗標題
        /// 4. 驗證預設值是否為"00"
        /// 5. 驗證各控制項是否存在
        /// 6. 關閉視窗
        /// 測試描述：開啟TI Editor HexString設定視窗，檢查視窗標題及內容是否正確顯示
        /// 預期輸出：HexString設定視窗的標題及內容須正確顯示
        /// </summary>
        [TestMethod("B11-43")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.HexString, "HexString Editor", "00", typeof(object), DisplayName = "HexString編輯器")]
        public void TIEditor_OpenHexStringEditorWindow_VerifyWindowDisplay(
            VariableDataType dataType,
            string expectedTitle,
            string expectedDefaultValue,
            object dummy)
        {
            // Initialize variable grid
            string CallName = "B11-43_HexStringEditor";
            var varDataGrid = InitializeVariableDataGrid(
                VariableTabType.Condition,
                "",
                CallName,
                dataType,
                VariableEditType.EditBox);

            // Open HexString editor by double clicking
            varDataGrid.PerformClick("/ByCell[1,@Default]", ClickType.LeftClick);

            // Verify window title
            var hexEditor = PP5IDEWindow.PerformGetElement("/Window[0]");
            expectedTitle.ShouldEqualTo(hexEditor.GetText());

            // Verify default value is "00"
            for (int i = 0; i < 1; i++)
            {
                var valueTextBox = hexEditor.PerformGetElement($"/TextBox[{i}]");
                valueTextBox.ShouldNotBeNull();
                valueTextBox.GetText().ShouldEqualTo(expectedDefaultValue);
            }

            // Verify buttons
            hexEditor.PerformGetElement("/ByName[Ok]").ShouldNotBeNull();
            hexEditor.PerformGetElement("/ByName[Cancel]").ShouldNotBeNull();

            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        [TestMethod("B11-44")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow("2", "Test Item Var Editor", "Parameter", "Data Type", "Mapping Parameter", "New Parameter", typeof(object), DisplayName = "Sub TI變數編輯器 - 參數 Condition Parameters")]
        [DataRow("3", "Test Item Var Editor", "Parameter", "Data Type", "Mapping Parameter", "New Parameter", typeof(object), DisplayName = "Sub TI變數編輯器 - 參數 Result Parameters")]
        public void TIEditor_OpenSubTIEditorWindow_VerifyWindowDisplay(
            int parameterTypeIdx,
            string expectedTitle,
            string parameterHeader,
            string dataTypeHeader,
            string mappingParameterHeader,
            string newParameterHeader,
            object dummy)
        {
            // Add Sub TI command
            AddCommandBy(TestCmdGroupType.Sub_TI, "LoadIntArrayToBinaryStringArray");

            // Open Test Item Var Editor
            PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Parameters]", ClickType.LeftClick);
            PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[{parameterTypeIdx},@Parameter Value]", ClickType.LeftClick);

            // Verify window title
            var varEditor = PP5IDEWindow.PerformGetElement("/Window[0]");
            expectedTitle.ShouldEqualTo(varEditor.GetText());

            // Verify grid headers
            var varGrid = varEditor.GetFirstDataGridElement();
            varGrid.ShouldNotBeNull();

            var gridHeaders = varGrid.GetDataGridHeaders();
            gridHeaders[0].ShouldEqualTo(parameterHeader);
            gridHeaders[1].ShouldEqualTo(dataTypeHeader);
            gridHeaders[2].ShouldEqualTo(mappingParameterHeader);
            gridHeaders[3].ShouldEqualTo(newParameterHeader);

            // Verify buttons
            varEditor.PerformGetElement("/ByName[Ok]").ShouldNotBeNull();
            varEditor.PerformGetElement("/ByName[Cancel]").ShouldNotBeNull();
            varEditor.PerformGetElement("/ByName[Scan]").ShouldNotBeNull();
            varEditor.PerformGetElement("/ByName[Default]").ShouldNotBeNull();

            // Verify labels
            varEditor.PerformGetElement("/ByName[Parameter Type]").ShouldNotBeNull();
            varEditor.PerformGetElement("/ByName[Constant Type]").ShouldNotBeNull();

            // Verify radio buttons - Parameter Type
            varEditor.PerformGetElement("/RadioButton[Condition]").ShouldNotBeNull();
            varEditor.PerformGetElement("/RadioButton[Result]").ShouldNotBeNull();
            varEditor.PerformGetElement("/RadioButton[Temporary]").ShouldNotBeNull();
            varEditor.PerformGetElement("/RadioButton[Global]").ShouldNotBeNull();
            varEditor.PerformGetElement("/RadioButton[Constant]").ShouldNotBeNull();

            // Verify radio buttons - Constant Type
            varEditor.PerformGetElement("/RadioButton[Numeric]").ShouldNotBeNull();
            varEditor.PerformGetElement("/RadioButton[Byte]").ShouldNotBeNull();
            varEditor.PerformGetElement("/RadioButton[String]").ShouldNotBeNull();
            varEditor.PerformGetElement("/RadioButton[HexString]").ShouldNotBeNull();

            // Close window
            PP5IDEWindow.CloseWindow(0);
        }

        /// <summary>
        /// 測試用例編號：B11-45
        /// 測試步驟：
        /// 1. 開啟 TI Editor
        /// 2. 點選選單 [Utility] -> [Option]
        /// 3. 修改 LoadNumber 數量為超過上限值(640)
        /// 4. 檢查是否出現超過上限的提醒視窗
        /// 測試描述：驗證 Option 子視窗中 LoadNumber 設定超過上限時的提示
        /// 預期輸出：當設定超過 640 時，應彈出提示視窗顯示超過上限訊息
        /// </summary>
        [TestMethod("B11-45")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(641, "Total Load Number Range : 0 ~ 640", typeof(object), DisplayName = "LoadNumber-超過上限")]
        [DataRow(999, "Total Load Number Range : 0 ~ 640", typeof(object), DisplayName = "LoadNumber-遠超過上限")]
        [DataRow(1000, "Total Load Number Range : 0 ~ 640", typeof(object), DisplayName = "LoadNumber-邊界值測試")]
        public void TIEditor_OpenOptionWindow_CheckLoadNumberLimit(
            int loadNumber,
            string expectedMessage,
            object dummy)
        {
            try
            {
                // 1. 點選選單開啟Option視窗
                MenuSelect("Utility", "Option");

                // 2. 獲取Option視窗
                var optionWindow = PP5IDEWindow.PerformGetElement("/ByName[Option]");
                optionWindow.ShouldNotBeNull();

                // 3. 找到LoadNumber輸入框並輸入測試值
                PP5IDEWindow.PerformInput("/ByName[Option,Total Load Number]", InputType.SendContent, loadNumber.ToString());

                // 4. 點擊確認按鈕
                optionWindow.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 5. 檢查錯誤訊息視窗
                var messageBox = PP5IDEWindow.PerformGetElement("/ByName[Error]");
                messageBox.ShouldNotBeNull();

                // 6. 驗證錯誤訊息內容
                var actualMessage = messageBox.GetFirstEditContent();
                expectedMessage.ShouldEqualTo(actualMessage);

                // 7. 關閉錯誤訊息視窗
                messageBox.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 8. 關閉Option視窗
                optionWindow.PerformClick("/ByName[Cancel]", ClickType.LeftClick);
            }
            finally
            {
                // 確保測試結束後關閉所有視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-46
        /// 測試步驟：
        /// 1. 初始化測試環境並設定一個Array類型變數
        /// 2. 點選並開啟Array Size設定視窗
        /// 3. 輸入超過上限(100001)的數值
        /// 4. 檢查是否出現警告訊息視窗
        /// 測試描述：設定Array Size時，輸入超過上限大小，驗證是否出現警告訊息
        /// 預期輸出：當輸入超過上限值時，應顯示警告訊息視窗
        /// </summary>
        [TestMethod("B11-46_ArraySizeLimit")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.FloatArray, "100001", "Array size must less than or equal to 100000", typeof(object), DisplayName = "Float Array - 超過上限")]
        [DataRow(VariableDataType.IntegerArray, "999999", "Array size must less than or equal to 100000", typeof(object), DisplayName = "Integer Array - 遠超過上限")]
        public void TIEditor_SetArraySize_CheckLimitMessage(
            VariableDataType dataType,
            string arrSize1,
            string expectedErrorMessage,
            object dummy)
        {
            try
            {
                string CallName = "B11-46_ArraySizeLimit";

                // 1. 初始化條件變數表格
                // 2. 設定超過上限的Array Size
                // 3. 驗證是否出現警告訊息ToolTip視窗
                PP5DataGrid varDataGrid = InitializeVariableDataGrid(VariableTabType.Result, "", CallName, VariableDataType.FloatArray, arrSize1);

                if (((PP5Element)PP5IDEWindow).ErrorMessages.Count > 0)
                {
                    Hashtable errMsgs = ((PP5Element)PP5IDEWindow).ErrorMessages;
                    errMsgs.ContainsValue(expectedErrorMessage).ShouldBeTrue();
                    errMsgs.Keys.Count.ShouldEqualTo(1);
                    PP5IDEWindow.PerformGetElement("/Window[0]/Button[Ok]").Enabled.ShouldBeFalse();
                }
            }
            finally
            {
                // 清理測試環境
                // 6. 關閉Array Size設定視窗(設定正確數值)
                PP5IDEWindow.PerformInput("/Window[0]/Edit[0]", InputType.SendContent, 100);
                PP5IDEWindow.PerformClick("/Window[0]/Button[Ok]", ClickType.LeftClick);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-47
        /// 測試步驟：
        /// 1. 開啟 Login 視窗
        /// 2. 取得表格欄位初始寬度
        /// 3. 拖曳欄位分隔線
        /// 4. 驗證欄位寬度變化
        /// 測試描述：驗證 Login 視窗中登入資訊表格的欄位寬度調整功能
        /// 預期輸出：可正常調整表格欄位寬度
        /// </summary>
        [TestMethod("B11-47")]
        [TestCategory("子視窗測試")]
        [DataRow(-50, typeof(object), DisplayName = "向左拖曳欄位分隔線")]
        [DataRow(50, typeof(object), DisplayName = "向右拖曳欄位分隔線")]
        public void LoginWindow_ResizeGridColumn_CheckColumnWidth(int dragOffset, object dummy)
        {
            IElement loginWindow = null;
            try
            {
                // 1. 開啟 Login 視窗
                MenuSelect("File", "Open...");
                loginWindow = PP5IDEWindow.PerformGetElement("/Window[Load Test Item]");
                loginWindow.ShouldNotBeNull("Login 視窗未開啟");

                // 2. 取得欄位初始寬度
                var TINameColumnHeader = loginWindow.PerformGetElement("/ById[HeaderPanel]/ByName[RowData.Row.Name]");
                //var TIUpdateTimeColumnHeader = loginWindow.PerformGetElement("/ById[HeaderPanel]/ByName[RowData.Row.UpdateTime]");
                double initialWidth = TINameColumnHeader.Width;
                
                // 3. 拖曳欄位分隔線
                var columnThumb = TINameColumnHeader.PerformGetElement("/ByClass[Thumb]");
                columnThumb.DragSplitter(System.Windows.Forms.Orientation.Horizontal, dragOffset);

                // 4. 驗證寬度變化
                double newWidth = TINameColumnHeader.Width;

                // 驗證寬度變化是否符合拖曳方向
                if (dragOffset < 0)
                {
                    Assert.IsTrue(newWidth < initialWidth, $"向左拖曳後寬度應減少。初始寬度: {initialWidth}, 現在寬度: {newWidth}");
                }
                else
                {
                    Assert.IsTrue(newWidth > initialWidth, $"向右拖曳後寬度應增加。初始寬度: {initialWidth}, 現在寬度: {newWidth}");
                }
            }
            finally
            {
                loginWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B11-48
        /// 測試步驟：
        /// 測試描述：
        /// 預期輸出：
        /// </summary>
        [TestMethod("B11-48")]
        [TestCategory("子視窗測試(B11)")]
        public void TIEditor_Set2DArraySizeAndDefault_ToColumnValue()
        {
            try
            {
                string CallName = "B11-48";
                string arrSize1 = "100";
                string arrSize2 = arrSize1;
                VariableTabType variableType = VariableTabType.Condition;
                VariableDataType dataType = VariableDataType.Integer2DArray;
                VariableEditType editType = VariableEditType.EditBox;
                VariableColumnType columnType = VariableColumnType.Default;

                // 1. 初始化條件變數表格
                PP5DataGrid varDataGrid = InitializeVariableDataGrid(variableType, "", CallName, dataType, arrSize1, arrSize2);
                VariableSelectionMoveToSpecified(varDataGrid, variableType, dataType, editType, columnType);

                for (int i = 0; i < 4; i+=2)
                    PP5IDEWindow.PerformGetElement($"/ByName[Inner]/ById[svInner]/ComboBox[{i}]").GetText().ShouldEqualTo(arrSize1);
            }
            finally
            {
                // 清理測試環境
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-49, B11-52
        /// 測試步驟：
        /// 1. 初始化測試環境，設定變數類型為Condition/Global
        /// 2. 設定變數資料類型為String
        /// 3. 設定EditType為External_Signal
        /// 4. 點選Default欄位開啟Cluster視窗
        /// 5. 設定External Signal值為"PhoenixonDSP.DSPSensingOFF(0xFF).DSPSensingOFF_Signal"
        /// 6. 驗證設定後的值是否正確顯示
        /// 測試描述：使用Cluster設定一個類行為String且EditType為External_Signal的Condition變數，
        ///          設定完成後按下Default欄位，TI Editor會彈出Cluster視窗供使用者設定
        /// 預期輸出：Cluster視窗可正確設定，設定完成後變數的值可以正確呈現
        /// </summary>
        [TestMethod("B11-49&52")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableTabType.Condition, "B11-49", typeof(object), DisplayName = "Condition-String")]
        [DataRow(VariableTabType.Global, "B11-52", typeof(object), DisplayName = "Global-String")]
        public void TIEditor_SetExternalSignalInClusterWindow_CheckStringDisplay(VariableTabType variableType, string testCaseNo, object dummy)
        {
            try
            {
                string CallName = testCaseNo;
                VariableDataType dataType = VariableDataType.String;
                VariableEditType editType = VariableEditType.External_Signal;
                string[] extSignalNames = new string[] { "PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal" };

                // 1. 初始化條件變數表格
                PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(variableType, "", CallName, dataType, editType, string.Join(".", extSignalNames));
                string defaultValue = varDataGrid.GetCellBy(1, "Default").GetText();
                string DefaultSingleValue = string.Format("{0}{1}{2}", extSignalNames);
                DefaultSingleValue.Insert(DefaultSingleValue.IndexOf('(') - 1, ":");
                DefaultSingleValue.ShouldEqualTo(defaultValue);
            }
            finally
            {
                // 清理測試環境
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-50, B11-53
        /// 測試步驟：
        /// 1. 初始化測試環境，設定變數類型(Condition/Global)
        /// 2. 設定變數資料類型(String[])
        /// 3. 設定EditType為External_Signal
        /// 4. 點選Default欄位開啟Cluster視窗
        /// 5. 設定External Signal值
        /// 6. 驗證設定後的值是否正確顯示
        /// 測試描述：使用Cluster設定不同類型的External_Signal變數
        /// 預期輸出：Cluster視窗可正確設定，設定完成後變數的值可以正確呈現
        /// </summary>
        [TestMethod("B11-50&53")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableTabType.Condition, "B11-50", typeof(object), DisplayName = "Condition-String[]")]
        [DataRow(VariableTabType.Global, "B11-53", typeof(object), DisplayName = "Global-String[]")]
        public void TIEditor_SetExternalSignalInClusterWindow_CheckStringArrayDisplay(VariableTabType variableType, string testCaseNo, object dummy)
        {
            try
            {
                string CallName = testCaseNo;
                VariableDataType dataType = VariableDataType.StringArray;
                VariableEditType editType = VariableEditType.External_Signal;
                string[] extSignalNames = new string[] { "PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal" };
                string arrSize1 = "100";

                // 1. 初始化條件變數表格
                PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(variableType, "", CallName, dataType, editType, string.Join(".", extSignalNames), arrSize1);
                string defaultValue = varDataGrid.GetCellBy(1, "Default").GetText();
                string DefaultSingleValue = string.Format("{0}{1}{2}", extSignalNames);
                DefaultSingleValue.Insert(DefaultSingleValue.IndexOf('(') - 1, ":");
                DefaultSingleValue.ShouldEqualTo(defaultValue);
            }
            finally
            {
                // 清理測試環境
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-51, B11-54
        /// 測試步驟：
        /// 1. 初始化測試環境，設定變數類型(Condition/Global)
        /// 2. 設定變數資料類型(String[][])
        /// 3. 設定EditType為External_Signal
        /// 4. 點選Default欄位開啟Cluster視窗
        /// 5. 設定External Signal值
        /// 6. 驗證設定後的值是否正確顯示
        /// 測試描述：使用Cluster設定不同類型的External_Signal變數
        /// 預期輸出：Cluster視窗可正確設定，設定完成後變數的值可以正確呈現
        /// </summary>
        [TestMethod("B11-51&54")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableTabType.Condition, VariableDataType.String2DArray, "B11-51", typeof(object), DisplayName = "Condition-String[][]")]
        [DataRow(VariableTabType.Global, VariableDataType.String2DArray, "B11-54", typeof(object), DisplayName = "Global-String[][]")]
        public void TIEditor_SetExternalSignalInClusterWindow_CheckString2DArrayDisplay(VariableTabType variableType, string testCaseNo, object dummy)
        {
            try
            {
                string CallName = testCaseNo;
                VariableDataType dataType = VariableDataType.StringArray;
                VariableEditType editType = VariableEditType.External_Signal;
                string[] extSignalNames = new string[] { "PhoenixonDSP", "DSPSensingOFF(0xFF)", "DSPSensingOFF_Signal" };
                string arrSize1 = "100";
                string arrSize2 = arrSize1;

                // 1. 初始化條件變數表格
                PP5DataGrid varDataGrid = CreateNewVariableWithDefaultValue(variableType, "", CallName, dataType, editType, string.Join(".", extSignalNames), arrSize1, arrSize2);
                string defaultValue = varDataGrid.GetCellBy(1, "Default").GetText();
                string DefaultSingleValue = string.Format("{0}{1}{2}", extSignalNames);
                DefaultSingleValue.Insert(DefaultSingleValue.IndexOf('(') - 1, ":");
                DefaultSingleValue.ShouldEqualTo(defaultValue);
            }
            finally
            {
                // 清理測試環境
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-55
        /// 測試步驟：
        /// 1. 在Condition頁籤建立一個HexString類型的變數，EditType設為ComboBox
        /// 2. 點選EnumItem欄位開啟設定視窗
        /// 3. 添加測試值為541的EnumItem
        /// 4. 檢查值是否正確補0
        /// 測試描述：設定Array Size 時，輸入大小為541時的十六進位字串EnumItem自動補0行為
        /// 預期輸出：EnumItem的Value為0541，在遇到奇數個設定值時，會自動補0
        /// </summary>
        [TestMethod("B11-55")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(VariableDataType.HexString, "541", "0541", typeof(object), DisplayName = "HexString-三位數自動補0")]
        [DataRow(VariableDataType.HexString, "1", "01", typeof(object), DisplayName = "HexString-單位數自動補0")]
        [DataRow(VariableDataType.HexString, "12345", "012345", typeof(object), DisplayName = "HexString-五位數自動補0")]
        public void TIEditor_EnumItemEditor_HexStringValuePadding(
            VariableDataType dataType,
            string inputValue,
            string expectedValue,
            object dummy)
        {
            try
            {
                // 1. 初始化變數表格並設定型別
                string CallName = "B11-55_HexString";
                var varDataGrid = InitializeVariableDataGrid(
                    VariableTabType.Condition,
                    "",
                    CallName,
                    dataType,
                    VariableEditType.ComboBox);

                // 2. 開啟EnumItem編輯器
                varDataGrid.PerformClick("/ByCell[1,@Enum Item]", ClickType.LeftClick);

                // 3. 驗證EnumItem Editor視窗開啟
                var enumEditor = PP5IDEWindow.PerformGetElement("/ByName[Enum Item Editor]");
                enumEditor.ShouldNotBeNull();

                // 4. 添加測試值 
                bool addSuccess = AddNewEnumItem("Test", inputValue);
                addSuccess.ShouldBeTrue();

                // 5. 驗證值是否正確補0
                var enumGrid = enumEditor.PerformGetElement("/ById[EnumItemGrid]");
                string actualValue = enumGrid.GetCellBy(1, "Value").GetText();
                expectedValue.ShouldEqualTo(actualValue);
            }
            finally
            {
                // 確保測試結束後關閉所有視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B11-56
        /// 測試步驟：
        /// 1. 新增SubTI命令並選擇LoadIntArrayToBinaryStringArray
        /// 2. 點選第二個參數開啟編輯視窗
        /// 3. 點擊Scan按鈕後按OK
        /// 4. 驗證參數是否正確映射或建立新變數
        /// 測試描述：驗證SubTI命令參數掃描功能,檢查是否能自動映射或建立變數
        /// 預期輸出：若有符合的參數可映射則自動帶入,若無則自動建立新變數
        /// </summary>
        [TestMethod("B11-56")]
        [TestCategory("子視窗測試(B11)")]
        [DataRow(true, typeof(object), DisplayName = "參數自動掃描-有對應參數")]
        [DataRow(false, typeof(object), DisplayName = "參數自動掃描-無對應參數")]
        public void TIEditor_ScanSubTIParameter_VerifyAutoMapping(bool hasMatchingParameter, object dummy)
        {
            try
            {
                int parameterNo = 2;
                string expectedTitle = "Test Item Var Editor";
                string[] CallNames = new string[] { "C_InputInts", "C_BinSize" };
                VariableDataType[] dataTypes = new VariableDataType[] { VariableDataType.IntegerArrayOfSize640, VariableDataType.Integer };

                // 1. 新增SubTI命令
                AddCommandBy(TestCmdGroupType.Sub_TI, "LoadIntArrayToBinaryStringArray");
                
                if (hasMatchingParameter)
                {
                    // 創建對應參數 (C_InputInts:Integer[L] EditBox, C_BinSize:Integer EditBox)
                    for (int i = 0; i < CallNames.Length; i++)
                        InitializeVariableDataGrid(VariableTabType.Condition, "", CallNames[i], dataTypes[i], VariableEditType.ComboBox);
                }

                // 2. 開啟Test Item Var Editor
                PP5IDEWindow.PerformClick($"/ByCell@PGGrid[1,@Parameters]", ClickType.LeftClick);
                PP5IDEWindow.PerformClick($"/ByCell@ParameterGrid[{parameterNo},@Parameter Value]", ClickType.LeftClick);

                // 3. 驗證視窗標題
                var varEditor = PP5IDEWindow.PerformGetElement("/Window[0]");
                expectedTitle.ShouldEqualTo(varEditor.GetText());

                // 4. 點擊Scan按鈕
                varEditor.PerformClick("/ByName[Scan]", ClickType.LeftClick);

                // 5. 驗證自動映射結果
                var varGrid = varEditor.GetFirstDataGridElement();
                varGrid.ShouldNotBeNull();

                for (int i = 1; i <= CallNames.Length; i++)
                {
                    if (hasMatchingParameter)
                    {
                        // 若有對應參數,驗證是否正確映射
                        var mappedVar = varGrid.GetCellBy(i, "Mapping Parameter").GetText();
                        mappedVar.ShouldEqualTo(CallNames[i]);
                    }
                    else
                    {
                        // 若無對應參數,驗證是否自動建立新變數
                        var newVar = varGrid.GetCellBy(i, "New Parameter").GetText();
                        newVar.ShouldEqualTo(CallNames[i]);
                    }
                }

                // 6. 點擊OK按鈕
                varEditor.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 7. 驗證參數表格是否正確更新
                var parameterGrid = PP5IDEWindow.PerformGetElement("/ById[ParameterGrid]");
                var paramValue = parameterGrid.GetCellBy(parameterNo, "Parameter Value").GetText();
                var expectedVarName = string.Format("\"{0},{1}\"", CallNames);
                paramValue.ShouldEqualTo(expectedVarName);
            }
            finally
            {
                // 清理測試環境
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B12-1
        /// 測試步驟：
        /// 1. 新增兩個TestCommand並設定相同的Label
        /// 2. 點選[Utility]->[OverAllCheck]選項
        /// 3. 檢查錯誤訊息視窗是否正確顯示
        /// 測試描述：驗證當Label重複時OverAllCheck功能的錯誤提示
        /// 預期輸出：應顯示OverAllCheck的錯誤訊息視窗
        /// </summary>
        [TestMethod("B12-1")]
        [TestCategory("工具功能(B12)")]
        public void TIEditor_OverAllCheck_DuplicateLabelCheck()
        {
            try
            {
                string labelName = "Label1";
                string cmdName = "ABS";
                string expectedError = $"Test Command {cmdName} Has Error";
                string OverAllCheckLabel = "OverAllCheck";

                // 1. 新增第一個命令並設定Label
                AddCommandBy(TestCmdGroupType.AC_Source, cmdName);
                PP5IDEWindow.PerformInput("/ByCell@PGGrid[1,@Label]", InputType.SendContent, labelName);

                // 2. 新增第二個命令並設定相同的Label
                AddCommandBy(TestCmdGroupType.AC_Source, cmdName);
                PP5IDEWindow.PerformInput("/ByCell@PGGrid[2,@Label]", InputType.SendContent, labelName);

                // 3. 執行OverAllCheck
                MenuSelect("Utility", OverAllCheckLabel);

                // 4. 驗證錯誤訊息視窗
                var errorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                errorWindow.ShouldNotBeNull();
                OverAllCheckLabel.ShouldEqualTo(errorWindow.GetText());

                // 5. 驗證錯誤訊息內容
                var errorMessage = errorWindow.PerformGetElement("/Edit[txtBlockMsg]").GetText();
                errorMessage.ShouldContain(expectedError);
            }
            finally
            {
                // 測試結束後，關閉OverAllCheck視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B12-2
        /// 測試步驟：
        /// 1. 新增兩個TestCommand並設定相同的Label
        /// 2. 點選[Utility]->[Compile]選項
        /// 3. 檢查錯誤訊息視窗是否正確顯示
        /// 測試描述：驗證當Label重複時Compile功能的錯誤提示
        /// 預期輸出：應顯示Compile的錯誤訊息視窗
        /// </summary>
        [TestMethod("B12-2")]
        [TestCategory("工具功能(B12)")]
        public void TIEditor_Compile_DuplicateLabelCheck()
        {
            try
            {
                string labelName = "Label1";
                string cmdName = "ABS";
                string expectedError = $"Test Command {cmdName} Has Error";
                string CompileLabel = "Compile";

                // 1. 新增第一個命令並設定Label
                AddCommandBy(TestCmdGroupType.AC_Source, cmdName);
                PP5IDEWindow.PerformInput("/ByCell@PGGrid[1,@Label]", InputType.SendContent, labelName);

                // 2. 新增第二個命令並設定相同的Label
                AddCommandBy(TestCmdGroupType.AC_Source, cmdName);
                PP5IDEWindow.PerformInput("/ByCell@PGGrid[2,@Label]", InputType.SendContent, labelName);

                // 3. 執行Compile
                MenuSelect("Utility", CompileLabel);

                // 4. 驗證錯誤訊息視窗
                var errorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                errorWindow.ShouldNotBeNull();
                CompileLabel.ShouldEqualTo(errorWindow.GetText());

                // 5. 驗證錯誤訊息內容
                var errorMessage = errorWindow.PerformGetElement("/Edit[txtBlockMsg]").GetText();
                errorMessage.ShouldContain(expectedError);
            }
            finally
            {
                // 測試結束後，關閉Compile視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B12-3
        /// 測試步驟：
        /// 1. 點選[Utility]->[OverAllCheck]選項
        /// 2. 檢查OverAllCheck訊息視窗是否正確顯示
        /// 測試描述：驗證TI編輯沒有錯誤下，OverAllCheck後會彈出訊息告知沒問題
        /// 預期輸出：應顯示OverAllCheck的訊息視窗
        /// </summary>
        [TestMethod("B12-3")]
        [TestCategory("工具功能(B12)")]
        public void TIEditor_OverAllCheck_CheckMessageIsDisplayed()
        {
            try
            {
                string expectedSuccessMsg = "Over all check is complete";
                string overAllCheckLabel = "OverAllCheck";

                // 1. 執行OverAllCheck
                MenuSelect("Utility", overAllCheckLabel);

                // 2. 驗證OverAllCheck訊息視窗
                var overAllCheckWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                overAllCheckWindow.ShouldNotBeNull();
                overAllCheckLabel.ShouldEqualTo(overAllCheckWindow.GetText());

                // 3. 驗證OverAllCheck成功訊息內容
                var successMessage = overAllCheckWindow.PerformGetElement("/Edit[txtBlockMsg]").GetText();
                successMessage.ShouldContain(expectedSuccessMsg);
            }
            finally
            {
                // 測試結束後，關閉OverAllCheck視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B12-4
        /// 測試步驟：
        /// 1. 點選[Utility]->[Compile]選項
        /// 2. 檢查Compile訊息視窗是否正確顯示
        /// 測試描述：驗證TI編輯沒有錯誤下，Compile後會彈出訊息告知沒問題
        /// 預期輸出：應顯示Compile的訊息視窗
        /// </summary>
        [TestMethod("B12-4")]
        [TestCategory("工具功能(B12)")]
        public void TIEditor_Compile_CheckMessageIsDisplayed()
        {
            try
            {
                string expectedSuccessMsg = "Compilation is complete";
                string compileLabel = "Compile";

                // 1. 執行Compile
                MenuSelect("Utility", compileLabel);

                // 2. 驗證Compile訊息視窗
                var compileWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                compileWindow.ShouldNotBeNull();
                compileLabel.ShouldEqualTo(compileWindow.GetText());

                // 3. 驗證Compile成功訊息內容
                var successMessage = compileWindow.PerformGetElement("/Edit[txtBlockMsg]").GetText();
                successMessage.ShouldContain(expectedSuccessMsg);
            }
            finally
            {
                // 測試結束後，關閉Compile視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B12-5  
        /// 測試步驟：  
        /// 1. 以不同手法(拖曳、浮動、合併)改變 TI Editor 的視窗布局  
        /// 2. 點選 [Edit] -> [Default Dock]  
        /// 3. 驗證跳出完成預設布局的提示訊息  
        /// 4. 按 [OK] 關閉提示視窗  
        /// 5. 驗證所有 Panel 不是 Floating 狀態 (確認無任何 Floating 視窗元素)  
        /// 測試描述：參考 B10-2、B10-8，不同手法改變佈局後，驗證 Default Dock 功能是否能正確恢復預設佈局  
        /// 預期輸出：不論如何變更布局，Default Dock 都能正確恢復，並顯示完成訊息 (英文語系)  
        /// </summary>
        [TestMethod("B12-5")]
        [TestCategory("工具功能(B12)")]
        [DataRow("Drag", new TIPanelType[] { TIPanelType.TCListPanel, TIPanelType.VariablePanel }, typeof(object), DisplayName = "拖曳佈局-英文")]
        [DataRow("Float", new TIPanelType[] { TIPanelType.TCListPanel, TIPanelType.TCParameterPanel }, typeof(object), DisplayName = "浮動佈局-英文")]
        [DataRow("Merge", new TIPanelType[] { TIPanelType.VariablePanel, TIPanelType.TCListPanel, TIPanelType.TCParameterPanel }, typeof(object), DisplayName = "合併佈局-英文")]
        public void TIEditor_DefaultDock_RestoreDefaultLayout(string layoutChangeMethod, TIPanelType[] sourcePanelTypes, object dummy)
        {
            // 1. 根據不同手法改變 TI Editor 的視窗布局
            for (int i = 0; i < sourcePanelTypes.Length; i++)
            {
                switch (layoutChangeMethod)
                {
                    case "Drag":
                        DragPanelSplitter(sourcePanelTypes[i], System.Windows.Forms.Orientation.Horizontal, System.Windows.Automation.DockPosition.Right, dragOffsetX: 50, dragOffsetY: 0);
                        break;
                    case "Float":
                        FloatPanel(sourcePanelTypes[i]);
                        break;
                    case "Merge":
                        DragAndMergePanel(sourcePanelTypes[i + 1], sourcePanelTypes[0]);
                        break;
                }
            }

            // 2. 回復初始Docking
            RestoreDefaultDocking(WindowType.TIEditor);

            // 3. 驗證所有 Panel 不是 Floating 狀態
            //    如果為 Floating，可能會出現名為 "FloatingPanel" 的 Window 元素
            TIPanelType[] allTIPanels = Enum.GetValues(typeof(TIPanelType)).Cast<TIPanelType>().ToArray();
            for (int i = 0; i < sourcePanelTypes.Length; i++)
            {
                var anyFloatingPanel = PP5IDEWindow.PerformGetElement($"/ByName[{allTIPanels[i]}]");
                anyFloatingPanel.ShouldBeNull();
            }
        }

        /// <summary>
        /// 測試用例編號：B12-6
        /// 測試步驟：
        /// 1. 開啟 TI Editor，建立新的測項 (TI)
        /// 2. 添加一個 SET 命令，並將其參數設定為 Vector 參數 (如 LineInVector、LoadVector、SpecVector 等)
        /// 3. 設定完成後，直接執行 Compile
        /// 測試描述：在 TI Editor 中設定含有 Vector 參數的命令後，Compile 不應出現錯誤
        /// 預期輸出：Compile 成功，並跳出提示訊息告知編譯無誤
        /// </summary>
        [TestMethod("B12-6")]
        [TestCategory("工具功能(B12)")]
        [DataRow(VariableDataType.LineInVector, typeof(object), DisplayName = "LineInVector參數測試")]
        [DataRow(VariableDataType.LoadVector, typeof(object), DisplayName = "LoadVector參數測試")]
        [DataRow(VariableDataType.SpecVector, typeof(object), DisplayName = "SpecVector參數測試")]
        public void TIEditor_CreateNewTestItem_SetVectorParameterThenCompile(VariableDataType dataType, object dummy)
        {
            try
            {
                // 1. 添加一個 SET 命令/Vector參數
                string vecCallName = "B12-6";
                AddCommandBy(TestCmdGroupType.Arithmetic, "SET");
                InitializeVariableDataGrid(VariableTabType.Condition, "", vecCallName, dataType);

                // 將 SET 命令的參數設定為 Vector參數
                // 假設此段可以透過 PerformInput 或指定欄位動作完成
                PP5IDEWindow.PerformClick("/ByCell@PGGrid[1,@Parameters]", ClickType.LeftClick);
                PP5IDEWindow.PerformGetElement("/ByCell@ParameterGrid[1,@Parameter Value]")
                            .SelectItem(vecCallName);

                // 2. 直接執行 Compile
                MenuSelect("Utility", "Compile");

                // 3. 驗證編譯成功訊息：假設出現一個視窗顯示編譯無誤
                var compileWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                compileWindow.ShouldNotBeNull();
                compileWindow.GetText().ShouldContain("Compile");  // 假設標題或內容顯示 Compile 字樣

                var compileMsg = compileWindow.PerformGetElement("/Edit[txtBlockMsg]").GetText();
                compileMsg.ShouldContain("Compilation is complete"); // 假設會顯示此訊息
            }
            finally
            {
                // 測試結束後，關閉Compile視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-1  
        /// 測試步驟：  
        /// 1. 點選 [Utility] -> [CAN Cluster Editor…]  
        /// 2. 確認是否正確開啟 CAN Cluster Editor視窗並載入相應設定檔  
        /// 3. 取得第一個ComboBox的選中值，驗證是否為預期  
        /// 測試描述：  
        /// 驗證在打開 CAN Cluster Editor 後，是否可以正確載入設定檔，  
        /// 並顯示第一個ComboBox的預期值 (例如 "PhoenixonDSP")  
        /// 預期輸出：  
        /// 1. CAN Cluster Editor視窗能被正確打開  
        /// 2. 載入 System Default 或對應設定檔時，第一個ComboBox顯示預期的選中值  
        /// </summary>
        [TestMethod("B13-1")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        [DataRow("PhoenixonDSP", typeof(object), DisplayName = "載入System Default cluster檔案，ComboBox顯示PhoenixonDSP")]
        public void CANClusterEditor_OpenWindowAndCheckDefaultCluster_B13_1(string expectedClusterName, object dummy)
        {
            try
            {
                // 1. 點選 [Utility] -> [CAN Cluster Editor…]
                MenuSelect("Utility", "CAN Cluster Editor...");

                // 2. 確認是否成功打開 CAN Cluster Editor 視窗
                var clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 假設進入後會自動載入 clusterFileKey 對應的設定檔 (System Default 或 UserSetting)

                // 3. 取得第一個ComboBox元素
                var comboBoxEl = clusterEditorWindow.PerformGetElement("/ById[mainWindow]/ByName[CAN DBC List]/ById[clusterCBox]");
                comboBoxEl.ShouldNotBeNull("未找到 CAN Cluster Editor 的第一個ComboBox");

                // 4. 讀取第一個ComboBox 當前的選中值
                string actualValue = comboBoxEl.GetText();

                // 5. 驗證是否為預期值
                expectedClusterName.ShouldEqualTo(actualValue, $"第一個ComboBox的顯示值應為 {expectedClusterName}，但實際得到 {actualValue}");
            }
            finally
            {
                // 清理：關閉 CAN Cluster Editor
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-4
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster 編輯器視窗
        /// 2. 在 CAN Cluster 編輯器中點選 [File] -> [New]
        /// 3. 檢查是否開啟名為 "UnClassified" 的空 dbc 檔
        /// 4. 檢查 [File] -> [Open System Default] 是否為 Enable 狀態
        /// 5. 檢查 [File] -> [Set System Default] 是否為 Disable 狀態
        /// 測試描述：驗證在 CAN Cluster 編輯器中新建空 dbc 檔並確認相關選項狀態
        /// 預期輸出：能正常開啟名為 "UnClassified" 的空 dbc 檔，[Open System Default] 為可用，[Set System Default] 為不可用
        /// </summary>
        [TestMethod("B13-4_建立空DBC檔案後檔名與選項狀態驗證")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        //[DataRow("UnClassified", typeof(object), DisplayName = "建立空DBC檔案後檔名與選項狀態驗證")]
        public void CANClusterEditor_FileNew_CreateEmptyDBCCheck()
        {
            try
            {
                CANClusterEditorCreateEmptyDBC();       // 1. 開啟 CAN Cluster Editor, 創建一個空的 dbc 檔案
            }
            finally
            {
                // 測試結束後，關閉 CAN Cluster Editor
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-5
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster 編輯器視窗
        /// 2. 在 CAN Cluster 編輯器中點選 [File] -> [Open]
        /// 3. 彈出 Open 子視窗，並顯示資料夾內可用的 dbc Template 檔案
        /// 測試描述：驗證在 CAN Cluster 編輯器中使用 [Open] 功能時，能正常列出 dbc Template 檔案清單
        /// 預期輸出：成功顯示 Open 子視窗，且能列出資料夾內所有 dbc Template 檔案
        /// </summary>
        [TestMethod("B13-5_顯示所有 dbc Template 檔案")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        public void CANClusterEditor_FileOpen_ShowDBCFiles()
        {
            try
            {
                // 1. 開啟 CAN Cluster 編輯器視窗
                PP5IDEWindow.MenuSelect("Utility", "CAN Cluster Editor...");
                var clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster 編輯器視窗未開啟");

                // 2. 點選 [File] -> [Open] 以彈出 Open 子視窗
                clusterEditorWindow.MenuSelect("File", "Open");

                // 3. 驗證 Open 子視窗是否彈出
                var openDialog = clusterEditorWindow.PerformGetElement("/Window[Open File]");
                openDialog.ShouldNotBeNull("Open 子視窗未彈出");

                // 4. 驗證是否顯示資料夾內的 dbc Template 檔案清單
                // 假設可透過指定 Element / List 取出實際檔案清單
                // 以下為範例程式，實際實作取決於專案框架
                var fileListElement = openDialog.PerformGetElement("/ById[lbFiles]");
                fileListElement.ShouldNotBeNull("無法找到檔案清單列表控件");
                string[] dbcTemplateFilesActual = fileListElement.GetComboBoxItemNames();
                // 4.1 模擬切換檔案路徑 (若有需要)
                // openDialog.PerformInput("/ById[pathTextBox]", InputType.SendContent, folderPath);

                // 4.2 檢查該路徑下所有 .clj 檔案是否正確列出 (可依實際框架判斷)
                // 這裡僅示範用 ContainsDBCFilesInFolder(folderPath) 來驗證
                // 具體實作依照實際UI框架
                string dbcTemplateFolder = string.Format("{0}/DBCTemplate", PowerPro5Config.ReleaseFolder);
                string[] dbcTemplateFilesExpected = FileProcessingExtension.GetFilesWithExtensionName(dbcTemplateFolder, "clj", out bool hasDBCTemplateFiles);
                hasDBCTemplateFiles.ShouldBeTrue($"資料夾 {dbcTemplateFolder} 中預期應有 .clj 之DBCTemplate檔案");
                dbcTemplateFilesExpected.ShouldEqualTo(dbcTemplateFilesActual);

                // 5. 若需要，可以在此關閉視窗或做其他清理
                openDialog.PerformClick("/ByName[Cancel]", ClickType.LeftClick);
            }
            finally
            {
                // 測試結束後，關閉 CAN Cluster Editor
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-6
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster 編輯器視窗
        /// 2. 在 CAN Cluster 編輯器畫面點選 [File] -> [Open]
        /// 3. 選擇第一個 dbc Template 檔案後，點選 OK
        /// 4. 驗證該 dbc Template 檔案已成功載入，且參數讀取正確
        /// 測試描述：透過載入選定的 dbc Template 檔案，確認 CAN Cluster Editor 能正常開啟並讀取內容
        /// 預期輸出：成功載入所選 dbc Template 檔案，並能讀取相關訊息
        /// </summary>
        [TestMethod("B13-6")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        public void CANClusterEditor_FileOpen_LoadSelectedDBCFile()
        {
            try
            {
                // 1. 開啟 CAN Cluster 編輯器視窗
                PP5IDEWindow.MenuSelect("Utility", "CAN Cluster Editor...");
                var clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster 編輯器視窗未開啟");

                // 2. 在 CAN Cluster 編輯器中點選 [File] -> [Open]
                clusterEditorWindow.MenuSelect("File", "Open");

                // 3. 等待彈出 Open 子視窗，並選擇指定的 dbc 檔案
                var openDialog = clusterEditorWindow.PerformGetElement("/Window[Open File]");
                openDialog.ShouldNotBeNull("Open 子視窗未彈出");

                // 選擇第一個dbc Template檔案
                string dbcFileName = openDialog.SelectItem(0).Text;

                // 點選 OK
                openDialog.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 4. 若檔案存在，應成功載入
                // 檢查 CAN Cluster Editor 是否顯示載入成功 (可依實作調整)
                // 以下僅舉例，由於不清楚實際 UI 呈現，可以根據實際測試框架調整
                var clusterTitle = clusterEditorWindow.GetText();
                clusterTitle.ShouldContain(dbcFileName, $"應載入 {dbcFileName} 檔案");
            }
            finally
            {
                // 測試結束後，關閉 CAN Cluster Editor 視窗
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-7
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster 編輯器視窗
        /// 2. 在 CAN Cluster 編輯器中點選 [File] -> [Open]
        /// 3. 選擇一個非 System Default 的檔案並點選 OK
        /// 4. 驗證 [Open System Default] 和 [Set as System Default] 是否變為 Enable
        /// 測試描述：載入非 System Default 檔案後，確認相關選單項目狀態改變
        /// 預期輸出：[Open System Default] 和 [Set as System Default] 應由 Disable 變為 Enable
        /// </summary>
        [TestMethod("B13-7_載入非SystemDefault檔案")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        public void CANClusterEditor_FileOpen_LoadNonSystemDefaultFile()
        {
            try
            {
                // 1. 開啟 CAN Cluster 編輯器視窗
                MenuSelect("Utility", "CAN Cluster Editor...");
                var clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster 編輯器視窗未開啟");

                // 2. 檢查初始狀態 (假設為 System Default)
                clusterEditorWindow.MenuSelect("File");
                clusterEditorWindow.PerformGetElement("/ByName[Open System Default]").ShouldBeDisabled("[Open System Default] 應為Disabled狀態");
                clusterEditorWindow.PerformGetElement("/ByName[Set as System Default]").ShouldBeDisabled("[Set as System Default] 應為Disabled狀態");
                clusterEditorWindow.MenuSelect("File");
                string defaultDbcName = clusterEditorWindow.GetText().Split('[', ']')[1].Trim();     // 取得 System Default 檔案名稱

                // 3. 開啟檔案選擇對話框
                clusterEditorWindow.MenuSelect("File", "Open");

                // 4. 選擇並開啟非 System Default 檔案
                var openDialog = PP5IDEWindow.PerformGetElement("/Window[Open File]");
                openDialog.ShouldNotBeNull("開啟檔案對話框未顯示");

                var fileList = openDialog.PerformGetElement("/ById[lbFiles]");
                fileList.ShouldNotBeNull("找不到檔案清單");

                // 5. 選擇測試檔案
                List<string> dbcfileNames = fileList.GetComboBoxItemNames().ToList();
                dbcfileNames.Remove(defaultDbcName);
                fileList.SelectItem(dbcfileNames[0]);
                openDialog.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 6. 驗證選單狀態變更
                clusterEditorWindow.MenuSelect("File");
                clusterEditorWindow.PerformGetElement("/ByName[Open System Default]").ShouldBeEnabled("[Open System Default] 應為Enabled狀態");
                clusterEditorWindow.PerformGetElement("/ByName[Set as System Default]").ShouldBeEnabled("[Set as System Default] 應為Enabled狀態");
                clusterEditorWindow.MenuSelect("File");
            }
            finally
            {
                PP5IDEWindow.CloseWindow(0);        // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-8
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster 編輯器視窗
        /// 2. 在 CAN Cluster 編輯器中點選 [File] -> [Open]
        /// 3. 選擇 System Default 檔案並點選 OK
        /// 4. 驗證 [Open System Default] 和 [Set as System Default] 是否變為 Disable
        /// 測試描述：載入 System Default 檔案後，確認相關選單項目狀態改變
        /// 預期輸出：[Open System Default] 和 [Set as System Default] 應變為 Disable
        /// </summary>
        [TestMethod("B13-8_載入SystemDefault檔案")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        //[DataRow("非SystemDefault", "SystemDefault", typeof(object), DisplayName = "載入SystemDefault檔案")]
        public void CANClusterEditor_FileOpen_LoadSystemDefaultFile()
        {
            try
            {
                // 1. 開啟 CAN Cluster 編輯器視窗
                MenuSelect("Utility", "CAN Cluster Editor...");
                var clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster 編輯器視窗未開啟");

                // 2. 先載入非 System Default 檔案確保選單為 Enable
                clusterEditorWindow.MenuSelect("File", "Open");
                var openDialog = PP5IDEWindow.PerformGetElement("/Window[Open File]");
                var fileList = openDialog.PerformGetElement("/ById[lbFiles]");
                string defaultDbcName = clusterEditorWindow.GetText().Split('[', ']')[1].Trim();     // 取得 System Default 檔案名稱
                List<string> dbcfileNames = fileList.GetComboBoxItemNames().ToList();
                dbcfileNames.Remove(defaultDbcName);

                string nonDefaultDbcName = dbcfileNames[0];
                fileList.SelectItem(nonDefaultDbcName);
                openDialog.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 3. 驗證選單為 Enable
                clusterEditorWindow.MenuSelect("File");
                clusterEditorWindow.PerformGetElement("/ByName[Open System Default]").ShouldBeEnabled();
                clusterEditorWindow.PerformGetElement("/ByName[Set as System Default]").ShouldBeEnabled();
                clusterEditorWindow.MenuSelect("File");

                // 4. 再次開啟檔案選擇對話框，選擇 System Default
                clusterEditorWindow.MenuSelect("File", "Open");
                openDialog = PP5IDEWindow.PerformGetElement("/Window[Open File]");
                fileList = openDialog.PerformGetElement("/ById[lbFiles]");
                fileList.SelectItem(defaultDbcName);
                openDialog.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 5. 驗證選單狀態變更為 Disable
                clusterEditorWindow.MenuSelect("File");
                clusterEditorWindow.PerformGetElement("/ByName[Open System Default]").ShouldBeDisabled();
                clusterEditorWindow.PerformGetElement("/ByName[Set as System Default]").ShouldBeDisabled();
                clusterEditorWindow.MenuSelect("File");
            }
            finally
            {
                // 清理：關閉所有視窗
                PP5IDEWindow.CloseWindow(0);        // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-9
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗，新增一個空的 DBC 檔案
        /// 2. 確認 dbc 檔案名稱是否已存在
        /// 3. 點選儲存按鈕 [Save As]
        /// 4. 輸入檔案名稱並按下 OK
        /// 5. 等待30秒後，點選儲存按鈕 [Save]
        /// 6. 檢查指定資料夾中dbc 檔案之修改時間是否為30秒後
        /// 測試描述：驗證在 CAN Cluster Editor 中建立新的 DBC 檔案並儲存舊檔的功能
        /// 預期輸出：
        /// 1. 成功開啟 CAN Cluster Editor
        /// 2. 成功儲存檔案
        /// 3. 在指定路徑下該 DBC 檔案有更新
        /// </summary>
        [TestMethod("B13-9")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        [DataRow("Menu", typeof(object), DisplayName = "選單存檔-檔名重複")]
        [DataRow("ToolBar", typeof(object), DisplayName = "工具列存檔-檔名重複")]
        public void CANClusterEditor_FileSave_CheckDbcFileIsUpdated(string saveAsMethod, object dummy)
        {
            string dbcTemplateFolder = string.Format("{0}/DBCTemplate", PowerPro5Config.ReleaseFolder);
            string dbcName = "B13-9";
            string dbcExtensionName = "clj";
            string fullPath = string.Format("{0}/{1}.{2}", dbcTemplateFolder, dbcName, dbcExtensionName);

            try
            {
                // 1. 創建空的 DBC 檔案
                CANClusterEditorCreateEmptyDBC();

                // 2 & 3. 點選 Save As 並確認檔案名稱不重複
                PP5IDEWindow.PerformClick("/Window[0]/ById[BtnSaveAs]", ClickType.LeftClick);
                var fileList = PP5IDEWindow.PerformGetElement("/Window[1]/ById[lbFiles]");
                var dbcfileNames = fileList.GetComboBoxItemNames();
                dbcfileNames.ShouldNotContain(dbcName, $"DBC檔案名稱 \"{dbcName}\" 已存在");

                // 4. 輸入檔案名稱並儲存
                PP5IDEWindow.PerformInput("/Window[1]/ById[txtFileName]", InputType.SendContent, dbcName);
                PP5IDEWindow.PerformClick("/Window[1]/ByName[OK]", ClickType.LeftClick);

                // 驗證檔案是否成功儲存
                FileProcessingExtension.GetFilesWithExtensionName(dbcTemplateFolder, dbcExtensionName, out bool hasDBCTemplateFiles);
                hasDBCTemplateFiles.ShouldBeTrue($"找不到已儲存的DBC檔案: {dbcName}");

                // 記錄第一次儲存的時間
                DateTime firstSaveTime = File.GetLastWriteTime(fullPath);

                // 5. 等待30秒
                Thread.Sleep(30000);

                // 點選 Save 按鈕更新檔案 (透過選單或工具列)
                if (saveAsMethod == "Menu")
                    PP5IDEWindow.PerformGetElement("/Window[0]").MenuSelect("File", "Save");
                else
                    PP5IDEWindow.PerformClick("/Window[0]/ById[BtnSave]", ClickType.LeftClick);

                // 6. 驗證檔案更新時間
                DateTime secondSaveTime = File.GetLastWriteTime(fullPath);
                TimeSpan timeDiff = secondSaveTime - firstSaveTime;
                Assert.IsTrue(timeDiff.TotalSeconds >= 30, "檔案更新時間間隔應至少30秒");
            }
            finally
            {
                //var windowTemp = PP5IDEWindow;
                //for (int i = 0; i < PP5IDEWindow.GetWindowCount(); i++)
                //{
                //    windowTemp = windowTemp.PerformGetElement("/Window[0]");
                //    windowTemp.CloseWindow(i);
                //}

                // 清理：關閉所有視窗並刪除測試檔案
                for (int i = 0; i < 2; i--)         // Close CAN Cluster Editor and DBC Editor
                    PP5IDEWindow.CloseWindow(i);
                if (File.Exists(fullPath))
                    File.Delete(fullPath);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-10
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗，點選儲存按鈕 [Save As]
        /// 2. Open File視窗顯示資料夾內有的dbc檔案
        /// 測試描述：驗證在 CAN Cluster Editor 中另存新檔[Save As]的功能能否正常顯示所有已存在的dbc檔案
        /// 預期輸出：
        /// 1. 成功開啟 CAN Cluster Editor
        /// 2. 在指定路徑下可找到所有的 DBC 檔案
        /// </summary>
        [TestMethod("B13-10")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        [DataRow("Menu", typeof(object), DisplayName = "選單另存為-檢查Open File視窗顯示資料夾內有的dbc檔案")]
        [DataRow("ToolBar", typeof(object), DisplayName = "工具列另存為-檢查Open File視窗顯示資料夾內有的dbc檔案")]
        public void CANClusterEditor_FileSaveAs_CheckDbcFilesAreDisplayed(string saveAsMethod, object dummy)
        {
            string dbcTemplateFolder = string.Format("{0}/DBCTemplate", PowerPro5Config.ReleaseFolder);
            string dbcExtensionName = "clj";
            try
            {
                PP5IDEWindow.MenuSelect("Utility", "CAN Cluster Editor...");                                                            // 1-1. 開啟 CAN Cluster 編輯器視窗

                if (saveAsMethod == "Menu")                                                                                             // 1-2. 點選 Save As (透過選單或工具列)
                    PP5IDEWindow.PerformGetElement("/Window[0]").MenuSelect("File", "Save As");
                else
                    PP5IDEWindow.PerformClick("/Window[0]/ById[BtnSaveAs]", ClickType.LeftClick);

                var fileList = PP5IDEWindow.PerformGetElement("/Window[1]/ById[lbFiles]");                                              // 2. Open File視窗顯示資料夾內有的dbc檔案
                var dbcfileNames = fileList.GetComboBoxItemNames();
                var localDbcfileNames = FileProcessingExtension.GetFilesWithExtensionName(dbcTemplateFolder, dbcExtensionName, out _);
                CollectionAssert.AreEqual(dbcfileNames, localDbcfileNames);
            }
            finally
            {
                //var windowTemp = PP5IDEWindow;
                //for (int i = 0; i < PP5IDEWindow.GetWindowCount(); i++)
                //{
                //    windowTemp = windowTemp.PerformGetElement("/Window[0]");
                //    windowTemp.CloseWindow(i);
                //}

                // 清理：關閉所有視窗並刪除測試檔案
                for (int i = 0; i < 2; i--)         // Close CAN Cluster Editor and DBC Editor
                    PP5IDEWindow.CloseWindow(i);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-11
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗，創建並儲存一個 DBC 檔案
        /// 2. 點選儲存按鈕 [Save As] 或工具列的 SaveAs 圖示
        /// 3. 輸入與已存在檔案相同的名稱並按下 OK
        /// 4. 驗證是否出現覆蓋詢問視窗
        /// 測試描述：驗證在另存新檔時，輸入重複檔名時的覆蓋確認機制
        /// 預期輸出：顯示檔案覆蓋的詢問視窗
        /// </summary>
        [TestMethod("B13-11")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Menu", typeof(object), DisplayName = "選單另存為-檔名重複")]
        [DataRow("ToolBar", typeof(object), DisplayName = "工具列另存為-檔名重複")]
        public void CANClusterEditor_FileSaveAs_CheckOverwritePrompt(string saveAsMethod, object dummy)
        {
            string dbcTemplateFolder = string.Format("{0}/DBCTemplate", PowerPro5Config.ReleaseFolder);
            string dbcExtensionName = "clj";
            string existingFileName = "B13-11";
            string fullPath = string.Format("{0}/{1}.{2}", dbcTemplateFolder, existingFileName, dbcExtensionName);

            try
            {
                // 1. 創建並儲存第一個檔案
                CANClusterEditorCreateEmptyDBC();
                PP5IDEWindow.PerformClick("/Window[0]/ById[BtnSaveAs]", ClickType.LeftClick);
                PP5IDEWindow.PerformInput("/Window[1]/ById[txtFileName]", InputType.SendContent, existingFileName);
                PP5IDEWindow.PerformClick("/Window[1]/ByName[OK]", ClickType.LeftClick);

                // 2. 再次點選 Save As (透過選單或工具列)
                if (saveAsMethod == "Menu")
                    PP5IDEWindow.PerformGetElement("/Window[0]").MenuSelect("File", "Save As");
                else
                    PP5IDEWindow.PerformClick("/Window[0]/ById[BtnSaveAs]", ClickType.LeftClick);

                // 3. 輸入相同檔名
                PP5IDEWindow.PerformInput("/Window[1]/ById[txtFileName]", InputType.SendContent, existingFileName);
                PP5IDEWindow.PerformClick("/Window[1]/ByName[OK]", ClickType.LeftClick);

                // 4. 驗證覆蓋詢問視窗
                var msgBox = PP5IDEWindow.PerformGetElement("/Window[DBC Editor]");
                msgBox.ShouldNotBeNull("未出現覆蓋確認視窗");

                string expectedPrompt = $"The File '{existingFileName}' already exists. \r\n Do you want to overwrite?";
                var msgText = msgBox.PerformGetElement("/Edit[txtBlockMsg]").GetText();
                msgText.ShouldContain(expectedPrompt, "覆蓋確認訊息內容不符");
            }
            finally
            {
                //var windowTemp = PP5IDEWindow;
                //for (int i = 0; i < PP5IDEWindow.GetWindowCount(); i++)
                //{
                //    windowTemp = windowTemp.PerformGetElement("/Window[0]");
                //    windowTemp.CloseWindow(i);
                //}

                // 清理：關閉所有視窗並刪除測試檔案
                PP5IDEWindow.CloseWindow(0);        // Close MseeageBox / DBC Editor
                PP5IDEWindow.CloseWindow(0);        // Close CAN Cluster Editor

                if (File.Exists(fullPath))
                    File.Delete(fullPath);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-12
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗，新增一個空的 DBC 檔案
        /// 2. 確認 dbc 檔案名稱是否已存在
        /// 3. 點選儲存按鈕 [Save As]
        /// 4. 輸入檔案名稱並按下 OK
        /// 5. 檢查指定資料夾中是否成功儲存該檔案
        /// 測試描述：驗證在 CAN Cluster Editor 中建立新的 DBC 檔案並另存新檔的功能
        /// 預期輸出：
        /// 1. 成功開啟 CAN Cluster Editor
        /// 2. 成功另存新檔
        /// 3. 在指定路徑下可找到儲存的 DBC 檔案
        /// </summary>
        [TestMethod("B13-12")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        [DataRow("Menu", typeof(object), DisplayName = "選單另存為-儲存一個新的dbc檔案")]
        [DataRow("ToolBar", typeof(object), DisplayName = "工具列另存為-儲存一個新的dbc檔案")]
        public void CANClusterEditor_FileSaveAs_CheckDbcFileIsSaved(string saveAsMethod, object dummy)
        {
            string dbcTemplateFolder = string.Format("{0}/DBCTemplate", PowerPro5Config.ReleaseFolder);
            string dbcName = "B13-12";
            string dbcExtensionName = "clj";
            string fullPath = string.Format("{0}/{1}.{2}", dbcTemplateFolder, dbcName, dbcExtensionName);
            try
            {
                CANClusterEditorCreateEmptyDBC();                                                                                       // 1. 創建一個空的 dbc 檔案

                if (saveAsMethod == "Menu")                                                                                             // 2. 確認 dbc 檔案名稱是否已存在 (透過選單或工具列)
                    PP5IDEWindow.PerformGetElement("/Window[0]").MenuSelect("File", "Save As");
                else
                    PP5IDEWindow.PerformClick("/Window[0]/ById[BtnSaveAs]", ClickType.LeftClick);

                var fileList = PP5IDEWindow.PerformGetElement("/Window[1]/ById[lbFiles]");                                      
                var dbcfileNames = fileList.GetComboBoxItemNames();
                dbcfileNames.ShouldNotContain(dbcName, $"dbc 檔案名稱 \"{dbcName}\" 已存在");

                PP5IDEWindow.PerformInput("/Window[1]/ById[txtFileName]", InputType.SendContent, dbcName);                              // 3. 儲存該 dbc 檔案
                PP5IDEWindow.PerformClick("/Window[1]/ByName[OK]", ClickType.LeftClick);

                string currentDbcWindowTitle= PP5IDEWindow.PerformGetElement("/Window[0]").GetText();                                   // 4. 驗證檔案是否儲存成功
                currentDbcWindowTitle.ShouldContain(dbcName);                                                                           // 確認視窗標題的檔案名稱改為新檔名稱
                PP5IDEWindow.PerformGetElement("/Window[0]").MenuSelect("File");
                PP5IDEWindow.PerformGetElement("/Window[0]").PerformGetElement("/ByName[Open System Default]").ShouldBeEnabled();       // [File] > [Open System Default]、[Set System Default]變更為Enable狀態
                PP5IDEWindow.PerformGetElement("/Window[0]").PerformGetElement("/ByName[Set as System Default]").ShouldBeEnabled();
                FileProcessingExtension.GetFilesWithExtensionName(dbcTemplateFolder, dbcExtensionName, out bool hasDBCTemplateFiles);   // 本地端檢查是否有已儲存的 dbc 檔
                hasDBCTemplateFiles.ShouldBeTrue($"找不到已儲存的DBC檔案: {dbcName}");
            }
            finally
            {
                //var windowTemp = PP5IDEWindow;
                //for (int i = 0; i < PP5IDEWindow.GetWindowCount(); i++)
                //{
                //    windowTemp = windowTemp.PerformGetElement("/Window[0]");
                //    windowTemp.CloseWindow(i);
                //}

                // 清理：關閉所有視窗並刪除測試檔案
                PP5IDEWindow.CloseWindow(0);        // Close CAN Cluster Editor
                if (File.Exists(fullPath))
                    File.Delete(fullPath);
            }
        }

        /// <summary>
        /// 測試用例編號：B13-13
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor
        /// 2. 點選 Import CAN DBC 按鈕
        /// 3. 驗證是否彈出選擇 DBC 文件視窗
        /// 測試描述：驗證在 CAN Cluster Editor 中點選 Import CAN DBC 按鈕後的檔案選擇視窗顯示
        /// 預期輸出：正確顯示選擇 DBC 文件視窗
        /// </summary>
        [TestMethod("B13-13")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Cluster Import", typeof(object), DisplayName = "開啟選擇DBC檔案視窗")]
        public void CANClusterEditor_ImportCANDBC_CheckFileDialogDisplay(string expectedDBCImportTitle, object dummy)
        {
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                var clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 點選 Import CAN DBC 按鈕
                clusterEditorWindow.PerformClick("/ById[Import CAN DBC]", ClickType.LeftClick);

                // 3. 驗證是否彈出選擇 DBC 檔案視窗
                var fileDialog = PP5IDEWindow.PerformGetElement("/Window[開啟]");
                fileDialog.ShouldNotBeNull("未彈出選擇 DBC 文件視窗");
            }
            finally
            {
                // 關閉所有開啟的視窗
                PP5IDEWindow.CloseWindow(1);        // Close 選擇 DBC 文件視窗
                PP5IDEWindow.CloseWindow(0);        // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-14
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor
        /// 2. 點選 Import CAN DBC 按鈕
        /// 3. 選擇任一DBC檔案
        /// 4. 驗證是否彈出選擇 DBC 文件內容視窗
        /// 測試描述：驗證是否彈出選擇的DBC文件內容視窗
        /// 預期輸出：正確顯示選擇 DBC 文件內容視窗
        /// </summary>
        [TestMethod("B13-14")]
        [TestCategory("CAN Cluster 編輯器")]
        //[DataRow("Cluster Import", typeof(object), DisplayName = "開啟DBC檔案文件內容視窗")]
        public void CANClusterEditor_ImportCANDBC_CheckDBCImportDisplay()
        {
            string dbcFileFolder = string.Format("{0}/DBCFile", PowerPro5Config.ReleaseFolder);
            string dbcExtensionName = "dbc";
            string dbcName = "";
            IElement clusterEditorWindow = null;
            IElement dbcImportWindow = null;
            //string fullPath;
            //fullPath = string.Format("{0}/{1}.{2}", dbcFileFolder, dbcName, dbcExtensionName);

            try
            {
                // 0. 檢查dbcFileFolder是否有DBC檔案，並取得第一個DBC檔案名稱
                string[] dbcFileNames = FileProcessingExtension.GetFilesWithExtensionName(dbcFileFolder, dbcExtensionName, out bool hasDBCFiles);
                if (hasDBCFiles)
                    dbcName = dbcFileNames[0];

                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 點選 Import CAN DBC 按鈕，並選擇 DBC 檔案，開啟 DBC 文件內容匯入視窗
                dbcImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, dbcName);
            }
            finally
            {
                // 關閉所有開啟的視窗
                //PP5IDEWindow.CloseWindow(0);        // Close 選擇 DBC 文件內容視窗
                //PP5IDEWindow.CloseWindow(0);        // Close CAN Cluster Editor
                dbcImportWindow.CloseWindow();      // Close CAN Cluster Import window
                clusterEditorWindow.CloseWindow();  // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-15_1
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 開啟 CAN Cluster Import 視窗
        /// 3. 取得當前 DBC 訊息表格的第一筆資料
        ///    - 取得 Message 欄位內容
        ///    - 取得 ID 欄位內容
        /// 4. 在搜尋欄位輸入要搜尋的文字(Message/ID)並按下 Enter
        /// 5. 驗證搜尋結果是否與輸入的搜尋文字相符
        /// 測試描述：在CAN Cluster Import畫面，於搜尋欄位上輸入要搜尋的字串按下Enter
        /// 預期輸出：在CAN Cluster Import畫面執行搜尋,要能搜尋到第一次出現的Message或ID名稱
        /// </summary>
        [TestMethod("B13-15_1")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        [DataRow("ByMessage", typeof(object), DisplayName = "Enter搜尋-Message")]
        [DataRow("ByID", typeof(object), DisplayName = "Enter搜尋-ID")]
        public void CANClusterImport_SearchByMessageOrIDByEnter_CheckSearchResultIsCorrect(string searchMethod, object dummy)
        {
            string dbcName = "Demo";
            IElement clusterEditorWindow = null;
            IElement dbcImportWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 開啟 CAN Cluster Import 視窗
                dbcImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, dbcName);

                // 3. 搜尋欄位輸入要搜尋的字串
                // 3-1. 先獲取DBC表格
                //dbcImportWindow.PerformGetElement("/ByName[Content]/ById[tabControl,dgMessage]");
                var dbcImportGrid = dbcImportWindow.PerformGetElement($"/ById[dgMessage]/ByName[{dbcName}]");

                // 3-2. 接著取得column: Message/ID 欄位 1st Row 的內容
                string message = dbcImportGrid.PerformGetElement("ByCell[1,2]").GetText();        // Message
                string id = dbcImportGrid.PerformGetElement("ByCell[1,3]").GetText();             // ID

                // 3-3. 最後搜尋欄位輸入要搜尋的字串(Message/ID)
                string searchValue = searchMethod == "ByMessage" ? message : id;
                dbcImportWindow.PerformInput("/ByClass[SearchBox]/ById[searchText]", InputType.SendContent, searchValue);
                Press(Keys.Enter);

                // 4. 驗證搜尋結果
                int columnNo = searchMethod == "ByMessage" ? 2 : 3;
                string searchResult = dbcImportWindow.PerformGetElement($"ByCell[{columnNo}]").GetText();      // Message/ID search result
                searchResult.ShouldNotBeNull($"搜尋結果為空,搜尋字串為: {searchValue}");
                searchResult.ShouldEqualTo(searchValue);
            }
            finally
            {
                // 關閉所有開啟的視窗
                dbcImportWindow.CloseWindow();      // Close CAN Cluster Import window
                clusterEditorWindow.CloseWindow();  // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-15_2
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 開啟 CAN Cluster Import 視窗
        /// 3. 取得當前 DBC 訊息表格的第一筆資料
        ///    - 取得 Message 欄位內容
        ///    - 取得 ID 欄位內容
        /// 4. 在搜尋欄位輸入要搜尋的文字(Message/ID)並點擊搜尋按鈕
        /// 5. 驗證搜尋結果是否與輸入的搜尋文字相符
        /// 測試描述：在 CAN Cluster Import畫面，於搜尋欄位上輸入要搜尋的字串並點擊搜尋按鈕
        /// 預期輸出：在 CAN Cluster Import畫面執行搜尋，要能搜尋到第一次出現的 Message 或 ID 名稱
        /// </summary>
        [TestMethod("B13-15_2")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("ByMessage", typeof(object), DisplayName = "按鈕搜尋-Message")]
        [DataRow("ByID", typeof(object), DisplayName = "按鈕搜尋-ID")]
        public void CANClusterImport_SearchByMessageOrIDByButton_CheckSearchResultIsCorrect(string searchMethod, object dummy)
        {
            string dbcName = "Demo";
            IElement clusterEditorWindow = null;
            IElement dbcImportWindow = null;

            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 開啟 CAN Cluster Import 視窗
                dbcImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, dbcName);

                // 3. 搜尋欄位輸入要搜尋的字串
                // 3-1. 先獲取DBC表格
                //dbcImportWindow.PerformGetElement("/ByName[Content]/ById[tabControl,dgMessage]");
                var dbcImportGrid = dbcImportWindow.PerformGetElement($"/ById[dgMessage]/ByName[{dbcName}]");

                // 3-2. 接著取得column: Message/ID 欄位 1st Row 的內容
                string message = dbcImportGrid.PerformGetElement("ByCell[1,2]").GetText();    // Message
                string id = dbcImportGrid.PerformGetElement("ByCell[1,3]").GetText();         // ID
                string searchValue = searchMethod == "ByMessage" ? message : id;

                // 3-3. 最後搜尋欄位輸入要搜尋的字串(Message/ID)
                dbcImportWindow.PerformInput("/ByClass[SearchBox]/ById[searchText]", InputType.SendContent, searchValue);

                // 5. 點擊搜尋按鈕
                dbcImportWindow.PerformClick("/ById[SearchBtn]", ClickType.LeftClick);

                // 6. 驗證搜尋結果
                int columnNo = searchMethod == "ByMessage" ? 2 : 3;
                string searchResult = dbcImportWindow.PerformGetElement($"ByCell[{columnNo}]").GetText();      // Message/ID search result
                searchResult.ShouldNotBeNull($"搜尋結果為空,搜尋字串為: {searchValue}");
                searchResult.ShouldEqualTo(searchValue);
            }
            finally
            {
                // 關閉所有開啟的視窗
                dbcImportWindow.CloseWindow();      // Close CAN Cluster Import window
                clusterEditorWindow.CloseWindow();  // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-16
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 開啟 CAN Cluster Import 視窗
        /// 3. 取得當前 DBC 訊息表格的第一筆資料
        ///    - 取得 Message 欄位內容
        ///    - 取得 ID 欄位內容
        /// 4. 在搜尋欄位輸入要搜尋的文字(Message/ID)
        /// 5. 重複按下 ▼ 或 F3 直到出現重新搜尋提示
        /// 6. 驗證提示訊息內容
        /// 測試描述：在 CAN Cluster Import 畫面，於搜尋欄位輸入要搜尋的字串後按下 ▼ 或 F3
        /// 預期輸出：搜尋到相關的 Message 或 ID，到最後會詢問是否重新搜尋
        /// </summary>
        [TestMethod("B13-16")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("ByMessage", "ByDownArrow", typeof(object), DisplayName = "▼按鈕搜尋Message至結尾")]
        [DataRow("ByID", "ByDownArrow", typeof(object), DisplayName = "▼按鈕搜尋ID至結尾")]
        [DataRow("ByMessage", "ByF3", typeof(object), DisplayName = "F3搜尋Message至結尾")]
        [DataRow("ByID", "ByF3", typeof(object), DisplayName = "F3搜尋ID至結尾")]
        public void CANClusterImport_SearchByNextUntilEnd_CheckPromptMessage(
            string searchMethod,
            string searchKeyMethod,
            object dummy)
        {
            string dbcName = "Demo";
            IElement clusterEditorWindow = null;
            IElement dbcImportWindow = null;

            try
            {
                // 1. 開啟 CAN Cluster Editor
                PP5IDEWindow.MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 開啟 CAN Cluster Import 視窗
                dbcImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, dbcName);

                // 3. 取得要搜尋的值
                var dbcImportGrid = dbcImportWindow.PerformGetElement($"/ById[dgMessage]/ByName[{dbcName}]");
                string message = dbcImportGrid.PerformGetElement("ByCell[1,2]").GetText();    // Message
                string id = dbcImportGrid.PerformGetElement("ByCell[1,3]").GetText();         // ID
                string searchValue = searchMethod == "ByMessage" ? message : id;

                // 4. 輸入搜尋文字
                dbcImportWindow.PerformInput("/ByClass[SearchBox]/ById[searchText]", InputType.SendContent, searchValue);

                // 5. 重複按下 ▼ 或 F3 直到出現重新搜尋提示
                bool promptFound = false;
                int maxAttempts = 100; // 設定最大搜尋次數避免無窮迴圈

                for (int i = 0; i < maxAttempts && !promptFound; i++)
                {
                    if (searchKeyMethod == "ByDownArrow")
                    {
                        dbcImportWindow.PerformClick("/ById[NextBtn]", ClickType.LeftClick);
                    }
                    else
                    {
                        Press(Keys.F3);
                    }

                    // 檢查是否出現重新搜尋提示
                    var msgBox = PP5IDEWindow.PerformGetElement("/Window[0]");
                    if (msgBox != null)
                    {
                        string actualPrompt = msgBox.PerformGetElement("/ById[txtBlockMsg]").GetText();
                        actualPrompt.ShouldContain("The search complete.Do you want to search again?");
                        promptFound = true;

                        // 關閉提示視窗
                        msgBox.PerformClick("/ByName[No]", ClickType.LeftClick);
                        break;
                    }
                }

                // 驗證是否找到提示訊息
                promptFound.ShouldBeTrue("未出現重新搜尋提示訊息");
            }
            finally
            {
                // 關閉所有開啟的視窗
                dbcImportWindow.CloseWindow();      // Close CAN Cluster Import window
                clusterEditorWindow.CloseWindow();  // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-17
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 開啟 CAN Cluster Import 視窗
        /// 3. 取得當前 DBC 訊息表格的第一筆資料
        ///    - 取得 Message 欄位內容
        ///    - 取得 ID 欄位內容
        /// 4. 在搜尋欄位輸入要搜尋的文字(Message/ID)
        /// 5. 重複按下 ▲ 或 Shift+F3 直到出現重新搜尋提示
        /// 6. 驗證提示訊息內容
        /// 測試描述：在 CAN Cluster Import 畫面，於搜尋欄位輸入要搜尋的字串後按下 ▲ 或 Shift+F3
        /// 預期輸出：搜尋到相關的 Message 或 ID，到最後會詢問是否重新搜尋
        /// </summary>
        [TestMethod("B13-17")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("ByMessage", "ByUpArrow", typeof(object), DisplayName = "▲按鈕搜尋Message至起點")]
        [DataRow("ByID", "ByUpArrow", typeof(object), DisplayName = "▲按鈕搜尋ID至起點")]
        [DataRow("ByMessage", "ByShiftF3", typeof(object), DisplayName = "Shift+F3搜尋Message至起點")]
        [DataRow("ByID", "ByShiftF3", typeof(object), DisplayName = "Shift+F3搜尋ID至起點")]
        public void CANClusterImport_SearchByPreviousUntilStart_CheckPromptMessage(
            string searchMethod,
            string searchKeyMethod,
            object dummy)
        {
            string dbcName = "Demo";
            IElement clusterEditorWindow = null;
            IElement dbcImportWindow = null;

            try
            {
                // 1. 開啟 CAN Cluster Editor
                PP5IDEWindow.MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 開啟 CAN Cluster Import 視窗
                dbcImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, dbcName);

                // 3. 取得要搜尋的值
                var dbcImportGrid = dbcImportWindow.PerformGetElement($"/ById[dgMessage]/ByName[{dbcName}]");
                string message = dbcImportGrid.PerformGetElement("ByCell[1,2]").GetText();    // Message
                string id = dbcImportGrid.PerformGetElement("ByCell[1,3]").GetText();         // ID
                string searchValue = searchMethod == "ByMessage" ? message : id;

                // 4. 輸入搜尋文字
                dbcImportWindow.PerformInput("/ByClass[SearchBox]/ById[searchText]", InputType.SendContent, searchValue);

                // 5. 重複按下 ▲ 或 Shift+F3 直到出現重新搜尋提示
                bool promptFound = false;
                int maxAttempts = 100; // 設定最大搜尋次數避免無窮迴圈

                for (int i = 0; i < maxAttempts && !promptFound; i++)
                {
                    if (searchKeyMethod == "ByUpArrow")
                    {
                        dbcImportWindow.PerformClick("/ById[PreviosBtn]", ClickType.LeftClick);
                    }
                    else
                    {
                        Press(Keys.Shift, Keys.F3);
                    }

                    // 檢查是否出現重新搜尋提示
                    var msgBox = PP5IDEWindow.PerformGetElement("/Window[0]");
                    if (msgBox != null)
                    {
                        string actualPrompt = msgBox.PerformGetElement("/ById[txtBlockMsg]").GetText();
                        actualPrompt.ShouldContain("The search complete.Do you want to search again?");
                        promptFound = true;

                        // 關閉提示視窗
                        msgBox.PerformClick("/ByName[No]", ClickType.LeftClick);
                        break;
                    }
                }

                // 驗證是否找到提示訊息
                promptFound.ShouldBeTrue("未出現重新搜尋提示訊息");
            }
            finally
            {
                // 關閉所有開啟的視窗
                dbcImportWindow.CloseWindow();      // Close CAN Cluster Import window
                clusterEditorWindow.CloseWindow();  // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-18_1
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor
        /// 2. 點選 Import CAN DBC 按鈕
        /// 3. 選擇 DBC 檔案
        /// 4. 選擇要匯入的 Message
        /// 5. 點選 OK 按鈕
        /// 6. 驗證匯入結果
        /// 測試描述：測試 CAN Cluster Editor 的 Import 功能
        /// 預期輸出：成功匯入選擇的 Message，並正確處理 Cluster 重複情況
        /// </summary>
        [TestMethod("B13-18_1")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow(new[] { "1" }, "Demo", typeof(object), DisplayName = "單一Message匯入")]
        [DataRow(new[] { "1", "2" }, "Demo", typeof(object), DisplayName = "多個Message匯入")]
        //[DataRow(new[] { "1" }, "ExistingCluster", false, typeof(object), DisplayName = "覆蓋既有Cluster")]
        public void CANClusterEditor_ImportDBC_CheckImportResult(
            string[] selectedMessageIndeces,
            string clusterName,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                IElement clusterTreeView;
                List<string> selectedMessages = new List<string>();

                // 1. 開啟 CAN Cluster Editor, 並創建一個空的 dbc 檔案
                CANClusterEditorCreateEmptyDBC();

                // 2. 點選 Import CAN DBC 按鈕，並選擇 DBC 檔案，開啟 DBC 文件內容匯入視窗
                var dbcImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, clusterName);

                // 2-1. 先獲取DBC表格
                var dbcImportGrid = dbcImportWindow.PerformGetElement($"/ById[dgMessage]/ByName[{clusterName}]");

                // 2-2. 接著取得column: Message/ID 欄位 1st Row 的內容
                foreach (var msgIndex in selectedMessageIndeces)
                {
                    dbcImportGrid.PerformGetElement($"ByCell[{msgIndex},1]").TickCheckBox();                      // 勾選 Message CheckBox 欄位
                    selectedMessages.Add(dbcImportGrid.PerformGetElement($"ByCell[{msgIndex},2]").GetText());     // Message 欄位
                }

                // 3. 驗證匯入結果
                clusterTreeView = clusterEditorWindow.PerformGetElement("/ById[tvCluster]");
                var clusterNode = clusterTreeView.PerformGetElement($"/TreeItem[{clusterName}]");
                clusterNode.ShouldNotBeNull($"找不到 Cluster: {clusterName}");

                // 驗證 Message 數量
                int expectedMessageCount = selectedMessages.Count;
                int actualMessageCount = clusterNode.GetChildElementsCount();
                actualMessageCount.ShouldEqualTo(expectedMessageCount, "匯入的 Message 數量不符");

                // 驗證每個選擇的 Message 都已匯入
                foreach (var message in selectedMessages)
                {
                    var messageNode = clusterNode.PerformGetElement($"/TreeItem[{message}]");
                    messageNode.ShouldNotBeNull($"找不到已匯入的 Message: {message}");
                }
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-18_2
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor
        /// 2. 匯入第一個 DBC 檔案
        /// 3. 再次匯入相同 Cluster 的 DBC 檔案 
        /// 4. 驗證 Cluster 是否被覆蓋
        /// 測試描述：測試 CAN Cluster Editor 匯入相同 Cluster 時的覆蓋功能
        /// 預期輸出：成功覆蓋既有的 Cluster
        /// </summary>
        [TestMethod("B13-18_2")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow(new[] { "1" }, new[] { "2" }, "Demo", typeof(object), DisplayName = "覆蓋既有Cluster-單一Message")]
        [DataRow(new[] { "1", "2" }, new[] { "3", "4" }, "Demo", typeof(object), DisplayName = "覆蓋既有Cluster-多個Message")]
        public void CANClusterEditor_ImportDBC_CheckOverwriteCluster(
            string[] firstImportIndices,
            string[] secondImportIndices,
            string clusterName,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                List<string> firstMessages = new List<string>();
                List<string> secondMessages = new List<string>();

                // 1. 開啟 CAN Cluster Editor, 並創建空的 dbc 檔案
                CANClusterEditorCreateEmptyDBC();

                // 2. 第一次匯入
                var firstImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, clusterName);
                var firstImportGrid = firstImportWindow.PerformGetElement($"/ById[dgMessage]/ByName[{clusterName}]");

                // 選擇並記錄第一次匯入的 Messages
                foreach (var index in firstImportIndices)
                {
                    firstImportGrid.PerformGetElement($"ByCell[{index},1]").TickCheckBox();
                    firstMessages.Add(firstImportGrid.PerformGetElement($"ByCell[{index},2]").GetText());
                }
                firstImportWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 驗證第一次匯入結果
                var clusterTreeView = clusterEditorWindow.PerformGetElement("/ById[tvCluster]");
                var initialClusterNode = clusterTreeView.PerformGetElement($"/TreeItem[{clusterName}]");
                initialClusterNode.ShouldNotBeNull("第一次匯入的 Cluster 未找到");

                // 3. 第二次匯入(覆蓋)
                var secondImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, clusterName);
                var secondImportGrid = secondImportWindow.PerformGetElement($"/ById[dgMessage]/ByName[{clusterName}]");

                // 選擇並記錄第二次匯入的 Messages
                foreach (var index in secondImportIndices)
                {
                    secondImportGrid.PerformGetElement($"ByCell[{index},1]").TickCheckBox();
                    secondMessages.Add(secondImportGrid.PerformGetElement($"ByCell[{index},2]").GetText());
                }
                secondImportWindow.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 4. 驗證覆蓋結果
                var finalClusterNode = clusterTreeView.PerformGetElement($"/TreeItem[{clusterName}]");
                finalClusterNode.ShouldNotBeNull("覆蓋後的 Cluster 未找到");

                // 驗證 Message 數量
                int expectedMessageCount = secondMessages.Count;
                int actualMessageCount = finalClusterNode.GetChildElementsCount();
                actualMessageCount.ShouldEqualTo(expectedMessageCount, "覆蓋後的 Message 數量不符");

                // 驗證新 Message 存在，舊 Message 不存在
                foreach (var message in secondMessages)
                {
                    var messageNode = finalClusterNode.PerformGetElement($"/TreeItem[{message}]");
                    messageNode.ShouldNotBeNull($"找不到新匯入的 Message: {message}");
                }

                foreach (var message in firstMessages)
                {
                    var messageNode = finalClusterNode.PerformGetElement($"/TreeItem[{message}]");
                    messageNode.ShouldBeNull($"舊的 Message 應該被覆蓋: {message}");
                }
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-19
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 匯入兩個 DBC 檔案建立測試資料
        /// 3. 點選 ComboBox 元件
        /// 4. 選擇不同的 Cluster
        /// 5. 驗證選擇的 Cluster 是否正確聚焦
        /// 測試描述：驗證 CAN Cluster Editor 中 ComboBox 的 Cluster 選擇功能
        /// 預期輸出：可從下拉式選單選擇 Cluster 並正確聚焦
        /// </summary>
        [TestMethod("B13-19")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Demo", "EP32", new[] { "1" }, typeof(object), DisplayName = "選擇Demo到EP32")]
        [DataRow("EP32", "Demo", new[] { "1" }, typeof(object), DisplayName = "選擇EP32到Demo")]
        public void CANClusterEditor_SelectClusterFromComboBox_CheckClusterFocus(
            string initialCluster,
            string targetCluster,
            string[] messageIndices,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor, 並創建空的 dbc 檔案
                CANClusterEditorCreateEmptyDBC();

                // 2. 匯入第一個 DBC 檔案 (Demo)
                var firstImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, "Demo");
                var firstImportGrid = firstImportWindow.PerformGetElement("/ById[dgMessage]/ByName[Demo]");
                foreach (var index in messageIndices)
                {
                    firstImportGrid.PerformGetElement($"ByCell[{index},1]").TickCheckBox();
                }
                firstImportWindow.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 3. 匯入第二個 DBC 檔案 (EP32)
                var secondImportWindow = OpenCANClusterImportWindow(clusterEditorWindow, "EP32");
                var secondImportGrid = secondImportWindow.PerformGetElement("/ById[dgMessage]/ByName[EP32]");
                foreach (var index in messageIndices)
                {
                    secondImportGrid.PerformGetElement($"ByCell[{index},1]").TickCheckBox();
                }
                secondImportWindow.PerformClick("/ByName[OK]", ClickType.LeftClick);

                // 4. 驗證 ComboBox 內容
                var clusterComboBox = clusterEditorWindow.PerformGetElement("/ById[ClusterComboBox]");
                clusterComboBox.ShouldNotBeNull("找不到 Cluster ComboBox");

                var comboBoxItems = clusterComboBox.GetComboBoxItemNames();
                comboBoxItems.ShouldContain(initialCluster, $"ComboBox 中找不到 {initialCluster}");
                comboBoxItems.ShouldContain(targetCluster, $"ComboBox 中找不到 {targetCluster}");

                // 5. 選擇初始 Cluster 並驗證
                clusterComboBox.SelectItem(initialCluster);
                clusterComboBox.GetText().ShouldEqualTo(initialCluster, "初始 Cluster 選擇錯誤");

                // 6. 選擇目標 Cluster 並驗證
                clusterComboBox.SelectItem(targetCluster);
                clusterComboBox.GetText().ShouldEqualTo(targetCluster, "目標 Cluster 選擇錯誤");

                // 7. 驗證 clusterTreeView 中的聚焦
                var clusterTreeView = clusterEditorWindow.PerformGetElement("/ById[tvCluster]");
                var focusedNode = clusterTreeView.PerformGetElement($"/TreeItem[{targetCluster}]");
                focusedNode.ShouldBeSelected("TreeView 中的聚焦節點不正確");

                // 8. 驗證右側資訊區顯示
                var infoPanel = clusterEditorWindow.PerformGetElement("/ById[dgMessage]");
                infoPanel.ShouldNotBeNull("找不到訊息資訊區");
                infoPanel.ShouldBeVisible("訊息資訊區應該可見");
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-20_1
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 取得當前 DBC 訊息表格的第一筆資料
        ///    - 取得 Message 欄位內容
        ///    - 取得 ID 欄位內容
        /// 3. 在搜尋欄位輸入要搜尋的文字(Message/ID)並按下 Enter
        /// 4. 驗證搜尋結果是否與輸入的搜尋文字相符
        /// 測試描述：在CAN Cluster Editor畫面，於搜尋欄位上輸入要搜尋的字串按下Enter
        /// 預期輸出：在CAN Cluster Editor畫面執行搜尋,要能搜尋到第一次出現的Message或ID名稱
        /// </summary>
        [TestMethod("B13-20_1")]
        [TestCategory("CAN Cluster 編輯器(B13)")]
        [DataRow("ByMessage", typeof(object), DisplayName = "Enter搜尋-Message")]
        [DataRow("ByID", typeof(object), DisplayName = "Enter搜尋-ID")]
        public void CANClusterEditor_SearchByMessageOrIDByEnter_CheckSearchResultIsCorrect(string searchMethod, object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 搜尋欄位輸入要搜尋的字串
                // 2-1. 先獲取DBC表格
                var dbcGrid = clusterEditorWindow.PerformGetElement("/ByName[Content]/ById[tabControl,dgMessage]");

                // 2-2. 接著取得column: Message/ID 欄位 1st Row 的內容
                string message = dbcGrid.PerformGetElement("ByCell[1,1]").GetText();        // Message
                string id = dbcGrid.PerformGetElement("ByCell[1,2]").GetText();             // ID

                // 2-3. 最後搜尋欄位輸入要搜尋的字串(Message/ID)
                string searchValue = searchMethod == "ByMessage" ? message : id;
                clusterEditorWindow.PerformInput("/ByName[CAN DBC List]/ByClass[SearchBox]/ById[searchText]", InputType.SendContent, searchValue);
                Press(Keys.Enter);

                // 3. 驗證搜尋結果
                string searchResult = clusterEditorWindow.GetSelectedTreeViewItem().GetText();      // Message/ID search result
                searchResult.ShouldNotBeNull($"搜尋結果為空,搜尋字串為: {searchValue}");
                searchResult.ShouldEqualTo(searchValue);
            }
            finally
            {
                // 關閉所有開啟的視窗
                clusterEditorWindow.CloseWindow();  // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-20_2
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 取得當前 DBC 訊息表格的第一筆資料
        ///    - 取得 Message 欄位內容
        ///    - 取得 ID 欄位內容
        /// 3. 在搜尋欄位輸入要搜尋的文字(Message/ID)並點擊搜尋按鈕
        /// 4. 驗證搜尋結果是否與輸入的搜尋文字相符
        /// 測試描述：在 CAN Cluster Editor 畫面，於搜尋欄位上輸入要搜尋的字串並點擊搜尋按鈕
        /// 預期輸出：在 CAN Cluster Editor 畫面執行搜尋，要能搜尋到第一次出現的 Message 或 ID 名稱
        /// </summary>
        [TestMethod("B13-20_2")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("ByMessage", typeof(object), DisplayName = "按鈕搜尋-Message")]
        [DataRow("ByID", typeof(object), DisplayName = "按鈕搜尋-ID")]
        public void CANClusterEditor_SearchByMessageOrIDByButton_CheckSearchResultIsCorrect(string searchMethod, object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得 DBC 表格
                var dbcGrid = clusterEditorWindow.PerformGetElement("/ByName[Content]/ById[tabControl,dgMessage]");
                dbcGrid.ShouldNotBeNull("DBC 表格未找到");

                // 3. 取得第一筆資料的 Message/ID
                string message = dbcGrid.PerformGetElement("ByCell[1,1]").GetText();    // Message
                string id = dbcGrid.PerformGetElement("ByCell[1,2]").GetText();         // ID
                string searchValue = searchMethod == "ByMessage" ? message : id;

                // 4. 在搜尋欄位輸入資料
                clusterEditorWindow.PerformInput("/ByName[CAN DBC List]/ByClass[SearchBox]/ById[searchText]", InputType.SendContent, searchValue);

                // 5. 點擊搜尋按鈕
                clusterEditorWindow.PerformClick("/ByName[CAN DBC List]/ById[SearchBtn]", ClickType.LeftClick);

                // 6. 驗證搜尋結果
                string searchResult = clusterEditorWindow.GetSelectedTreeViewItem().GetText();
                searchResult.ShouldNotBeNull($"搜尋結果為空,搜尋字串為: {searchValue}");
                searchResult.ShouldEqualTo(searchValue);
            }
            finally
            {
                // 關閉所有開啟的視窗
                clusterEditorWindow.CloseWindow();  // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-21
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 取得 Message 列表的第一筆資料
        /// 3. 在搜尋欄位輸入要搜尋的文字(Message/ID)
        /// 4. 重複按下 ▼ 或 F3 直到出現重新搜尋提示
        /// 5. 驗證提示訊息內容
        /// 測試描述：在 CAN Cluster Editor 畫面，於搜尋欄位上輸入要搜尋的字串後按下 ▼ 或 F3
        /// 預期輸出：搜尋到相關的 Message 或 ID，到最後會詢問是否重新搜尋
        /// </summary>
        [TestMethod("B13-21")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("ByMessage", "ByDownArrow", typeof(object), DisplayName = "▼按鈕搜尋Message")]
        [DataRow("ByID", "ByDownArrow", typeof(object), DisplayName = "▼按鈕搜尋ID")]
        [DataRow("ByMessage", "ByF3", typeof(object), DisplayName = "F3搜尋Message")]
        [DataRow("ByID", "ByF3", typeof(object), DisplayName = "F3搜尋ID")]
        public void CANClusterEditor_SearchNextUntilEnd_CheckPromptMessage(
            string searchMethod,
            string searchKeyMethod,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得要搜尋的值
                var dbcGrid = clusterEditorWindow.PerformGetElement("/ByName[Content]/ById[tabControl,dgMessage]");
                string message = dbcGrid.PerformGetElement("ByCell[1,1]").GetText();    // Message
                string id = dbcGrid.PerformGetElement("ByCell[1,2]").GetText();         // ID
                string searchValue = searchMethod == "ByMessage" ? message : id;

                // 3. 輸入搜尋文字
                clusterEditorWindow.PerformInput("/ByName[CAN DBC List]/ByClass[SearchBox]/ById[searchText]",
                    InputType.SendContent, searchValue);

                // 4. 重複按下 ▼ 或 F3 直到出現提示
                bool promptFound = false;
                int maxAttempts = 100;
                for (int i = 0; i < maxAttempts && !promptFound; i++)
                {
                    if (searchKeyMethod == "ByDownArrow")
                        clusterEditorWindow.PerformClick("/ById[NextBtn]", ClickType.LeftClick);
                    else
                        Press(Keys.F3);

                    var msgBox = PP5IDEWindow.PerformGetElement("/Window[0]");
                    if (msgBox != null)
                    {
                        string actualPrompt = msgBox.PerformGetElement("/ById[txtBlockMsg]").GetText();
                        actualPrompt.ShouldContain("The search complete.Do you want to search again?");
                        promptFound = true;
                        msgBox.PerformClick("/ByName[No]", ClickType.LeftClick);
                        break;
                    }
                }
                promptFound.ShouldBeTrue("未出現重新搜尋提示訊息");
            }
            finally
            {
                clusterEditorWindow.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-22
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 取得 Message 列表的第一筆資料
        /// 3. 在搜尋欄位輸入要搜尋的文字(Message/ID)
        /// 4. 重複按下 ▲ 或 Shift+F3 直到出現重新搜尋提示
        /// 5. 驗證提示訊息內容
        /// 測試描述：在 CAN Cluster Editor 畫面，於搜尋欄位上輸入要搜尋的字串後按下 ▲ 或 Shift+F3
        /// 預期輸出：搜尋到相關的 Message 或 ID，到最後會詢問是否重新搜尋
        /// </summary>
        [TestMethod("B13-22")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("ByMessage", "ByUpArrow", typeof(object), DisplayName = "▲按鈕搜尋Message")]
        [DataRow("ByID", "ByUpArrow", typeof(object), DisplayName = "▲按鈕搜尋ID")]
        [DataRow("ByMessage", "ByShiftF3", typeof(object), DisplayName = "Shift+F3搜尋Message")]
        [DataRow("ByID", "ByShiftF3", typeof(object), DisplayName = "Shift+F3搜尋ID")]
        public void CANClusterEditor_SearchPreviousUntilStart_CheckPromptMessage(
            string searchMethod,
            string searchKeyMethod,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得要搜尋的值
                var dbcGrid = clusterEditorWindow.PerformGetElement("/ByName[Content]/ById[tabControl,dgMessage]");
                string message = dbcGrid.PerformGetElement("ByCell[1,1]").GetText();    // Message
                string id = dbcGrid.PerformGetElement("ByCell[1,2]").GetText();         // ID
                string searchValue = searchMethod == "ByMessage" ? message : id;

                // 3. 輸入搜尋文字
                clusterEditorWindow.PerformInput("/ByName[CAN DBC List]/ByClass[SearchBox]/ById[searchText]",
                    InputType.SendContent, searchValue);

                // 4. 重複按下 ▲ 或 Shift+F3 直到出現提示
                bool promptFound = false;
                int maxAttempts = 100;
                for (int i = 0; i < maxAttempts && !promptFound; i++)
                {
                    if (searchKeyMethod == "ByUpArrow")
                        clusterEditorWindow.PerformClick("/ById[PreviosBtn]", ClickType.LeftClick);
                    else
                        Press(Keys.Shift, Keys.F3);

                    var msgBox = PP5IDEWindow.PerformGetElement("/Window[0]");
                    if (msgBox != null)
                    {
                        string actualPrompt = msgBox.PerformGetElement("/ById[txtBlockMsg]").GetText();
                        actualPrompt.ShouldContain("The search complete.Do you want to search again?");
                        promptFound = true;
                        msgBox.PerformClick("/ByName[No]", ClickType.LeftClick);
                        break;
                    }
                }
                promptFound.ShouldBeTrue("未出現重新搜尋提示訊息");
            }
            finally
            {
                clusterEditorWindow.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-23
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Cluster 節點上按下滑鼠右鍵
        /// 3. 驗證選單項目
        ///    - 檢查 Rename 選項是否存在且可用
        ///    - 檢查 Delete 選項是否存在且可用
        ///    - 檢查選單項目順序是否正確
        /// 測試描述：在 CAN Cluster Editor 畫面中，對 Cluster 節點按下右鍵時顯示的選單項目驗證
        /// 預期輸出：正確顯示 Rename 及 Delete 選單項目
        /// </summary>
        [TestMethod("B13-23")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Rename", "Delete", typeof(object), DisplayName = "檢查右鍵選單項目")]
        public void CANClusterEditor_ClusterNodeRightClick_CheckContextMenu(
            string renameMenuText,
            string deleteMenuText,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得 Cluster 節點
                var clusterNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                clusterNode.ShouldNotBeNull("找不到 Cluster 節點");

                // 3. 在節點上按下右鍵
                clusterNode.RightClick();

                // 4. 驗證選單項目
                var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                contextMenu.ShouldNotBeNull("未顯示右鍵選單");

                // 檢查 Rename 選項
                var renameItem = contextMenu.PerformGetElement($"/ByName[{renameMenuText}]");
                renameItem.ShouldNotBeNull("找不到 Rename 選項");
                renameItem.ShouldBeEnabled("Rename 選項應為可用狀態");

                // 檢查 Delete 選項
                var deleteItem = contextMenu.PerformGetElement($"/ByName[{deleteMenuText}]");
                deleteItem.ShouldNotBeNull("找不到 Delete 選項");
                deleteItem.ShouldBeEnabled("Delete 選項應為可用狀態");

                // 檢查選單項目順序
                string[] menuItemNames = contextMenu.GetMainMenuListItemNames().ToArray();
                menuItemNames[0].ShouldEqualTo(renameMenuText, "第一個選單項目應為 Rename");
                menuItemNames[1].ShouldEqualTo(deleteMenuText, "第二個選單項目應為 Delete");
            }
            finally
            {
                // 關閉測試視窗
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-24
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Cluster 節點上按下滑鼠右鍵
        /// 3. 選擇 Delete 選項
        /// 4. 驗證是否出現刪除確認對話框
        /// 5. 點選 Yes/No 按鈕
        /// 6. 驗證 Cluster 節點是否依選擇結果被刪除
        /// 測試描述：在 CAN Cluster Editor 中測試刪除 Cluster 節點的功能
        /// 預期輸出：按下 Yes 時刪除節點，按下 No 時保留節點
        /// </summary>
        [TestMethod("B13-24")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Delete", "Yes", true, typeof(object), DisplayName = "刪除Cluster-確認")]
        [DataRow("Delete", "No", false, typeof(object), DisplayName = "刪除Cluster-取消")]
        public void CANClusterEditor_DeleteCluster_CheckConfirmation(
            string deleteMenuText,
            string buttonChoice,
            bool shouldBeDeleted,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得 Cluster 節點並按下右鍵
                var clusterNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                clusterNode.ShouldNotBeNull("找不到 Cluster 節點");
                clusterNode.RightClick();

                // 3. 點選 Delete 選項
                var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                contextMenu.ShouldNotBeNull("未顯示右鍵選單");
                contextMenu.MenuSelect(deleteMenuText);
                //var deleteItem = contextMenu.PerformGetElement($"/ByName[{deleteMenuText}]");
                //deleteItem.LeftClick();

                // 4. 驗證刪除確認對話框
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var confirmDialog = CurrentDriver.PerformGetElement("/ById[MessageBoxExDialog]");
                confirmDialog.ShouldNotBeNull("未顯示刪除確認對話框");
                confirmDialog.PerformGetElement("ById[txtBlockMsg]").GetText().ShouldContain($"Do you want to delete \'{clusterNode.GetText()}\'?");

                // 5. 點選指定按鈕
                confirmDialog.PerformClick($"/ByName[{buttonChoice}]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

                // 6. 驗證刪除結果
                if (shouldBeDeleted)
                    // 若選擇 Yes，應該找不到節點
                    clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]")
                                       .ShouldBeNull("Cluster 節點未被刪除");
                else
                    // 若選擇 No，節點應該還在
                    clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]")
                                       .ShouldNotBeNull("Cluster 節點不應被刪除");
            }
            finally
            {
                // 關閉測試視窗
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-25
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Cluster 節點上按下滑鼠右鍵
        /// 3. 選擇 Rename 選項
        /// 4. 驗證 Rename 對話框是否出現
        /// 測試描述：在 CAN Cluster Editor 中測試 Cluster 節點的重新命名功能
        /// 預期輸出：顯示 Rename 對話框
        /// </summary>
        [TestMethod("B13-25")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Rename", "Rename", typeof(object), DisplayName = "重新命名Cluster")]
        public void CANClusterEditor_RenameCluster_CheckRenameDialog(
            string renameMenuText,
            string expectedDialogTitle,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得 Cluster 節點並按下右鍵
                var clusterNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                clusterNode.ShouldNotBeNull("找不到 Cluster 節點");
                clusterNode.RightClick();

                // 3. 點選 Rename 選項
                var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                contextMenu.ShouldNotBeNull("未顯示右鍵選單");
                contextMenu.MenuSelect(renameMenuText);
                //var renameItem = contextMenu.PerformGetElement($"/ByName[{renameMenuText}]");
                //renameItem.LeftClick();

                // 4. 驗證 Rename 對話框
                var renameDialog = clusterEditorWindow.PerformGetElement("ByName[Rename]");
                renameDialog.ShouldNotBeNull("未顯示 Rename 對話框");

                // 驗證對話框標題
                renameDialog.GetText().ShouldEqualTo(expectedDialogTitle);

                // 驗證對話框內容
                var textBox = renameDialog.PerformGetElement("/ByClass[TextBox]");
                textBox.ShouldNotBeNull("找不到重命名輸入框");
                textBox.GetText().ShouldEqualTo(clusterNode.GetText());
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-26
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Cluster 節點上按下滑鼠右鍵
        /// 3. 選擇 Rename 選項
        /// 4. 在 Rename 視窗輸入已存在的 Cluster 名稱
        /// 5. 驗證:
        ///    - OK 按鈕應為禁用狀態
        ///    - 輸入框應顯示紅色邊框
        ///    - 應顯示錯誤提示訊息
        /// 測試描述：在 Rename 視窗中輸入重複的 Cluster 名稱時的驗證
        /// 預期輸出：無法按下 OK 按鈕，且輸入欄位會顯示紅框與錯誤提示
        /// </summary>
        [TestMethod("B13-26")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Rename", "Name is repeat", typeof(object), DisplayName = "輸入重複名稱")]
        public void CANClusterEditor_RenameCluster_CheckDuplicateNameValidation(
            string renameMenuText,
            string expectedErrorMsg,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得 Cluster 節點並按下右鍵
                var clusterNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                clusterNode.ShouldNotBeNull("找不到 Cluster 節點");
                clusterNode.RightClick();

                // 3. 點選 Rename 選項
                clusterEditorWindow.MenuSelect(renameMenuText);
                //var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                //var renameItem = contextMenu.PerformGetElement($"/ByName[{renameMenuText}]");
                //renameItem.LeftClick();

                // 4. 輸入重複名稱
                string duplicateName = clusterNode.GetText();
                var renameDialog = clusterEditorWindow.PerformGetElement("ByName[Rename]");
                var textBox = renameDialog.PerformInput("/ByClass[TextBox]", InputType.SendContent, duplicateName);

                // 5. 驗證
                // 檢查 OK 按鈕狀態
                renameDialog.PerformGetElement("/ByName[Ok]").ShouldBeDisabled();

                // 檢查錯誤提示訊息
                string tooltipMsg = textBox.GetToolTipMessage();
                tooltipMsg.ShouldContain(expectedErrorMsg);

                //// 檢查紅框顯示
                //textBox.GetAttribute("BorderBrush").ShouldContain("#FFFF0000");
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-27
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Cluster 節點上按下滑鼠右鍵
        /// 3. 選擇 Rename 選項
        /// 4. 在 Rename 視窗輸入新的 Cluster 名稱
        /// 5. 點選 OK 按鈕
        /// 6. 驗證 Cluster 是否已重新命名
        /// 測試描述：在 Rename 視窗中輸入新的 Cluster 名稱並確認重命名結果
        /// 預期輸出：可按下 OK 按鈕，Cluster 列表顯示新名稱
        /// </summary>
        [TestMethod("B13-27")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Rename", typeof(object), DisplayName = "重命名成功")]
        public void CANClusterEditor_RenameCluster_CheckSuccessfulRename(string renameMenuText, object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得 Cluster 節點並按下右鍵
                var clusterNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                clusterNode.ShouldNotBeNull("找不到 Cluster 節點");
                clusterNode.RightClick();

                // 3. 點選 Rename 選項
                clusterEditorWindow.MenuSelect(renameMenuText);
                //var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                //var renameItem = contextMenu.PerformGetElement($"/ByName[{renameMenuText}]");
                //renameItem.LeftClick();

                // 4. 輸入新名稱
                string newName = clusterNode.GetText() + "1";
                var renameDialog = clusterEditorWindow.PerformGetElement("ByName[Rename]");
                var textBox = renameDialog.PerformInput("/ByClass[TextBox]", InputType.SendContent, newName);

                // 5. 點選 OK 按鈕
                var okButton = renameDialog.PerformGetElement("/ByName[Ok]");
                okButton.ShouldBeEnabled();
                okButton.LeftClick();

                // 6. 驗證重命名結果
                var renamedNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                renamedNode.GetText().ShouldEqualTo(newName);
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-28
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Message 節點上按下滑鼠右鍵
        /// 3. 驗證選單項目是否包含 Delete Message
        /// 測試描述：在 CAN Cluster Editor 中對 Message 節點按下右鍵時的選單驗證
        /// 預期輸出：顯示 Delete Message 選單項目
        /// </summary>
        [TestMethod("B13-28")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Delete Message", typeof(object), DisplayName = "檢查Message右鍵選單")]
        public void CANClusterEditor_MessageNodeRightClick_CheckContextMenu(
            string deleteMenuText,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 找到 Message 節點
                var messageNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]/TreeItem[0]");
                messageNode.ShouldNotBeNull("找不到 Message 節點");

                // 3. 在節點上按下右鍵
                messageNode.RightClick();

                // 4. 驗證選單項目
                var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                contextMenu.ShouldNotBeNull("未顯示右鍵選單");

                var deleteItem = contextMenu.PerformGetElement($"/ByName[{deleteMenuText}]");
                deleteItem.ShouldNotBeNull("找不到 Delete Message 選項");
                deleteItem.ShouldBeEnabled("Delete Message 選項應為可用狀態");
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-29
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Message 節點上按下滑鼠右鍵
        /// 3. 選擇 Delete Message 選項
        /// 4. 驗證是否出現刪除確認對話框
        /// 5. 點選 Yes/No 按鈕
        /// 6. 驗證 Message 節點是否依選擇結果被刪除
        /// 測試描述：在 CAN Cluster Editor 中測試刪除 Message 節點的功能
        /// 預期輸出：按下 Yes 時刪除節點，按下 No 時保留節點
        /// </summary>
        [TestMethod("B13-29")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Delete Message", "Yes", true, typeof(object), DisplayName = "刪除Message-確認")]
        [DataRow("Delete Message", "No", false, typeof(object), DisplayName = "刪除Message-取消")]
        public void CANClusterEditor_DeleteMessage_CheckConfirmation(
            string deleteMenuText,
            string buttonChoice,
            bool shouldBeDeleted,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 找到 Message 節點並按下右鍵
                var messageNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]/TreeItem[0]");
                messageNode.ShouldNotBeNull("找不到 Message 節點");
                string messageText = messageNode.GetText();
                messageNode.RightClick();

                // 3. 點選 Delete Message 選項
                clusterEditorWindow.MenuSelect(deleteMenuText);
                //var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                //contextMenu.MenuSelect(deleteMenuText);
                //var deleteItem = contextMenu.PerformGetElement($"/ByName[{deleteMenuText}]");
                //deleteItem.LeftClick();

                // 4. 驗證刪除確認對話框
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var confirmDialog = CurrentDriver.PerformGetElement("/ById[MessageBoxExDialog]");
                confirmDialog.ShouldNotBeNull("未顯示刪除確認對話框");
                confirmDialog.PerformGetElement("ById[txtBlockMsg]").GetText()
                    .ShouldContain($"Do you want to delete \'{messageText}\'?");

                // 5. 點選指定按鈕
                confirmDialog.PerformClick($"/ByName[{buttonChoice}]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

                // 6. 驗證刪除結果
                var expectedNodeDeletedPath = "/ById[tvCluster]/TreeItem[0]/TreeItem[0]";
                if (shouldBeDeleted)
                    // 若選擇 Yes，應該找不到節點
                    clusterEditorWindow.PerformGetElement(expectedNodeDeletedPath)
                                       .ShouldBeNull("Message 節點未被刪除");
                else
                {
                    // 若選擇 No，節點應該還在
                    clusterEditorWindow.PerformGetElement(expectedNodeDeletedPath)
                                       .ShouldNotBeNull("Message 節點不應被刪除");
                    clusterEditorWindow.PerformGetElement(expectedNodeDeletedPath).GetText()
                                       .ShouldEqualTo(messageText);
                }
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-30
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Signal 節點上按下滑鼠右鍵
        /// 3. 驗證選單項目是否包含 Delete Signal
        /// 測試描述：在 CAN Cluster Editor 中對 Signal 節點按下右鍵時的選單驗證
        /// 預期輸出：顯示 Delete Signal 選單項目
        /// </summary>
        [TestMethod("B13-30")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Delete Signal", typeof(object), DisplayName = "檢查Signal右鍵選單")]
        public void CANClusterEditor_SignalNodeRightClick_CheckContextMenu(
            string deleteMenuText,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 找到 Signal 節點
                var signalNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]/TreeItem[0]/TreeItem[0]");
                signalNode.ShouldNotBeNull("找不到 Signal 節點");

                // 3. 在節點上按下右鍵
                signalNode.RightClick();

                // 4. 驗證選單項目
                var contextMenu = clusterEditorWindow.PerformGetElement("/ByClass[ContextMenu]");
                contextMenu.ShouldNotBeNull("未顯示右鍵選單");

                var deleteItem = contextMenu.PerformGetElement($"/ByName[{deleteMenuText}]");
                deleteItem.ShouldNotBeNull("找不到 Delete Signal 選項");
                deleteItem.ShouldBeEnabled("Delete Signal 選項應為可用狀態");
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-31
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 在 Signal 節點上按下滑鼠右鍵
        /// 3. 選擇 Delete 選項
        /// 4. 驗證是否出現刪除確認對話框
        /// 5. 點選 Yes/No 按鈕
        /// 6. 驗證 Signal 節點是否依選擇結果被刪除
        /// 測試描述：在 CAN Cluster Editor 中測試刪除 Signal 節點的功能
        /// 預期輸出：按下 Yes 時刪除節點，按下 No 時保留節點
        /// </summary>
        [TestMethod("B13-31")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Delete Signal", "Yes", true, typeof(object), DisplayName = "刪除Signal-確認")]
        [DataRow("Delete Signal", "No", false, typeof(object), DisplayName = "刪除Signal-取消")]
        public void CANClusterEditor_DeleteSignal_CheckConfirmation(
            string deleteMenuText,
            string buttonChoice,
            bool shouldBeDeleted,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 找到 Signal 節點並按下右鍵
                var signalNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]/TreeItem[0]/TreeItem[0]");
                signalNode.ShouldNotBeNull("找不到 Signal 節點");
                string signalText = signalNode.GetText();
                signalNode.RightClick();

                // 3. 點選 Delete Signal 選項
                clusterEditorWindow.MenuSelect(deleteMenuText);

                // 4. 驗證刪除確認對話框
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var confirmDialog = CurrentDriver.PerformGetElement("/ById[MessageBoxExDialog]");
                confirmDialog.ShouldNotBeNull("未顯示刪除確認對話框");
                confirmDialog.PerformGetElement("ById[txtBlockMsg]").GetText()
                    .ShouldContain($"Do you want to delete \'{signalText}\'?");

                // 5. 點選指定按鈕
                confirmDialog.PerformClick($"/ByName[{buttonChoice}]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

                // 6. 驗證刪除結果
                var expectedNodeDeletedPath = "/ById[tvCluster]/TreeItem[0]/TreeItem[0]/TreeItem[0]";
                if (shouldBeDeleted)
                {
                    // 若選擇 Yes，應該找不到節點
                    clusterEditorWindow.PerformGetElement(expectedNodeDeletedPath)
                                       .ShouldBeNull("Signal 節點未被刪除");
                }
                else
                {
                    // 若選擇 No，節點應該還在
                    var node = clusterEditorWindow.PerformGetElement(expectedNodeDeletedPath);
                    node.ShouldNotBeNull("Signal 節點不應被刪除");
                    node.GetText().ShouldEqualTo(signalText);
                }
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-32
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 選擇 Cluster 節點
        /// 3. 點選 Select Specified 按鈕
        /// 4. 驗證 Select Specified 視窗是否出現
        /// 測試描述：在 CAN Cluster Editor 中點選 Select Specified 按鈕後的視窗顯示驗證
        /// 預期輸出：正確顯示 Select Specified 視窗
        /// </summary>
        [TestMethod("B13-32")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("Select Specified Index", typeof(object), DisplayName = "開啟Select Specified視窗")]
        public void CANClusterEditor_SelectSpecified_CheckDialogDisplay(
            string expectedDialogTitle,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            IElement selectDialog = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 選擇 Cluster 節點
                var clusterNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                clusterNode.ShouldNotBeNull("找不到 Cluster 節點");
                clusterNode.LeftClick();

                // 3. 點選 Select Specified 按鈕
                clusterEditorWindow.PerformClick("/ByName[Select Specified]", ClickType.LeftClick);

                // 4. 驗證 Select Specified 視窗
                selectDialog = clusterEditorWindow.PerformGetElement("/Window[0]");
                selectDialog.ShouldNotBeNull("未顯示 Select Specified 視窗");
                selectDialog.GetText().ShouldEqualTo(expectedDialogTitle, "視窗標題不符");
            }
            finally
            {
                // 關閉所有開啟的視窗
                selectDialog?.CloseWindow();            // Close Select Specified 視窗
                clusterEditorWindow?.CloseWindow();     // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-33
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 選擇 Cluster 節點
        /// 3. 點選 Select Specified 按鈕
        /// 4. 在 Select Specified 視窗選擇 Index 並勾選 Active
        /// 5. 點選 OK 按鈕
        /// 6. 驗證 Specified Text 欄位的內容格式
        /// 測試描述：在 Select Specified 視窗中選擇並啟用 Index 後的文字顯示驗證
        /// 預期輸出：Specified Text 欄位顯示已啟用的 Index，並以逗號分隔
        /// </summary>
        [TestMethod("B13-33")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow(new[] { "1" }, "1", typeof(object), DisplayName = "單一Index")]
        [DataRow(new[] { "1", "2" }, "1,2", typeof(object), DisplayName = "多個Index")]
        [DataRow(new[] { "1", "3", "6" }, "1,3,6", typeof(object), DisplayName = "間隔Index")]
        public void CANClusterEditor_SelectSpecified_CheckSpecifiedText(
            string[] selectedIndexes,
            string expectedText,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            IElement selectDialog = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 選擇 Cluster 節點
                var clusterNode = clusterEditorWindow.PerformGetElement("/ById[tvCluster]/TreeItem[0]");
                clusterNode.ShouldNotBeNull("找不到 Cluster 節點");
                clusterNode.LeftClick();

                // 3. 點選 Select Specified 按鈕
                clusterEditorWindow.PerformClick("/ByName[Select Specified]", ClickType.LeftClick);

                // 4. 在 Select Specified 視窗進行設定
                selectDialog = clusterEditorWindow.PerformGetElement("/Window[0]");
                selectDialog.ShouldNotBeNull("未顯示 Select Specified 視窗");

                // 選擇指定的 Index 並勾選 Active
                var selectIndexDg = selectDialog.PerformGetElement("/ById[DataGrid]");
                for (int index = 1; index <= selectIndexDg.GetRowCount(); index++)
                {
                    // 當為指定的 Index時勾選 Active，反之則否
                    if (Array.IndexOf(selectedIndexes, index.ToString()) >= 0)
                        selectIndexDg.PerformGetElement($"/ByCell[{index},1]/CheckBox[0]").TickCheckBox();
                    else
                        selectIndexDg.PerformGetElement($"/ByCell[{index},1]/CheckBox[0]").UnTickCheckBox();
                }

                // 5. 點選 OK 按鈕
                selectDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 6. 驗證 Specified Text 欄位內容
                var specifiedText = clusterEditorWindow.PerformGetElement("/ByName[CAN DBC List]/ByClass[TextBox]").GetText();
                specifiedText.ShouldEqualTo(expectedText, "Specified Text 格式不符預期");
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();     // Close CAN Cluster Editor
            }
        }

        /// <summary>
        /// 測試用例編號：B13-34
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 調整視窗大小
        /// 3. 驗證控件可正常操作
        /// 測試描述：驗證 CAN Cluster Editor 視窗縮放功能
        /// 預期輸出：視窗可正常縮放且控件可正常使用
        /// </summary>
        [TestMethod("B13-34")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow(800, 600, true, typeof(object), DisplayName = "縮小視窗")]
        [DataRow(1600, 900, true, typeof(object), DisplayName = "放大視窗")]
        public void CANClusterEditor_ResizeWindow_CheckControlsAccessibility(
            int newWidth,
            int newHeight,
            bool shouldBeAccessible,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 調整視窗大小
                clusterEditorWindow.SetWindowSize(newWidth, newHeight);

                // 3. 驗證主要控件可用性
                var importButton = clusterEditorWindow.PerformGetElement("/ByName[Import CAN DBC]");
                importButton.ShouldNotBeNull("找不到 Import 按鈕");
                importButton.ShouldBeEnabled("Import 按鈕應可使用");

                var selectButton = clusterEditorWindow.PerformGetElement("/ByName[Select Specified]");
                selectButton.ShouldNotBeNull("找不到 Select Specified 按鈕");
                selectButton.ShouldBeEnabled("Select Specified 按鈕應可使用");

                var treeView = clusterEditorWindow.PerformGetElement("/ById[tvCluster]");
                treeView.ShouldNotBeNull("找不到 Cluster TreeView");
                treeView.ShouldBeVisible("TreeView 應可見");
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-35
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 取得左右區塊初始寬度
        /// 3. 拖曳分隔線
        /// 4. 驗證左右區塊寬度變化
        /// 測試描述：驗證 CAN Cluster Editor 視窗中分隔線拖曳功能
        /// 預期輸出：可正常調整左右區塊比例
        /// </summary>
        [TestMethod("B13-35")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow(-100, typeof(object), DisplayName = "分隔線向左拖曳")]
        [DataRow(100, typeof(object), DisplayName = "分隔線向右拖曳")]
        public void CANClusterEditor_DragSplitter_CheckPanelsResize(
            int dragOffset,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 開啟 CAN Cluster Editor
                MenuSelect("Utility", "CAN Cluster Editor...");
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 2. 取得左右區塊初始寬度
                var leftPanel = clusterEditorWindow.PerformGetElement("ByName[CAN DBC List]/[0]");
                var rightPanel = clusterEditorWindow.PerformGetElement("/ByName[Content]/[1]");
                double initialLeftWidth = leftPanel.Width;
                double initialRightWidth = rightPanel.Width;

                // 3. 拖曳分隔線
                var splitter = clusterEditorWindow.PerformGetElement("/ById[gridSplitter]");
                splitter.DragSplitter(System.Windows.Forms.Orientation.Horizontal, dragOffset);

                // 4. 驗證寬度變化
                double newLeftWidth = leftPanel.Width;
                double newRightWidth = rightPanel.Width;

                // 驗證寬度變化是否符合拖曳方向
                if (dragOffset < 0)
                {
                    //newLeftWidth.ShouldLessThan(initialLeftWidth);
                    //newRightWidth.ShouldGreaterThan(initialRightWidth);
                    Assert.IsTrue(newLeftWidth < initialLeftWidth && newRightWidth > initialRightWidth);
                }
                else
                {
                    //newLeftWidth.ShouldGreaterThan(initialLeftWidth);
                    //newRightWidth.ShouldLessThan(initialRightWidth);
                    Assert.IsTrue(newLeftWidth > initialLeftWidth && newRightWidth < initialRightWidth);
                }
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B13-36
        /// 測試步驟：
        /// 1. 開啟 CAN Cluster Editor 視窗
        /// 2. 變更語系設定
        /// 3. 驗證視窗標題和按鈕文字是否正確變更
        /// 測試描述：在 CAN Cluster Editor 中切換不同語系並驗證介面文字
        /// 預期輸出：介面文字隨語系正確變更，部分元件維持英文顯示
        /// </summary>
        [TestMethod("B13-36")]
        [TestCategory("CAN Cluster 編輯器")]
        [DataRow("language => English", "Utility => CAN Cluster Editor...", "CAN Cluster Editor", "Import CAN DBC", "Select Specified", typeof(object), DisplayName = "切換英文")]
        [DataRow("language => 简体中文", "工具 => CAN Cluster编辑器...", "CAN Cluster编辑器", "匯入CAN DBC", "选择编号", typeof(object), DisplayName = "切換簡中")]
        [DataRow("language => 繁體中文", "工具 => CAN Cluster編輯器...", "CAN Cluster編輯器", "匯入CAN DBC", "選擇编號", typeof(object), DisplayName = "切換繁中")]
        public void CANClusterEditor_ChangeLanguage_CheckUITexts(
            string languagePath,
            string CANClusterPath,
            string expectedWindowTitle,
            string expectedImportButtonText,
            string expectedSelectButtonText,
            object dummy)
        {
            IElement clusterEditorWindow = null;
            try
            {
                // 1. 切換語系
                MenuSelect(languagePath);

                // 2. 開啟 CAN Cluster Editor
                MenuSelect(CANClusterPath);
                clusterEditorWindow = PP5IDEWindow.PerformGetElement("/Window[0]");
                clusterEditorWindow.ShouldNotBeNull("CAN Cluster Editor 視窗未開啟");

                // 3. 驗證視窗標題
                clusterEditorWindow.GetText().ShouldContain(expectedWindowTitle);

                // 4. 驗證按鈕文字
                var importButton = clusterEditorWindow.PerformGetElement("/ByName[Import CAN DBC]");
                importButton.ShouldNotBeNull("找不到 Import 按鈕");
                importButton.GetText().ShouldEqualTo(expectedImportButtonText);

                var selectButton = clusterEditorWindow.PerformGetElement("/ByName[Select Specified]");
                selectButton.ShouldNotBeNull("找不到 Select Specified 按鈕");
                selectButton.GetText().ShouldEqualTo(expectedSelectButtonText);

                // 5. 驗證固定保持英文的元件
                // 這裡列出那些需要維持英文的控制項並進行驗證
                var contentDg = clusterEditorWindow.PerformGetElement("/ById[dgMessage]");
                var messageColumn = contentDg.PerformGetElement("/ByClass[DataGridColumnHeader]");
                messageColumn.ShouldNotBeNull("找不到 Message 欄位");
                messageColumn.GetText().ShouldEqualTo("Comment", "Message 欄位應維持英文");

                var idColumn = contentDg.PerformGetElement("/ByClass[DataGridColumnHeader]");
                idColumn.ShouldNotBeNull("找不到 ID 欄位");
                idColumn.GetText().ShouldEqualTo("Comment", "ID 欄位應維持英文");
            }
            finally
            {
                clusterEditorWindow?.CloseWindow();

                // 恢復預設語系 (English)
                if (languagePath != "language => English")
                    MenuSelect(languagePath);
            }
        }

        /// <summary>
        /// 測試用例編號：B14-1
        /// 測試步驟：
        /// 1. 開啟 Management 設定 Auto save interval
        /// 2. 開啟測試用 TI 檔案
        /// 3. 等待並檢查檔案修改時間
        /// 測試描述：驗證 Auto save interval 設定為 1 分鐘時的自動儲存功能
        /// 預期輸出：1 分鐘後檔案修改時間會更新
        /// </summary>
        [TestMethod("B14-1")]
        [TestCategory("AutoSave功能")]
        [DataRow(60, "UUTTest.ti", typeof(object), DisplayName = "Auto Save-1分鐘")]
        public void TIEditor_AutoSaveInterval_CheckFileModificationTime(
            int intervalSeconds,
            string testFileName,
            object dummy)
        {
            try
            {
                // 1. 啟用 Auto Save 並設定間隔
                SetAutoSaveInterval(intervalSeconds);

                // 2. 開啟測試檔案並記錄初始時間
                string tiFilePath = Path.Combine(
                    PowerPro5Config.ReleaseFolder,
                    "TestItem",
                    "UserDefined",
                    "TI",
                    "UUTTest",
                    testFileName + ".tix");

                DateTime initialModTime = File.GetLastWriteTime(tiFilePath);

                // 3. 開啟檔案
                PP5IDEWindow.MenuSelect("File", "Open...");

                // 4. 等待自動儲存
                Thread.Sleep((intervalSeconds + 5) * 1000); // 多等5秒確保觸發

                // 5. 驗證檔案修改時間
                DateTime newModTime = File.GetLastWriteTime(tiFilePath);
                TimeSpan timeDiff = newModTime - initialModTime;

                // 允許±5秒的誤差
                bool isTimeInRange = timeDiff.TotalSeconds >= intervalSeconds - 5
                                && timeDiff.TotalSeconds <= intervalSeconds + 5;

                isTimeInRange.ShouldBeTrue($"檔案修改時間差異應約為{intervalSeconds}秒，實際為{timeDiff.TotalSeconds}秒");
            }
            finally
            {
                // 6. 還原設定並關閉檔案
                SetAutoSaveInterval(0);  // 關閉 Auto Save
                PP5IDEWindow.CloseWindow(0);
            }
        }

        /// <summary>
        /// 測試用例編號：B14-2
        /// 測試步驟：
        /// 1. 建立新的TI檔案並儲存
        /// 2. 強制結束PP5 IDE進程
        /// 3. 重啟程式並驗證恢復功能
        /// 測試描述：驗證異常關閉後的檔案恢復功能
        /// 預期輸出：重啟後顯示恢復提示並能正確恢復檔案
        /// </summary>
        [TestMethod("B14-2")]
        [TestCategory("AutoSave功能")]
        [DataRow("B14_2_Test", "Do you want to restore file?", typeof(object),
            DisplayName = "異常關閉-檔案恢復")]
        public void TIEditor_AbnormalClose_CheckFileRecovery(
            string testFileName,
            string expectedPromptMessage,
            object dummy)
        {
            string savePath = Path.Combine(
                    PowerPro5Config.ReleaseFolder,
                    "TestItem",
                    "UserDefined",
                    "TI",
                    "UUTTest",
                    testFileName + ".tix");
            try
            {
                // 1. 啟用 Auto Save
                SetAutoSaveInterval(60);

                // 2. 建立並儲存新檔案
                SaveAsNewTI(testFileName);

                // 等待自動存檔
                Thread.Sleep(65000); // 等待65秒確保有自動存檔

                // 3. 記錄當前進程ID並強制結束
                int currentPID = Process.GetCurrentProcess().Id;
                Process.GetProcessById(currentPID).Kill();

                // 4. 重新啟動PP5 IDE
                Process.Start("Chroma.PP5IDE.exe");
                Thread.Sleep(5000);

                // 5. 驗證恢復提示視窗
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var recoveryDialog = CurrentDriver.PerformGetElement("/Window[Recovery]");
                recoveryDialog.ShouldNotBeNull("未顯示檔案恢復提示視窗");

                var promptMessage = recoveryDialog.PerformGetElement("/ById[txtBlockMsg]").GetText();
                promptMessage.ShouldContain(expectedPromptMessage);

                // 6. 點擊Yes按鈕恢復檔案
                recoveryDialog.PerformClick("/ByName[Yes]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

                // 7. 驗證檔案恢復
                //var tiEditor = PP5IDEWindow.PerformGetElement("/Window[0]");
                PP5IDEWindow.ShouldNotBeNull("TI Editor未正確開啟");
                string TINameActual = GetTIName();
                testFileName.ShouldEqualTo(TINameActual);
            }
            finally
            {
                // 8. 清理環境
                SetAutoSaveInterval(0);
                if (File.Exists(savePath))
                {
                    File.Delete(savePath);
                }
            }
        }

        /// <summary>
        /// 測試用例編號：B14-3
        /// 測試步驟：
        /// 1. 建立並啟用Active的TI檔案
        /// 2. 等待Backup檔案產生
        /// 3. 強制結束PP5 IDE進程
        /// 4. 重啟並驗證恢復功能及Active狀態
        /// 測試描述：驗證Active的TI檔案在異常關閉後通過Backup恢復並保持Active狀態
        /// 預期輸出：檔案恢復後仍保持Active狀態
        /// </summary>
        [TestMethod("B14-3")]
        [TestCategory("AutoSave功能")]
        [DataRow("B14_3_Test.ti", "Do you want to restore file?", typeof(object),
            DisplayName = "Active檔案異常關閉-恢復與狀態驗證")]
        public void TIEditor_ActiveFileBackupRestore_CheckActiveStatus(
            string testFileName,
            string expectedPromptMessage,
            object dummy)
        {
            string savePath = Path.Combine(
                PowerPro5Config.ReleaseFolder,
                "TestItem",
                "UserDefined",
                "TI",
                testFileName);
            try
            {
                // 1. 啟用 Auto Save 並建立新檔案
                SetAutoSaveInterval(60);

                // 建立並儲存新TI檔案
                PP5IDEWindow.MenuSelect("File", "New Test Item...");
                PP5IDEWindow.MenuSelect("File", "Save");
                var saveDialog = PP5IDEWindow.PerformGetElement("/Window[Save As]");
                saveDialog?.PerformInput("/ById[FileName]", InputType.SendContent, savePath);
                saveDialog?.PerformClick("/ByName[Save]", ClickType.LeftClick);

                // 2. 設定為Active狀態
                PP5IDEWindow.MenuSelect("Edit", "Active");

                // 3. 等待Backup檔案產生
                Thread.Sleep(65000); // 等待65秒確保有備份檔案

                // 4. 強制結束進程
                int currentPID = Process.GetCurrentProcess().Id;
                Process.GetProcessById(currentPID).Kill();

                // 5. 重新啟動PP5 IDE
                Process.Start("Chroma.PP5IDE.exe");
                Thread.Sleep(5000);

                // 6. 驗證恢復提示視窗
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var recoveryDialog = CurrentDriver.PerformGetElement("/Window[Recovery]");
                recoveryDialog.ShouldNotBeNull("未顯示檔案恢復提示視窗");

                var promptMessage = recoveryDialog.PerformGetElement("/ById[txtBlockMsg]").GetText();
                promptMessage.ShouldContain(expectedPromptMessage);

                // 7. 點擊Yes恢復檔案
                recoveryDialog.PerformClick("/ByName[Yes]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

                // 8. 驗證檔案恢復與Active狀態
                var tiEditor = PP5IDEWindow.PerformGetElement("/Window[0]");
                tiEditor.ShouldNotBeNull("TI Editor未正確開啟");

                // 檢查檔名
                tiEditor.GetText().ShouldContain(testFileName);

                // 檢查Active狀態 (功能表Active選項應為勾選狀態)
                var activeMenuItem = PP5IDEWindow.PerformGetElement("/Menu[Edit]/MenuItem[Active]");
                activeMenuItem.ShouldBeChecked("檔案應維持Active狀態");
            }
            finally
            {
                // 9. 清理環境
                SetAutoSaveInterval(0);
                if (File.Exists(savePath))
                {
                    File.Delete(savePath);
                }
            }
        }

        /// <summary>
        /// 測試用例編號：B19-1
        /// 測試步驟：
        /// 1. 新增 TI 檔案
        /// 2. 開啟 Security 視窗
        /// 3. 驗證預設權限等級
        /// 4. 驗證密碼欄位顯示
        /// 測試描述：確認新建 TI 檔案時 Security 視窗的預設狀態
        /// 預期輸出：
        /// 1. Level 為 None
        /// 2. 只顯示 New Password 和 Confirm Password 欄位
        /// </summary>
        [TestMethod("B19-1")]
        [TestCategory("Security設定")]
        [DataRow("None", typeof(object), DisplayName = "新TI檔Security視窗預設值")]
        public void Security_NewTIFile_CheckDefaultSecurityWindow(string expectedLevel, object dummy)
        {
            IElement securityDialog = null;
            try
            {
                // 1. 開啟 Security 視窗
                PP5IDEWindow.MenuSelect("Edit", "Security...");
                securityDialog = PP5IDEWindow.PerformGetElement("/Window[Security]");
                securityDialog.ShouldNotBeNull("Security 視窗未開啟");

                // 2. 驗證預設權限等級
                var levelComboBox = securityDialog.PerformGetElement("/ById[LevelCBox]");
                levelComboBox.ShouldNotBeNull("找不到 Level ComboBox");
                levelComboBox.ShouldHaveText(expectedLevel, "預設 Level 不是 None");

                // 3. 驗證密碼欄位顯示狀態
                var newPasswordField = securityDialog.PerformGetElement("/ById[NewPasswordBox,passwordbox]");
                newPasswordField.ShouldBeEmpty("New Password 欄位顯示狀態不正確");

                var confirmPasswordField = securityDialog.PerformGetElement("/ById[ConfirmPasswordBox,passwordbox]");
                confirmPasswordField.ShouldBeEmpty("Confirm Password 欄位顯示狀態不正確");
            }
            finally
            {
                // 關閉所有開啟的視窗
                securityDialog?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B19-2
        /// 測試步驟：
        /// 1. 新增 TI 檔案
        /// 2. 開啟 Security 視窗
        /// 3. 變更 Security Level 
        /// 4. 不輸入密碼直接按 OK
        /// 5. 驗證錯誤提示訊息
        /// 測試描述：在 Security 視窗中變更權限等級時，若未設定密碼應顯示錯誤提示
        /// 預期輸出：顯示提示需要設定密碼的錯誤訊息
        /// </summary>
        [TestMethod("B19-2")]
        [TestCategory("Security設定")]
        [DataRow("RestrictEditing", "Need password to change Security Level", typeof(object), DisplayName = "變更RestrictEditing權限-未設定密碼")]
        [DataRow("RestrictAccess", "Need password to change Security Level", typeof(object), DisplayName = "變更RestrictAccess權限-未設定密碼")]
        public void Security_ChangeLevel_CheckPasswordRequiredMessage(
            string securityLevel,
            string expectedErrorMessage,
            object dummy)
        {
            IElement securityDialog = null;
            try
            {
                // 1. 開啟 Security 視窗
                PP5IDEWindow.MenuSelect("Edit", "Security...");
                securityDialog = PP5IDEWindow.PerformGetElement("/Window[Security]");
                securityDialog.ShouldNotBeNull("Security 視窗未開啟");

                // 2. 變更 Security Level
                var levelComboBox = securityDialog.PerformGetElement("/ById[LevelCBox]");
                levelComboBox.ShouldNotBeNull("找不到 Level ComboBox");
                levelComboBox.SelectItem(securityLevel);

                // 3. 不輸入密碼直接按 OK
                securityDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 4. 驗證錯誤提示訊息
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var errorDialog = CurrentDriver.PerformGetElement("/Window[Error]");
                errorDialog.ShouldNotBeNull("未顯示錯誤提示視窗");

                var errorMessage = errorDialog.PerformGetElement("/ById[txtBlockMsg]").GetText();
                errorMessage.ShouldContain(expectedErrorMessage, "錯誤訊息內容不符");

                // 5. 關閉錯誤提示視窗
                errorDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);
            }
            finally
            {
                // 關閉所有開啟的視窗
                securityDialog?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B19-3
        /// 測試步驟：
        /// 1. 開啟 Security 視窗
        /// 2. 變更 Security Level
        /// 3. 按下 Cancel 按鈕
        /// 4. 驗證是否回到 TI Editor 視窗
        /// 測試描述：在 Security 視窗中變更權限等級後按下 Cancel，確認是否正確回到 TI Editor
        /// 預期輸出：Security 視窗關閉，回到 TI Editor 視窗
        /// </summary>
        [TestMethod("B19-3")]
        [TestCategory("Security設定")]
        [DataRow("RestrictEditing", typeof(object), DisplayName = "變更RestrictEditing權限-取消")]
        [DataRow("RestrictAccess", typeof(object), DisplayName = "變更RestrictAccess權限-取消")]
        public void Security_ChangeLevel_CheckCancelOperation(
            string securityLevel,
            object dummy)
        {
            IElement securityDialog = null;

            // 1. 開啟 Security 視窗
            PP5IDEWindow.MenuSelect("Edit", "Security...");
            securityDialog = PP5IDEWindow.PerformGetElement("/Window[Security]");
            securityDialog.ShouldNotBeNull("Security 視窗未開啟");

            // 2. 變更 Security Level
            var levelComboBox = securityDialog.PerformGetElement("/ById[LevelCBox]");
            levelComboBox.ShouldNotBeNull("找不到 Level ComboBox");
            levelComboBox.SelectItem(securityLevel);

            // 3. 按下 Cancel 按鈕
            securityDialog.PerformClick("/ByName[Cancel]", ClickType.LeftClick);

            // 4. 驗證是否回到 TI Editor
            // 檢查 Security 視窗是否已關閉
            var securityWindow = PP5IDEWindow.PerformGetElement("/Window[Security]");
            securityWindow.ShouldBeNull("Security 視窗未正確關閉");
        }

        /// <summary>
        /// 測試用例編號：B19-5
        /// 測試步驟：
        /// 1. 開啟 Security 視窗
        /// 2. 變更 Security Level
        /// 3. 僅輸入 New Password
        /// 4. 按下 OK 按鈕
        /// 5. 驗證確認密碼錯誤提示
        /// 測試描述：在 Security 視窗中未輸入確認密碼時的錯誤提示驗證
        /// 預期輸出：顯示需要輸入確認密碼的錯誤訊息
        /// </summary>
        [TestMethod("B19-5")]
        [TestCategory("Security設定")]
        [DataRow("None", "test", "Confirm password is error", typeof(object), DisplayName = "變更None-未確認密碼")]
        [DataRow("RestrictEditing", "123", "Confirm password is error", typeof(object), DisplayName = "變更RestrictEditing-未確認密碼")]
        [DataRow("RestrictAccess", "abc", "Confirm password is error", typeof(object), DisplayName = "變更RestrictAccess-未確認密碼")]
        public void Security_SetNewPasswordWithoutConfirm_CheckErrorMessage(
            string securityLevel,
            string newPassword,
            string expectedErrorMessage,
            object dummy)
        {
            IElement securityDialog = null;
            try
            {
                // 1. 開啟 Security 視窗
                PP5IDEWindow.MenuSelect("Edit", "Security...");
                securityDialog = PP5IDEWindow.PerformGetElement("/Window[Security]");
                securityDialog.ShouldNotBeNull("Security 視窗未開啟");

                // 2. 變更 Security Level
                var levelComboBox = securityDialog.PerformGetElement("/ById[LevelCBox]");
                levelComboBox.ShouldNotBeNull("找不到 Level ComboBox");
                levelComboBox.SelectItem(securityLevel);

                // 3. 僅輸入 New Password
                securityDialog.PerformInput("/ById[NewPasswordBox,passwordbox]", InputType.SendContent, newPassword);

                // 4. 按下 OK 按鈕
                securityDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 5. 驗證錯誤提示訊息
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var errorDialog = CurrentDriver.PerformGetElement("/Window[Error]");
                errorDialog.ShouldNotBeNull("未顯示錯誤提示視窗");

                var errorMessage = errorDialog.PerformGetElement("/ById[txtBlockMsg]").GetText();
                errorMessage.ShouldContain(expectedErrorMessage, "錯誤訊息內容不符");

                // 關閉錯誤提示視窗
                errorDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

                // 驗證 Security 視窗仍然開啟
                securityDialog.ShouldNotBeNull("Security 視窗不應關閉");
            }
            finally
            {
                securityDialog?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B19-6
        /// 測試步驟：
        /// 1. 開啟 Security 視窗
        /// 2. 變更 Security Level
        /// 3. 輸入 New Password
        /// 4. 輸入不同的 Confirm Password
        /// 5. 按下 OK 按鈕
        /// 6. 驗證密碼不符錯誤提示
        /// 測試描述：在 Security 視窗中輸入不相符的確認密碼時的錯誤提示驗證
        /// 預期輸出：顯示確認密碼錯誤的提示訊息
        /// </summary>
        [TestMethod("B19-6")]
        [TestCategory("Security設定")]
        [DataRow("RestrictEditing", "123", "456", "Confirm password is error", typeof(object), DisplayName = "變更RestrictEditing-密碼不符")]
        [DataRow("RestrictAccess", "abc", "def", "Confirm password is error", typeof(object), DisplayName = "變更RestrictAccess-密碼不符")]
        [DataRow("None", "test1", "test2", "Confirm password is error", typeof(object), DisplayName = "變更None-密碼不符")]
        public void Security_SetDifferentConfirmPassword_CheckErrorMessage(
            string securityLevel,
            string newPassword,
            string confirmPassword,
            string expectedErrorMessage,
            object dummy)
        {
            IElement securityDialog = null;
            try
            {
                // 1. 開啟 Security 視窗
                PP5IDEWindow.MenuSelect("Edit", "Security...");
                securityDialog = PP5IDEWindow.PerformGetElement("/Window[Security]");
                securityDialog.ShouldNotBeNull("Security 視窗未開啟");

                // 2. 變更 Security Level
                var levelComboBox = securityDialog.PerformGetElement("/ById[LevelCBox]");
                levelComboBox.ShouldNotBeNull("找不到 Level ComboBox");
                levelComboBox.SelectItem(securityLevel);

                // 3. 輸入 New Password
                securityDialog.PerformInput("/ById[NewPasswordBox,passwordbox]", InputType.SendContent, newPassword);

                // 4. 輸入不同的 Confirm Password
                securityDialog.PerformInput("/ById[ConfirmPasswordBox,passwordbox]", InputType.SendContent, confirmPassword);

                // 5. 按下 OK 按鈕
                securityDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 6. 驗證錯誤提示訊息
                AutoUIExecutor.SwitchTo(SessionType.Desktop);
                var errorDialog = CurrentDriver.PerformGetElement("/Window[Error]");
                errorDialog.ShouldNotBeNull("未顯示錯誤提示視窗");

                var errorMessage = errorDialog.PerformGetElement("/ById[txtBlockMsg]").GetText();
                errorMessage.ShouldContain(expectedErrorMessage, "錯誤訊息內容不符");

                // 關閉錯誤提示視窗
                errorDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);
                AutoUIExecutor.SwitchTo(SessionType.PP5IDE);

                // 驗證 Security 視窗仍然開啟
                securityDialog.ShouldNotBeNull("Security 視窗不應關閉");
            }
            finally
            {
                securityDialog?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B19-7
        /// 測試步驟：
        /// 1. 開啟 Security 視窗
        /// 2. 變更 Security Level
        /// 3. 輸入兩個密碼欄位
        /// 4. 點選密碼顯示按鈕
        /// 5. 驗證密碼顯示狀態
        /// 測試描述：在 Security 視窗中測試密碼顯示/隱藏功能
        /// 預期輸出：密碼正確切換顯示和隱藏狀態
        /// </summary>
        [TestMethod("B19-7")]
        [TestCategory("Security設定")]
        [DataRow("RestrictEditing", "test123", "*******", typeof(object), DisplayName = "變更RestrictEditing-密碼可見切換")]
        [DataRow("RestrictAccess", "abc456", "******", typeof(object), DisplayName = "變更RestrictAccess-密碼可見切換")]
        [DataRow("None", "password", "********", typeof(object), DisplayName = "變更None-密碼可見切換")]
        public void Security_TogglePasswordVisibility_CheckPasswordDisplay(
            string securityLevel,
            string password,
            string maskedPassword,
            object dummy)
        {
            IElement securityDialog = null;
            try
            {
                // 1. 開啟 Security 視窗
                PP5IDEWindow.MenuSelect("Edit", "Security...");
                securityDialog = PP5IDEWindow.PerformGetElement("/Window[Security]");
                securityDialog.ShouldNotBeNull("Security 視窗未開啟");

                // 2. 變更 Security Level
                var levelComboBox = securityDialog.PerformGetElement("/ById[LevelCBox]");
                levelComboBox.ShouldNotBeNull("找不到 Level ComboBox");
                levelComboBox.SelectItem(securityLevel);

                // 3. 輸入密碼
                securityDialog.PerformInput("/ById[NewPasswordBox,passwordbox]", InputType.SendContent, password);
                securityDialog.PerformInput("/ById[ConfirmPasswordBox,passwordbox]", InputType.SendContent, password);

                // 4. 驗證初始狀態（應該是隱藏的）
                var newPasswordBox = securityDialog.PerformGetElement("/ById[NewPasswordBox,passwordbox]");
                var confirmPasswordBox = securityDialog.PerformGetElement("/ById[ConfirmPasswordBox,passwordbox]");

                newPasswordBox.GetText().ShouldEqualTo(maskedPassword, "新密碼應該是隱藏狀態");
                confirmPasswordBox.GetText().ShouldEqualTo(maskedPassword, "確認密碼應該是隱藏狀態");

                // 5. 點選顯示密碼按鈕並驗證
                securityDialog.PerformClick("/ById[SecPasswordGB,NewImage]", ClickType.LeftClick);
                securityDialog.PerformClick("/ById[SecPasswordGB,ConfirmImage]", ClickType.LeftClick);

                newPasswordBox.GetText().ShouldEqualTo(password, "新密碼應該顯示原文");
                confirmPasswordBox.GetText().ShouldEqualTo(password, "確認密碼應該顯示原文");

                // 6. 再次點選隱藏密碼並驗證
                securityDialog.PerformClick("/ById[SecPasswordGB,NewImage]", ClickType.LeftClick);
                securityDialog.PerformClick("/ById[SecPasswordGB,ConfirmImage]", ClickType.LeftClick);

                newPasswordBox.GetText().ShouldEqualTo(maskedPassword, "新密碼應該再次隱藏");
                confirmPasswordBox.GetText().ShouldEqualTo(maskedPassword, "確認密碼應該再次隱藏");
            }
            finally
            {
                securityDialog?.CloseWindow();
            }
        }

        /// <summary>
        /// 測試用例編號：B19-8
        /// 測試步驟：
        /// 1. 開啟 Security 視窗
        /// 2. 變更 Security Level
        /// 3. 輸入新密碼和確認密碼(相同密碼)
        /// 4. 按下 OK 按鈕
        /// 5. 驗證存檔提示視窗
        /// 測試描述：在 Security 視窗中設定密碼後的存檔提示驗證
        /// 預期輸出：顯示需要存檔的提示視窗
        /// </summary>
        [TestMethod("B19-8")]
        [TestCategory("Security設定")]
        [DataRow("RestrictEditing", "test123", "Need to save TestItem for security change , Do you want to save TestItem?", typeof(object), DisplayName = "變更RestrictEditing-需存檔提示")]
        [DataRow("RestrictAccess", "abc456", "Need to save TestItem for security change , Do you want to save TestItem?", typeof(object), DisplayName = "變更RestrictAccess-需存檔提示")]
        [DataRow("None", "password", "Need to save TestItem for security change , Do you want to save TestItem?", typeof(object), DisplayName = "變更None-需存檔提示")]
        public void Security_SetValidPassword_CheckSaveFilePrompt(
            string securityLevel,
            string password,
            string expectedPromptMessage,
            object dummy)
        {
            IElement securityDialog = null;
            try
            {
                // 1. 開啟 Security 視窗
                PP5IDEWindow.MenuSelect("Edit", "Security...");
                securityDialog = PP5IDEWindow.PerformGetElement("/Window[Security]");
                securityDialog.ShouldNotBeNull("Security 視窗未開啟");

                // 2. 變更 Security Level
                var levelComboBox = securityDialog.PerformGetElement("/ById[LevelCBox]");
                levelComboBox.ShouldNotBeNull("找不到 Level ComboBox");
                levelComboBox.SelectItem(securityLevel);

                // 3. 輸入密碼
                securityDialog.PerformInput("/ById[NewPasswordBox,passwordbox]", InputType.SendContent, password);
                securityDialog.PerformInput("/ById[ConfirmPasswordBox,passwordbox]", InputType.SendContent, password);

                // 4. 按下 OK 按鈕
                securityDialog.PerformClick("/ByName[Ok]", ClickType.LeftClick);

                // 5. 驗證存檔提示視窗
                var promptDialog = PP5IDEWindow.PerformGetElement("/Window[Message]");
                promptDialog.ShouldNotBeNull("未顯示存檔提示視窗");

                var promptMessage = promptDialog.PerformGetElement("/ById[txtBlockMsg]").GetText();
                promptMessage.ShouldEqualTo(expectedPromptMessage, "提示訊息內容不符");

                // 關閉提示視窗
                promptDialog.PerformClick("/ByName[Yes]", ClickType.LeftClick);
            }
            finally
            {
                securityDialog?.CloseWindow();
            }
        }

        /// <summary>
        /// TestCase: J1-2
        /// Repeat inserting and deleting same command for N times
        /// </summary>
        [TestMethod("Repeat inserting and deleting same command for N times")]
        [TestCategory("長時間動作(J1)")]
        [DataRow(1000)]
        public void MainPanel_TIEditor_InsertAndDeleteSameCommandForNTimes(int repeatCount)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            for (int i = 0; i < repeatCount; i++)
            {
                // Add first command in group "AC Source"
                //AddCommandBy("AC Source", 1, TestCommandSourceType.Device);
                AddCommandBy(TestCmdGroupType.AC_Source, 1);

                // LeftClick on the command
                Console.WriteLine("LeftClick on the command");
                GetCellBy("PGGrid", 0, "Test Command").LeftClick();

                // Delete the command by clicking on the buttons (not from menu)
                Console.WriteLine("Delete the command");
                var functionBtns = CurrentDriver.GetWebElementFromWebDriver(By.ClassName("ToolBar"))
                                                .GetWebElementsFromWebElement(By.ClassName("RadioButton"));
                functionBtns[12].LeftClick();
            }
        }

        /// <summary>
        /// TestCase: J1-3
        /// Repeat copying and pasting same command for N times
        /// </summary>
        [TestMethod("Repeat copying and pasting same command for N times")]
        [TestCategory("長時間動作(J1)")]
        [DataRow(1000)]
        public void MainPanel_TIEditor_CopyAndPasteSameCommandForNTimes(int repeatCount)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add first command in group "AC Source"
            //AddCommandBy("AC Source", 1, TestCommandSourceType.Device);
            AddCommandBy(TestCmdGroupType.AC_Source, 1);

            // LeftClick on the command
            Console.WriteLine("LeftClick on the command");
            GetCellBy("PGGrid", 0, "Test Command").LeftClick();

            for (int i = 0; i < repeatCount; i++)
            {
                // Copy and Paste the command
                Console.WriteLine("Copy and Paste the command");
                CopyAndPaste();
            }
        }

        /// <summary>
        /// TestCase: J1-4
        /// Repeat inserting and deleting same Variable for N times
        /// </summary>
        [TestMethod("Repeat inserting and deleting same Variable for N times")]
        [TestCategory("長時間動作(J1)")]
        [DataRow(1000)]
        public void MainPanel_TIEditor_InsertAndDeleteSameVariableForNTimes(int repeatCount)
        {
            for (int i = 0; i < repeatCount; i++)
            {
                // Create new condition variable
                CreateNewVariable1(VariableTabType.Condition, "J1-4", "J1-4");

                // Delete by clicking on the buttons (from toolbar)
                var functionBtns = CurrentDriver.GetWebElementFromWebDriver(By.ClassName("ToolBar"))
                                                .GetWebElementsFromWebElement(By.ClassName("RadioButton"));
                functionBtns[12].LeftClick();
            }
        }

        /// <summary>
        /// TestCase: J1-5
        /// Repeat copying and pasting same variable for N times
        /// </summary>
        [TestMethod("Repeat copying and pasting same variable for N times")]
        [TestCategory("長時間動作(J1)")]
        [DataRow(1000)]
        public void MainPanel_TIEditor_CopyAndPasteSameVariableForNTimes(int repeatCount)
        {
            // Create new condition variable
            CreateNewVariable1(VariableTabType.Condition, "J1-5", "J1-5");
            GetCellBy("CndGrid", 0, "No").LeftClick();

            for (int i = 0; i < repeatCount; i++)
            {
                // Copy and Paste the command
                Console.WriteLine("Copy and Paste the command");
                CopyAndPaste();
            }
        }

        /// <summary>
        /// TestCase: J1-6
        /// Repeat inserting and deleting same image for N times
        /// </summary>
        [TestMethod("Repeat inserting and deleting same image for N times")]
        [TestCategory("長時間動作(J1)")]
        [DataRow(1000)]
        public void MainPanel_TIEditor_InsertAndDeleteSameImageForNTimes(int repeatCount)
        {
            for (int i = 0; i < repeatCount; i++)
            {
                // Insert image

                // Delete image
            }
        }

        /// <summary>
        /// TestCase: J2-1/J2-2
        /// Create 10000/20000 variables (estimated time: 2500/5000 mins)
        /// </summary>
        [TestMethod("Create 10000/20000 variables (estimated time: 2500/5000 mins)")]
        [TestCategory("長時間動作(J1)")]
        [DataRow(10000)] //J2-1
        [DataRow(20000)] //J2-2
        public void MainPanel_TIEditor_CreateMassiveVariables(int repeatCount)
        {
            for (int i = 0; i < repeatCount; i++)
            {
                CreateNewVariable1(VariableTabType.Condition, "varCN" + i.ToString(), "varCN" + i.ToString());
            }
        }

        /// <summary>
        /// TestCase: J2-3
        /// Copy and paste 10000 variables 
        /// </summary>
        [TestMethod("Copy and paste 10000 variables")]
        [TestCategory("大流量資料(J2)")]
        [DataRow(10000)] //J2-3
        public void MainPanel_TIEditor_CopyAndPaste10000Variables(int repeatCount)
        {
            // Create new condition variable
            CreateNewVariable1(VariableTabType.Condition, "J2-3", "J2-3");
            GetCellBy("CndGrid", 0, "No").LeftClick();

            for (int i = 0; i < repeatCount; i++)
            {
                // Copy and Paste the command
                Console.WriteLine("Copy and Paste the command");
                CopyAndPaste();
            }
        }

        /// <summary>
        /// TestCase: J2-4/J2-5
        /// Create 10000/20000 commands (estimated time: 2500/5000 mins)
        /// </summary>
        [TestMethod("Create 10000/20000 commands (estimated time: 2500/5000 mins)")]
        [TestCategory("大流量資料(J2)")]
        [DataRow(10000)] //J2-4
        [DataRow(20000)] //J2-5
        public void MainPanel_TIEditor_CreateMassiveCommands(int repeatCount)
        {
            AddCommandBy(TestCmdGroupType.AC_Source, 1, addCount: repeatCount);
        }

        /// <summary>
        /// TestCase: J2-6
        /// Copy and paste 10000 commands
        /// </summary>
        [TestMethod("Copy and paste same 10000 commands")]
        [TestCategory("大流量資料(J2)")]
        [DataRow(10000)]
        public void MainPanel_TIEditor_CopyAndPaste10000Commands(int repeatCount)
        {
            // Switch to test item context window
            TestItemTabNavi(TestItemTabType.TIContext);

            // Add first command in group "AC Source"
            //AddCommandBy("AC Source", 1, TestCommandSourceType.Device);
            AddCommandBy(TestCmdGroupType.AC_Source, 1);

            // LeftClick on the command
            Console.WriteLine("LeftClick on the command");
            GetCellBy("PGGrid", 0, "Test Command").LeftClick();

            for (int i = 0; i < repeatCount; i++)
            {
                // Copy and Paste the command
                Console.WriteLine("Copy and Paste the command");
                CopyAndPaste();
            }
        }

        ////Sunny
        //[TestMethod]
        //public void MainPanel_TIEditor_AddNewCmd2()
        //{
        //    //MainPanel_TIEditor_OpenNewTI();
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {
        //        // LeftDblClick on Text "DC Source" at (60,11)
        //        Console.WriteLine("LeftDblClick on Text \"DC Source\" at (60,11)");
        //        string xpath_LeftDblClickTextDCSource_60_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
        //        var winElem_LeftDblClickTextDCSource_60_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_60_11);
        //        if (winElem_LeftDblClickTextDCSource_60_11 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_60_11.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_60_11}");
        //            return;
        //        }


        //        // LeftDblClick on Text "SetDC_ListSequenceParameter" at (35,12)
        //        Console.WriteLine("LeftDblClick on Text \"SetDC_ListSequenceParameter\" at (35,12)");
        //        string xpath_LeftDblClickTextSetDC_List_35_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetDC_ListSequenceParameter\"][@AutomationId=\"cmdTxtBlk\"]";
        //        var winElem_LeftDblClickTextSetDC_List_35_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetDC_List_35_12);
        //        if (winElem_LeftDblClickTextSetDC_List_35_12 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetDC_List_35_12.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetDC_List_35_12}");
        //            return;
        //        }


        //        // LeftDblClick on Text "SetDC_Vout" at (46,9)
        //        Console.WriteLine("LeftDblClick on Text \"SetDC_Vout\" at (46,9)");
        //        string xpath_LeftDblClickTextSetDC_Vout_46_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetDC_Vout\"][@AutomationId=\"cmdTxtBlk\"]";
        //        var winElem_LeftDblClickTextSetDC_Vout_46_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetDC_Vout_46_9);
        //        if (winElem_LeftDblClickTextSetDC_Vout_46_9 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetDC_Vout_46_9.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetDC_Vout_46_9}");
        //            return;
        //        }


        //        // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (29,11)
        //        Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (29,11)");
        //        string xpath_LeftClickCustomUncheckedI_29_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
        //        var winElem_LeftClickCustomUncheckedI_29_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_29_11);
        //        if (winElem_LeftClickCustomUncheckedI_29_11 != null)
        //        {
        //            winElem_LeftClickCustomUncheckedI_29_11.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_29_11}");
        //            return;
        //        }


        //        // LeftClick on Custom "Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P" at (27,17)
        //        Console.WriteLine("LeftClick on Custom \"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\" at (27,17)");
        //        string xpath_LeftClickCustomUncheckedI_27_17 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\"Unchecked, Item: Chroma.TestItemEditor.ComposedElement.Default.P\")][@AutomationId=\"IsSkip\"]";
        //        var winElem_LeftClickCustomUncheckedI_27_17 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomUncheckedI_27_17);
        //        if (winElem_LeftClickCustomUncheckedI_27_17 != null)
        //        {
        //            winElem_LeftClickCustomUncheckedI_27_17.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomUncheckedI_27_17}");
        //            return;
        //        }


        //        bSuccess = true;
        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //    }
        //}

        //[TestMethod]
        //public void MainPanel_TIEditor_AddNewCmd_InputLabel()
        //{
        //    //MainPanel_TIEditor_OpenNewTI();
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {
        //        // LeftDblClick on Text "DC Source" at (60,11)
        //        Console.WriteLine("LeftDblClick on Text \"DC Source\" at (60,11)");
        //        string xpath_LeftDblClickTextDCSource_60_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
        //        var winElem_LeftDblClickTextDCSource_60_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_60_11);
        //        if (winElem_LeftDblClickTextDCSource_60_11 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_60_11.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_60_11}");
        //            return;
        //        }


        //        // LeftDblClick on Text "SetDC_Vout" at (46,9)
        //        Console.WriteLine("LeftDblClick on Text \"SetDC_Vout\" at (46,9)");
        //        string xpath_LeftDblClickTextSetDC_Vout_46_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetDC_Vout\"][@AutomationId=\"cmdTxtBlk\"]";
        //        var winElem_LeftDblClickTextSetDC_Vout_46_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetDC_Vout_46_9);
        //        if (winElem_LeftDblClickTextSetDC_Vout_46_9 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetDC_Vout_46_9.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetDC_Vout_46_9}");
        //            return;
        //        }

        //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (37,10)
        //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (37,10)");
        //        string xpath_LeftClickCustomItemChroma_37_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Label\"]";
        //        var winElem_LeftClickCustomItemChroma_37_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_37_10);
        //        if (winElem_LeftClickCustomItemChroma_37_10 != null)
        //        {
        //            winElem_LeftClickCustomItemChroma_37_10.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_37_10}");
        //            return;
        //        }


        //        // KeyboardInput VirtualKeys=""asd"" CapsLock=False NumLock=True ScrollLock=True
        //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"asd\"\" CapsLock=False NumLock=True ScrollLock=True");
        //        System.Threading.Thread.Sleep(100);
        //        winElem_LeftClickCustomItemChroma_37_10.SendKeys("asd");

        //        bSuccess = true;
        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //    }
        //}

        //[TestMethod]
        //public void MainPanel_TIEditor_AddNewCmd_InputDesc()
        //{
        //    //MainPanel_TIEditor_OpenNewTI();
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {
        //        // LeftDblClick on Text "DC Source" at (60,11)
        //        Console.WriteLine("LeftDblClick on Text \"DC Source\" at (60,11)");
        //        string xpath_LeftDblClickTextDCSource_60_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
        //        var winElem_LeftDblClickTextDCSource_60_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_60_11);
        //        if (winElem_LeftDblClickTextDCSource_60_11 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_60_11.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_60_11}");
        //            return;
        //        }


        //        // LeftDblClick on Text "SetDC_Vout" at (46,9)
        //        Console.WriteLine("LeftDblClick on Text \"SetDC_Vout\" at (46,9)");
        //        string xpath_LeftDblClickTextSetDC_Vout_46_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetDC_Vout\"][@AutomationId=\"cmdTxtBlk\"]";
        //        var winElem_LeftDblClickTextSetDC_Vout_46_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetDC_Vout_46_9);
        //        if (winElem_LeftDblClickTextSetDC_Vout_46_9 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetDC_Vout_46_9.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetDC_Vout_46_9}");
        //            return;
        //        }

        //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV" at (47,11)
        //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\" at (47,11)");
        //        string xpath_LeftClickCustomItemChroma_47_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Custom[@ClassName=\"PGGridAeraView\"]/DataGrid[@AutomationId=\"PGGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.PGGridRowViewModel\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.PGGridRowV\")][@AutomationId=\"Description\"]";
        //        var winElem_LeftClickCustomItemChroma_47_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_47_11);
        //        if (winElem_LeftClickCustomItemChroma_47_11 != null)
        //        {
        //            winElem_LeftClickCustomItemChroma_47_11.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_47_11}");
        //            return;
        //        }


        //        // KeyboardInput VirtualKeys=""asd"" CapsLock=False NumLock=True ScrollLock=True
        //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"asd\"\" CapsLock=False NumLock=True ScrollLock=True");
        //        System.Threading.Thread.Sleep(100);
        //        winElem_LeftClickCustomItemChroma_47_11.SendKeys("asd");


        //        bSuccess = true;
        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //    }
        //}

        //[TestMethod]
        //public void MainPanel_TIEditor_AddNewCmd_AddNewCondParam()
        //{
        //    //MainPanel_TIEditor_OpenNewTI();
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {
        //        // LeftDblClick on Text "DC Source" at (60,11)
        //        Console.WriteLine("LeftDblClick on Text \"DC Source\" at (60,11)");
        //        string xpath_LeftDblClickTextDCSource_60_11 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/Text[@ClassName=\"TextBlock\"][@Name=\"DC Source\"]";
        //        var winElem_LeftDblClickTextDCSource_60_11 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextDCSource_60_11);
        //        if (winElem_LeftDblClickTextDCSource_60_11 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextDCSource_60_11.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextDCSource_60_11}");
        //            return;
        //        }


        //        // LeftDblClick on Text "SetDC_Vout" at (46,9)
        //        Console.WriteLine("LeftDblClick on Text \"SetDC_Vout\" at (46,9)");
        //        string xpath_LeftDblClickTextSetDC_Vout_46_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Tree[@AutomationId=\"DeivceCmdTree\"]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemRoo\")]/TreeItem[@ClassName=\"TreeViewItem\"][starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CmdTreeViewItemNod\")]/Text[@Name=\"SetDC_Vout\"][@AutomationId=\"cmdTxtBlk\"]";
        //        var winElem_LeftDblClickTextSetDC_Vout_46_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickTextSetDC_Vout_46_9);
        //        if (winElem_LeftDblClickTextSetDC_Vout_46_9 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickTextSetDC_Vout_46_9.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickTextSetDC_Vout_46_9}");
        //            return;
        //        }

        //        // LeftDblClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (127,0)
        //        Console.WriteLine("LeftDblClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (127,0)");
        //        string xpath_LeftDblClickCustomItemChroma_127_0 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
        //        var winElem_LeftDblClickCustomItemChroma_127_0 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickCustomItemChroma_127_0);
        //        if (winElem_LeftDblClickCustomItemChroma_127_0 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickCustomItemChroma_127_0.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickCustomItemChroma_127_0}");
        //            return;
        //        }

        //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (108,10)
        //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (108,10)");
        //        string xpath_LeftClickCustomItemChroma_127_01 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"ShowName\"]";
        //        var winElem_LeftClickCustomItemChroma_127_01 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_127_01);
        //        if (winElem_LeftClickCustomItemChroma_127_01 != null)
        //        {
        //            winElem_LeftClickCustomItemChroma_127_01.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_127_01}");
        //            return;
        //        }


        //        // KeyboardInput VirtualKeys=""asd"" CapsLock=False NumLock=True ScrollLock=True
        //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"asd\"\" CapsLock=False NumLock=True ScrollLock=True");
        //        System.Threading.Thread.Sleep(100);
        //        winElem_LeftClickCustomItemChroma_127_01.SendKeys("asd");


        //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (108,10)
        //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (108,10)");
        //        string xpath_LeftClickCustomItemChroma_108_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"CallName\"]";
        //        var winElem_LeftClickCustomItemChroma_108_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_108_10);
        //        if (winElem_LeftClickCustomItemChroma_108_10 != null)
        //        {
        //            winElem_LeftClickCustomItemChroma_108_10.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_108_10}");
        //            return;
        //        }


        //        // KeyboardInput VirtualKeys=""asd"" CapsLock=False NumLock=True ScrollLock=True
        //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"asd\"\" CapsLock=False NumLock=True ScrollLock=True");
        //        System.Threading.Thread.Sleep(100);
        //        winElem_LeftClickCustomItemChroma_108_10.SendKeys("asd");


        //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (51,8)
        //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (51,8)");
        //        string xpath_LeftClickCustomItemChroma_51_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedType\"]";
        //        var winElem_LeftClickCustomItemChroma_51_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_51_8);
        //        if (winElem_LeftClickCustomItemChroma_51_8 != null)
        //        {
        //            winElem_LeftClickCustomItemChroma_51_8.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_51_8}");
        //            return;
        //        }


        //        // LeftClick on Text "Float" at (28,12)
        //        Console.WriteLine("LeftClick on Text \"Float\" at (28,12)");
        //        string xpath_LeftClickTextFloat_28_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"Float\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Float\"]";
        //        var winElem_LeftClickTextFloat_28_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextFloat_28_12);
        //        if (winElem_LeftClickTextFloat_28_12 != null)
        //        {
        //            winElem_LeftClickTextFloat_28_12.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextFloat_28_12}");
        //            return;
        //        }


        //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (45,5)
        //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (45,5)");
        //        string xpath_LeftClickCustomItemChroma_45_5 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEditType\"]";
        //        var winElem_LeftClickCustomItemChroma_45_5 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_45_5);
        //        if (winElem_LeftClickCustomItemChroma_45_5 != null)
        //        {
        //            winElem_LeftClickCustomItemChroma_45_5.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_45_5}");
        //            return;
        //        }


        //        // LeftClick on Text "ComboBox" at (36,9)
        //        Console.WriteLine("LeftClick on Text \"ComboBox\" at (36,9)");
        //        string xpath_LeftClickTextComboBox_36_9 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Custom/List[@AutomationId=\"PART_Content\"]/ListItem[@ClassName=\"ListBoxItem\"][@Name=\"ComboBox\"]/Text[@ClassName=\"TextBlock\"][@Name=\"ComboBox\"]";
        //        var winElem_LeftClickTextComboBox_36_9 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextComboBox_36_9);
        //        if (winElem_LeftClickTextComboBox_36_9 != null)
        //        {
        //            winElem_LeftClickTextComboBox_36_9.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextComboBox_36_9}");
        //            return;
        //        }


        //        // LeftClick on Custom ", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow" at (59,6)
        //        Console.WriteLine("LeftClick on Custom \", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\" at (59,6)");
        //        string xpath_LeftClickCustomItemChroma_59_6 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem8\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CndGridView\"]/DataGrid[@AutomationId=\"CndGrid\"]/Pane[@Name=\"DataPanel\"][@AutomationId=\"dataPresenter\"]/DataItem[starts-with(@Name,\"Chroma.TestItemEditor.ComposedElement.Default.CndGridRowViewMode\")]/Custom[starts-with(@Name,\", Item: Chroma.TestItemEditor.ComposedElement.Default.CndGridRow\")][@AutomationId=\"DisplayedEnum\"]";
        //        var winElem_LeftClickCustomItemChroma_59_6 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCustomItemChroma_59_6);
        //        if (winElem_LeftClickCustomItemChroma_59_6 != null)
        //        {
        //            winElem_LeftClickCustomItemChroma_59_6.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCustomItemChroma_59_6}");
        //            return;
        //        }


        //        // LeftClick on Button "New" at (50,10)
        //        Console.WriteLine("LeftClick on Button \"New\" at (50,10)");
        //        string xpath_LeftClickButtonNew_50_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Editor\"]/Button[@ClassName=\"Button\"][@Name=\"New\"]";
        //        var winElem_LeftClickButtonNew_50_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonNew_50_10);
        //        if (winElem_LeftClickButtonNew_50_10 != null)
        //        {
        //            winElem_LeftClickButtonNew_50_10.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonNew_50_10}");
        //            return;
        //        }


        //        // LeftClick on Edit "" at (43,8)
        //        Console.WriteLine("LeftClick on Edit \"\" at (43,8)");
        //        string xpath_LeftClickEdit_43_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Creater\"]/Edit[@AutomationId=\"enumItemNameTxtBox\"]";
        //        var winElem_LeftClickEdit_43_8 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_43_8);
        //        if (winElem_LeftClickEdit_43_8 != null)
        //        {
        //            winElem_LeftClickEdit_43_8.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_43_8}");
        //            return;
        //        }


        //        //// KeyboardInput VirtualKeys=""1"Keys.Tab + Keys.Tab"1"" CapsLock=False NumLock=True ScrollLock=True
        //        //Console.WriteLine("KeyboardInput VirtualKeys=\"\"1\"Keys.Tab + Keys.Tab\"1\"\" CapsLock=False NumLock=True ScrollLock=True");
        //        //System.Threading.Thread.Sleep(100);
        //        //winElem_LeftClickEdit_43_8.SendKeys("1" + Keys.Tab + "1");
        //        //winElem_LeftClickEdit_43_8.SendKeys(Keys.Tab);
        //        //winElem_LeftClickEdit_43_8.SendKeys("1");

        //        // LeftClick on Value textbox in Enum Item Creator dialog
        //        Console.WriteLine("LeftClick on Value textbox in Enum Item Creator dialog");
        //        string valueAutomationID = "enumItemValueTxtBox";
        //        //string xpath_LeftClickEdit_43_8 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Creater\"]/Edit[@AutomationId=\"enumItemNameTxtBox\"]";
        //        uIActionPP5IDE.PerformActionByAutomationID(ActionType.None, valueAutomationID);
        //        var winElem_LeftClickValueInEnumItemCreator = uIActionPP5IDE.ElementFound;
        //        if (winElem_LeftClickValueInEnumItemCreator != null)
        //        {
        //            winElem_LeftClickValueInEnumItemCreator.Click();
        //            winElem_LeftClickValueInEnumItemCreator.SendKeys("1");
        //            Assert.AreEqual("1", winElem_LeftClickValueInEnumItemCreator.Text);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using AutomationId: {valueAutomationID}");
        //            return;
        //        }


        //        // LeftClick on Button "Ok" at (82,10)
        //        Console.WriteLine("LeftClick on Button \"Ok\" at (82,10)");
        //        string xpath_LeftClickButtonOk_82_10 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Creater\"]/Button[@ClassName=\"Button\"][@Name=\"Ok\"]";
        //        var winElem_LeftClickButtonOk_82_10 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickButtonOk_82_10);
        //        if (winElem_LeftClickButtonOk_82_10 != null)
        //        {
        //            winElem_LeftClickButtonOk_82_10.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickButtonOk_82_10}");
        //            return;
        //        }


        //        // LeftClick on Text "Ok" at (19,12)
        //        Console.WriteLine("LeftClick on Text \"Ok\" at (19,12)");
        //        string xpath_LeftClickTextOk_19_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Window\"][@Name=\"Enum Item Editor\"]/Button[@ClassName=\"Button\"][@Name=\"Ok\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Ok\"]";
        //        var winElem_LeftClickTextOk_19_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTextOk_19_12);
        //        if (winElem_LeftClickTextOk_19_12 != null)
        //        {
        //            winElem_LeftClickTextOk_19_12.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTextOk_19_12}");
        //            return;
        //        }

        //        bSuccess = true;
        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //    }
        //}

        //[TestMethod]
        //public void MainPanel_TIEditor_AddNewCmd_CmdSearchingDownAndUp()
        //{
        //    //MainPanel_TIEditor_OpenNewTI();
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {
        //        // LeftClick on Edit "" at (61,4)
        //        Console.WriteLine("LeftClick on Edit \"\" at (61,4)");
        //        string xpath_LeftClickEdit_61_4 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Edit[@AutomationId=\"searchText\"]";
        //        var winElem_LeftClickEdit_61_4 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickEdit_61_4);
        //        if (winElem_LeftClickEdit_61_4 != null)
        //        {
        //            winElem_LeftClickEdit_61_4.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickEdit_61_4}");
        //            return;
        //        }


        //        // KeyboardInput VirtualKeys=""ac"" CapsLock=False NumLock=True ScrollLock=True
        //        Console.WriteLine("KeyboardInput VirtualKeys=\"\"ac\"\" CapsLock=False NumLock=True ScrollLock=True");
        //        System.Threading.Thread.Sleep(100);
        //        winElem_LeftClickEdit_61_4.SendKeys("ac");


        //        // LeftClick on Image "" at (6,12)
        //        Console.WriteLine("LeftClick on Image \"\" at (6,12)");
        //        string xpath_LeftClickImage_6_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"SearchBtn\"]/Image[@ClassName=\"Image\"]";
        //        var winElem_LeftClickImage_6_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickImage_6_12);
        //        if (winElem_LeftClickImage_6_12 != null)
        //        {
        //            winElem_LeftClickImage_6_12.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickImage_6_12}");
        //            return;
        //        }


        //        // LeftDblClick on Image "" at (13,16)
        //        Console.WriteLine("LeftDblClick on Image \"\" at (13,16)");
        //        string xpath_LeftDblClickImage_13_16 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"NextBtn\"]/Image[@ClassName=\"Image\"]";
        //        var winElem_LeftDblClickImage_13_16 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickImage_13_16);
        //        if (winElem_LeftDblClickImage_13_16 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickImage_13_16.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickImage_13_16}");
        //            return;
        //        }


        //        // LeftDblClick on Image "" at (11,15)
        //        Console.WriteLine("LeftDblClick on Image \"\" at (11,15)");
        //        string xpath_LeftDblClickImage_11_15 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem2\"][starts-with(@AutomationId,\"dockItem\")]/Custom[@ClassName=\"CmdTreeView\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@AutomationId=\"searchBox\"]/Button[@AutomationId=\"PreviosBtn\"]/Image[@ClassName=\"Image\"]";
        //        var winElem_LeftDblClickImage_11_15 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftDblClickImage_11_15);
        //        if (winElem_LeftDblClickImage_11_15 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_LeftDblClickImage_11_15.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.DoubleClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftDblClickImage_11_15}");
        //            return;
        //        }

        //        bSuccess = true;
        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //    }
        //}

        //[TestMethod]
        //public void MainPanel_TIEditor_AddNewCmd_TestCmdPanelFloat()
        //{
        //    //MainPanel_TIEditor_OpenNewTI();
        //    TimeSpan.FromSeconds(2);

        //    bool bSuccess = false;

        //    try
        //    {
        //        Thread.Sleep(2000);

        //        // RightClick on Text "Test Item Context" at (30,3)
        //        Console.WriteLine("RightClick on Text \"Test Item Context\" at (30,3)");
        //        string xpath_RightClickTextTestItemCo_30_3 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Custom[@AutomationId=\"Container\"]/Pane[@ClassName=\"ScrollViewer\"]/Custom[@ClassName=\"MainControl\"]/Group[@Name=\"dockManager\"][@AutomationId=\"dockManager\"]/Group[@Name=\"dockItem1\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem4\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem5\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"dockItem6\"][starts-with(@AutomationId,\"dockItem\")]/Group[@Name=\"LeftDockPanel\"][@AutomationId=\"LeftDockPanel\"]/Text[@ClassName=\"TextBlock\"][@Name=\"Test Item Context\"]";
        //        var winElem_RightClickTextTestItemCo_30_3 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_RightClickTextTestItemCo_30_3);
        //        if (winElem_RightClickTextTestItemCo_30_3 != null)
        //        {
        //            AutoUIExecutor.DesktopSessionElement.Mouse.MouseMove(winElem_RightClickTextTestItemCo_30_3.Coordinates);
        //            AutoUIExecutor.DesktopSessionElement.Mouse.ContextClick(null);
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_RightClickTextTestItemCo_30_3}");
        //            return;
        //        }

        //        Thread.Sleep(200);

        //        // LeftClick on CheckBox "Float" at (30,12)
        //        Console.WriteLine("LeftClick on CheckBox \"Float\" at (30,12)");
        //        string xpath_LeftClickCheckBoxFloat_30_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"Window\"]/Window[@ClassName=\"Popup\"]/Menu[@ClassName=\"ItemContextMenu\"]/CheckBox[@Name=\"Float\"][starts-with(@AutomationId,\"BarCheckItemLinkMenuItemFloating3C0A5E61167740189D73F8BF55CD4326\")]";
        //        var winElem_LeftClickCheckBoxFloat_30_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickCheckBoxFloat_30_12);
        //        if (winElem_LeftClickCheckBoxFloat_30_12 != null)
        //        {
        //            winElem_LeftClickCheckBoxFloat_30_12.Click();
        //        }
        //        else
        //        {
        //            Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickCheckBoxFloat_30_12}");
        //            return;
        //        }

        //        bSuccess = true;
        //    }

        //    finally
        //    {
        //        Assert.AreEqual(bSuccess, true);
        //    }
        //}

        //[TestMethod]
        //public void ppt_insert()
        //{
        //    // LeftClick on TabItem "插入" at (22,12)
        //    Console.WriteLine("LeftClick on TabItem \"插入\" at (22,12)");
        //    string xpath_LeftClickTabItem插入_22_12 = "/Pane[@ClassName=\"#32769\"][@Name=\"桌面 1\"]/Window[@ClassName=\"PPTFrameClass\"][@Name=\"TI Editor Auto UI Test – 架構優化.pptx - PowerPoint\"]/Pane[@ClassName=\"MsoCommandBarDock\"][@Name=\"MsoDockTop\"]/ToolBar[@ClassName=\"MsoCommandBar\"]/Pane[@ClassName=\"MsoWorkPane\"][@Name=\"Ribbon\"]/Pane[@ClassName=\"NUIPane\"]/Pane[@ClassName=\"NetUIHWNDElement\"]/Pane[@ClassName=\"NetUInetpane\"][@Name=\"Ribbon\"]/Tab[@ClassName=\"NetUIPanViewer\"][@Name=\"功能區索引標籤\"]/TabItem[@ClassName=\"NetUIRibbonTab\"][@Name=\"插入\"]";
        //    var winElem_LeftClickTabItem插入_22_12 = AutoUIExecutor.FindElementByAbsoluteXPath(xpath_LeftClickTabItem插入_22_12);
        //    if (winElem_LeftClickTabItem插入_22_12 != null)
        //    {
        //        winElem_LeftClickTabItem插入_22_12.Click();
        //    }
        //    else
        //    {
        //        Console.WriteLine($"Failed to find element using xpath: {xpath_LeftClickTabItem插入_22_12}");
        //        return;
        //    }
        //}

        //[TestMethod]
        //public void TestAssertFailed()
        //{
        //    Assert.Fail();
        //}

        [TestMethod]
        public void TestGetDataGridCellElement()
        {
            PP5IDEWindow.PerformClick("/ByClass[ScrollViewer]/ById[searchBox,searchText]", ClickType.LeftClick);
        }
    }
}
